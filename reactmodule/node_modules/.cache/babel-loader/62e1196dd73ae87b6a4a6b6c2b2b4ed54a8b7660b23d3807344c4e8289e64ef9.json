{"ast":null,"code":"\"use strict\";\n\nimport { registerI18nLoader as o, fetchI18nBundle as d, getI18nBundleData as g } from \"./asset-registries/i18n.js\";\nimport I from \"./util/formatMessage.js\";\nconst r = new Map();\nlet s;\nclass u {\n  constructor(e) {\n    this.packageName = e;\n  }\n  getText(e) {\n    if (typeof e == \"string\" && (e = {\n      key: e,\n      defaultText: e\n    }), !e || !e.key) return \"\";\n    const t = g(this.packageName);\n    t && !t[e.key] && console.warn(`Key ${e.key} not found in the i18n bundle, the default text will be used`);\n    const l = t && t[e.key] ? t[e.key] : e.defaultText || e.key;\n    for (var _len = arguments.length, i = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      i[_key - 1] = arguments[_key];\n    }\n    return I(l, i);\n  }\n}\nconst a = n => {\n    if (r.has(n)) return r.get(n);\n    const e = new u(n);\n    return r.set(n, e), e;\n  },\n  f = async n => s ? s(n) : (await d(n), a(n)),\n  y = n => {\n    s = n;\n  };\nexport default u;\nexport { o as registerI18nLoader, f as getI18nBundle, y as registerCustomI18nBundleGetter };","map":{"version":3,"names":["registerI18nLoader","o","fetchI18nBundle","d","getI18nBundleData","g","I","r","Map","s","u","constructor","e","packageName","getText","key","defaultText","t","console","warn","l","_len","arguments","length","i","Array","_key","a","n","has","get","set","f","y","getI18nBundle","registerCustomI18nBundleGetter"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-base/src/i18nBundle.ts"],"sourcesContent":["import { registerI18nLoader, fetchI18nBundle, getI18nBundleData } from \"./asset-registries/i18n.js\";\nimport formatMessage from \"./util/formatMessage.js\";\n\nconst I18nBundleInstances = new Map<string, I18nBundle>();\n\nlet customGetI18nBundle: I18nBundleGetter;\n\ntype I18nText = {\n\tkey: string,\n\tdefaultText: string,\n};\n\ntype I18nBundleGetter = (packageName: string) => Promise<I18nBundle>;\n\n/**\n * @class\n * @public\n */\nclass I18nBundle {\n\tpackageName: string;\n\n\tconstructor(packageName: string) {\n\t\tthis.packageName = packageName;\n\t}\n\n\t/**\n\t * Returns a text in the currently loaded language\n\t *\n\t * @public\n\t * @param textObj key/defaultText pair or just the key\n\t * @param params Values for the placeholders\n\t */\n\tgetText(textObj: I18nText | string, ...params: Array<number | string>): string {\n\t\tif (typeof textObj === \"string\") {\n\t\t\ttextObj = { key: textObj, defaultText: textObj };\n\t\t}\n\n\t\tif (!textObj || !textObj.key) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tconst bundle = getI18nBundleData(this.packageName);\n\t\tif (bundle && !bundle[textObj.key]) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.warn(`Key ${textObj.key} not found in the i18n bundle, the default text will be used`);\n\t\t}\n\t\tconst messageText = bundle && bundle[textObj.key] ? bundle[textObj.key] : (textObj.defaultText || textObj.key);\n\n\t\treturn formatMessage(messageText, params);\n\t}\n}\n\n/**\n * Returns the I18nBundle instance for the given package synchronously.\n *\n * @public\n * @param packageName\n */\nconst getI18nBundleSync = (packageName: string): I18nBundle => {\n\tif (I18nBundleInstances.has(packageName)) {\n\t\treturn I18nBundleInstances.get(packageName)!;\n\t}\n\n\tconst i18nBundle = new I18nBundle(packageName);\n\tI18nBundleInstances.set(packageName, i18nBundle);\n\treturn i18nBundle;\n};\n\n/**\n * Fetches and returns the I18nBundle instance for the given package.\n *\n * @public\n * @param packageName\n */\nconst getI18nBundle = async (packageName: string): Promise<I18nBundle> => {\n\tif (customGetI18nBundle) {\n\t\treturn customGetI18nBundle(packageName);\n\t}\n\n\tawait fetchI18nBundle(packageName);\n\treturn getI18nBundleSync(packageName);\n};\n\n/**\n * Allows developers to provide a custom getI18nBundle implementation\n * If this function is called, the custom implementation will be used for all components and will completely\n * replace the default implementation.\n *\n * @public\n * @param customGet the function to use instead of the standard getI18nBundle implementation\n */\nconst registerCustomI18nBundleGetter = (customGet: I18nBundleGetter): void => {\n\tcustomGetI18nBundle = customGet;\n};\n\nexport default I18nBundle;\n\nexport {\n\tregisterI18nLoader,\n\tgetI18nBundle,\n\tregisterCustomI18nBundleGetter,\n};\n\nexport type {\n\tI18nText,\n};\n"],"mappings":";;AAAA,SAASA,kBAAA,IAAAC,CAAA,EAAoBC,eAAA,IAAAC,CAAA,EAAiBC,iBAAA,IAAAC,CAAA,QAAyB;AACvE,OAAOC,CAAA,MAAmB;AAE1B,MAAMC,CAAA,GAAsB,IAAIC,GAAA;AAEhC,IAAIC,CAAA;AAaJ,MAAMC,CAAW;EAGhBC,YAAYC,CAAA,EAAqB;IAChC,KAAKC,WAAA,GAAcD,CACpB;EAAA;EASAE,QAAQF,CAAA,EAAuE;IAK9E,IAJI,OAAOA,CAAA,IAAY,aACtBA,CAAA,GAAU;MAAEG,GAAA,EAAKH,CAAA;MAASI,WAAA,EAAaJ;IAAQ,IAG5C,CAACA,CAAA,IAAW,CAACA,CAAA,CAAQG,GAAA,EACxB,OAAO;IAGR,MAAME,CAAA,GAASZ,CAAA,CAAkB,KAAKQ,WAAW;IAC7CI,CAAA,IAAU,CAACA,CAAA,CAAOL,CAAA,CAAQG,GAAG,KAEhCG,OAAA,CAAQC,IAAA,CAAK,OAAOP,CAAA,CAAQG,GAAG,8DAA8D;IAE9F,MAAMK,CAAA,GAAcH,CAAA,IAAUA,CAAA,CAAOL,CAAA,CAAQG,GAAG,IAAIE,CAAA,CAAOL,CAAA,CAAQG,GAAG,IAAKH,CAAA,CAAQI,WAAA,IAAeJ,CAAA,CAAQG,GAAA;IAE1G,SAAAM,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAhBsCC,CAAA,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAAF,CAAA,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;IAAA;IAgBtC,OAAOpB,CAAA,CAAcc,CAAA,EAAaI,CAAM,CACzC;EAAA;AACD;AAQA,MAAMG,CAAA,GAAqBC,CAAA,IAAoC;IAC9D,IAAIrB,CAAA,CAAoBsB,GAAA,CAAID,CAAW,GACtC,OAAOrB,CAAA,CAAoBuB,GAAA,CAAIF,CAAW;IAG3C,MAAMhB,CAAA,GAAa,IAAIF,CAAA,CAAWkB,CAAW;IAC7C,OAAArB,CAAA,CAAoBwB,GAAA,CAAIH,CAAA,EAAahB,CAAU,GACxCA,CACR;EAAA;EAQMoB,CAAA,GAAgB,MAAOJ,CAAA,IACxBnB,CAAA,GACIA,CAAA,CAAoBmB,CAAW,KAGvC,MAAMzB,CAAA,CAAgByB,CAAW,GAC1BD,CAAA,CAAkBC,CAAW;EAW/BK,CAAA,GAAkCL,CAAA,IAAsC;IAC7EnB,CAAA,GAAsBmB,CACvB;EAAA;AAEA,eAAelB,CAAA;AAEf,SACCT,CAAA,IAAAD,kBAAA,EACAgC,CAAA,IAAAE,aAAA,EACAD,CAAA,IAAAE,8BAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}