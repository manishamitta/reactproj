{"ast":null,"code":"import { enrichEventWithDetails } from '@ui5/webcomponents-react-base';\nimport { AnalyticalTableSelectionBehavior, AnalyticalTableSelectionMode } from '../../../enums/index.js';\nimport { getTagNameWithoutScopingSuffix } from '../../../internal/utils.js';\nconst getRowProps = (rowProps, _ref) => {\n  let {\n    row,\n    instance\n  } = _ref;\n  const {\n    webComponentsReactProperties,\n    toggleRowSelected,\n    selectedFlatRows,\n    dispatch\n  } = instance;\n  const handleRowSelect = e => {\n    const isSelectionCell = e.target.dataset.selectionCell === 'true';\n    if (e.target?.dataset?.name !== 'internal_selection_column' && !(e.markerAllowTableRowSelection === true || e.nativeEvent?.markerAllowTableRowSelection === true) && webComponentsReactProperties.tagNamesWhichShouldNotSelectARow.has(getTagNameWithoutScopingSuffix(e.target.tagName))) {\n      return;\n    }\n\n    // don't select grouped rows\n    if (row.isGrouped) {\n      return;\n    }\n    const {\n      selectionBehavior,\n      selectionMode,\n      onRowSelect,\n      onRowClick\n    } = webComponentsReactProperties;\n    if (typeof onRowClick === 'function' && e.target?.dataset?.name !== 'internal_selection_column') {\n      onRowClick(enrichEventWithDetails(e, {\n        row\n      }));\n    }\n    if (selectionMode === AnalyticalTableSelectionMode.None) {\n      return;\n    }\n\n    // don't continue if the row was clicked and selection mode is row selector only\n    if (selectionBehavior === AnalyticalTableSelectionBehavior.RowSelector && !isSelectionCell) {\n      return;\n    }\n\n    // deselect other rows\n    if (selectionMode === AnalyticalTableSelectionMode.Single) {\n      for (const selectedRow of selectedFlatRows) {\n        if (selectedRow.id !== row.id) {\n          toggleRowSelected(selectedRow.id, false);\n        }\n      }\n    }\n    toggleRowSelected(row.id);\n    if (typeof onRowSelect === 'function') {\n      // update state to return instance values after update (see useSelectionChangeCallback hook)\n      dispatch({\n        type: 'SELECT_ROW_CB',\n        payload: {\n          event: e,\n          row,\n          fired: true\n        }\n      });\n    }\n  };\n  const handleKeyDown = e => {\n    if ((!e.target.hasAttribute('aria-expanded') || e.shiftKey && e.code === 'Space') && e.code === 'Enter') {\n      if (!webComponentsReactProperties.tagNamesWhichShouldNotSelectARow.has(getTagNameWithoutScopingSuffix(e.target.tagName))) {\n        e.preventDefault();\n      }\n      handleRowSelect(e);\n    }\n    if (e.code === 'Space') {\n      e.preventDefault();\n    }\n  };\n  const handleKeyUp = e => {\n    if (!e.target.hasAttribute('aria-expanded') && !e.shiftKey && e.code === 'Space') {\n      if (!webComponentsReactProperties.tagNamesWhichShouldNotSelectARow.has(getTagNameWithoutScopingSuffix(e.target.tagName))) {\n        e.preventDefault();\n      }\n      handleRowSelect(e);\n    }\n  };\n  return [rowProps, {\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleRowSelect\n  }];\n};\nexport const useSingleRowStateSelection = hooks => {\n  hooks.getRowProps.push(getRowProps);\n};\nuseSingleRowStateSelection.pluginName = 'useSingleRowStateSelection';","map":{"version":3,"names":["enrichEventWithDetails","AnalyticalTableSelectionBehavior","AnalyticalTableSelectionMode","getTagNameWithoutScopingSuffix","getRowProps","rowProps","_ref","row","instance","webComponentsReactProperties","toggleRowSelected","selectedFlatRows","dispatch","handleRowSelect","e","isSelectionCell","target","dataset","selectionCell","name","markerAllowTableRowSelection","nativeEvent","tagNamesWhichShouldNotSelectARow","has","tagName","isGrouped","selectionBehavior","selectionMode","onRowSelect","onRowClick","None","RowSelector","Single","selectedRow","id","type","payload","event","fired","handleKeyDown","hasAttribute","shiftKey","code","preventDefault","handleKeyUp","onKeyDown","onKeyUp","onClick","useSingleRowStateSelection","hooks","push","pluginName"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-react/dist/components/AnalyticalTable/hooks/useSingleRowStateSelection.js"],"sourcesContent":["import { enrichEventWithDetails } from '@ui5/webcomponents-react-base';\nimport { AnalyticalTableSelectionBehavior, AnalyticalTableSelectionMode } from '../../../enums/index.js';\nimport { getTagNameWithoutScopingSuffix } from '../../../internal/utils.js';\nconst getRowProps = (rowProps, {\n  row,\n  instance\n}) => {\n  const {\n    webComponentsReactProperties,\n    toggleRowSelected,\n    selectedFlatRows,\n    dispatch\n  } = instance;\n  const handleRowSelect = e => {\n    const isSelectionCell = e.target.dataset.selectionCell === 'true';\n    if (e.target?.dataset?.name !== 'internal_selection_column' && !(e.markerAllowTableRowSelection === true || e.nativeEvent?.markerAllowTableRowSelection === true) && webComponentsReactProperties.tagNamesWhichShouldNotSelectARow.has(getTagNameWithoutScopingSuffix(e.target.tagName))) {\n      return;\n    }\n\n    // don't select grouped rows\n    if (row.isGrouped) {\n      return;\n    }\n    const {\n      selectionBehavior,\n      selectionMode,\n      onRowSelect,\n      onRowClick\n    } = webComponentsReactProperties;\n    if (typeof onRowClick === 'function' && e.target?.dataset?.name !== 'internal_selection_column') {\n      onRowClick(enrichEventWithDetails(e, {\n        row\n      }));\n    }\n    if (selectionMode === AnalyticalTableSelectionMode.None) {\n      return;\n    }\n\n    // don't continue if the row was clicked and selection mode is row selector only\n    if (selectionBehavior === AnalyticalTableSelectionBehavior.RowSelector && !isSelectionCell) {\n      return;\n    }\n\n    // deselect other rows\n    if (selectionMode === AnalyticalTableSelectionMode.Single) {\n      for (const selectedRow of selectedFlatRows) {\n        if (selectedRow.id !== row.id) {\n          toggleRowSelected(selectedRow.id, false);\n        }\n      }\n    }\n    toggleRowSelected(row.id);\n    if (typeof onRowSelect === 'function') {\n      // update state to return instance values after update (see useSelectionChangeCallback hook)\n      dispatch({\n        type: 'SELECT_ROW_CB',\n        payload: {\n          event: e,\n          row,\n          fired: true\n        }\n      });\n    }\n  };\n  const handleKeyDown = e => {\n    if ((!e.target.hasAttribute('aria-expanded') || e.shiftKey && e.code === 'Space') && e.code === 'Enter') {\n      if (!webComponentsReactProperties.tagNamesWhichShouldNotSelectARow.has(getTagNameWithoutScopingSuffix(e.target.tagName))) {\n        e.preventDefault();\n      }\n      handleRowSelect(e);\n    }\n    if (e.code === 'Space') {\n      e.preventDefault();\n    }\n  };\n  const handleKeyUp = e => {\n    if (!e.target.hasAttribute('aria-expanded') && !e.shiftKey && e.code === 'Space') {\n      if (!webComponentsReactProperties.tagNamesWhichShouldNotSelectARow.has(getTagNameWithoutScopingSuffix(e.target.tagName))) {\n        e.preventDefault();\n      }\n      handleRowSelect(e);\n    }\n  };\n  return [rowProps, {\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleRowSelect\n  }];\n};\nexport const useSingleRowStateSelection = hooks => {\n  hooks.getRowProps.push(getRowProps);\n};\nuseSingleRowStateSelection.pluginName = 'useSingleRowStateSelection';"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}