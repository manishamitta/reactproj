{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { styled } from '@mui/material/styles';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { useGridSelector } from \"../../utils/index.js\";\nimport { useGridRootProps } from \"../../utils/useGridRootProps.js\";\nimport { useGridPrivateApiContext } from \"../../utils/useGridPrivateApiContext.js\";\nimport { useGridApiEventHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { GridColumnHeaderItem } from \"../../../components/columnHeaders/GridColumnHeaderItem.js\";\nimport { gridDimensionsSelector } from \"../dimensions/index.js\";\nimport { gridRenderContextColumnsSelector, gridVirtualizationColumnEnabledSelector } from \"../virtualization/index.js\";\nimport { computeOffsetLeft } from \"../virtualization/useGridVirtualScroller.js\";\nimport { GridColumnGroupHeader } from \"../../../components/columnHeaders/GridColumnGroupHeader.js\";\nimport { GridPinnedColumnPosition, gridColumnPositionsSelector, gridVisiblePinnedColumnDefinitionsSelector, gridColumnLookupSelector } from \"../columns/index.js\";\nimport { gridColumnGroupsUnwrappedModelSelector } from \"../columnGrouping/gridColumnGroupsSelector.js\";\nimport { GridScrollbarFillerCell as ScrollbarFiller } from \"../../../components/GridScrollbarFillerCell.js\";\nimport { getPinnedCellOffset } from \"../../../internals/utils/getPinnedCellOffset.js\";\nimport { GridColumnHeaderSeparatorSides } from \"../../../components/columnHeaders/GridColumnHeaderSeparator.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const GridColumnHeaderRow = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderRow',\n  overridesResolver: (_, styles) => styles.columnHeaderRow\n})({\n  display: 'flex'\n});\nexport const useGridColumnHeaders = props => {\n  const {\n    visibleColumns,\n    sortColumnLookup,\n    filterColumnLookup,\n    columnHeaderTabIndexState,\n    columnGroupHeaderTabIndexState,\n    columnHeaderFocus,\n    columnGroupHeaderFocus,\n    headerGroupingMaxDepth,\n    columnMenuState,\n    columnVisibility,\n    columnGroupsHeaderStructure,\n    hasOtherElementInTabSequence\n  } = props;\n  const [dragCol, setDragCol] = React.useState('');\n  const [resizeCol, setResizeCol] = React.useState('');\n  const apiRef = useGridPrivateApiContext();\n  const isRtl = useRtl();\n  const rootProps = useGridRootProps();\n  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);\n  const hasVirtualization = useGridSelector(apiRef, gridVirtualizationColumnEnabledSelector);\n  const columnGroupsModel = useGridSelector(apiRef, gridColumnGroupsUnwrappedModelSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const renderContext = useGridSelector(apiRef, gridRenderContextColumnsSelector);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const columnsLookup = useGridSelector(apiRef, gridColumnLookupSelector);\n  const offsetLeft = computeOffsetLeft(columnPositions, renderContext, pinnedColumns.left.length);\n  const gridHasFiller = dimensions.columnsTotalWidth < dimensions.viewportOuterSize.width;\n  React.useEffect(() => {\n    apiRef.current.columnHeadersContainerRef.current.scrollLeft = 0;\n  }, [apiRef]);\n  const handleColumnResizeStart = React.useCallback(params => setResizeCol(params.field), []);\n  const handleColumnResizeStop = React.useCallback(() => setResizeCol(''), []);\n  const handleColumnReorderStart = React.useCallback(params => setDragCol(params.field), []);\n  const handleColumnReorderStop = React.useCallback(() => setDragCol(''), []);\n  const leftRenderContext = React.useMemo(() => {\n    return pinnedColumns.left.length ? {\n      firstColumnIndex: 0,\n      lastColumnIndex: pinnedColumns.left.length\n    } : null;\n  }, [pinnedColumns.left.length]);\n  const rightRenderContext = React.useMemo(() => {\n    return pinnedColumns.right.length ? {\n      firstColumnIndex: visibleColumns.length - pinnedColumns.right.length,\n      lastColumnIndex: visibleColumns.length\n    } : null;\n  }, [pinnedColumns.right.length, visibleColumns.length]);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleColumnReorderStop);\n\n  // Helper for computation common between getColumnHeaders and getColumnGroupHeaders\n  const getColumnsToRender = params => {\n    const {\n      renderContext: currentContext = renderContext,\n      maxLastColumn = visibleColumns.length\n    } = params || {};\n    const firstColumnToRender = currentContext.firstColumnIndex;\n    const lastColumnToRender = !hasVirtualization ? maxLastColumn : currentContext.lastColumnIndex;\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    return {\n      renderedColumns,\n      firstColumnToRender,\n      lastColumnToRender\n    };\n  };\n  const getFillers = function (params, children, leftOverflow) {\n    let borderBottom = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const isPinnedRight = params?.position === GridPinnedColumnPosition.RIGHT;\n    const isNotPinned = params?.position === undefined;\n    const hasScrollbarFiller = pinnedColumns.right.length > 0 && isPinnedRight || pinnedColumns.right.length === 0 && isNotPinned;\n    const leftOffsetWidth = offsetLeft - leftOverflow;\n    return /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        style: {\n          width: leftOffsetWidth\n        }\n      }), children, isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        className: clsx(gridClasses.filler, borderBottom && gridClasses['filler--borderBottom'])\n      }), hasScrollbarFiller && /*#__PURE__*/_jsx(ScrollbarFiller, {\n        header: true,\n        pinnedRight: isPinnedRight,\n        borderBottom: borderBottom,\n        borderTop: false\n      })]\n    });\n  };\n  const getCellOffsetStyle = _ref => {\n    let {\n      pinnedPosition,\n      columnIndex,\n      computedWidth\n    } = _ref;\n    let style;\n    const isLeftPinned = pinnedPosition === GridPinnedColumnPosition.LEFT;\n    const isRightPinned = pinnedPosition === GridPinnedColumnPosition.RIGHT;\n    if (isLeftPinned || isRightPinned) {\n      const pinnedOffset = getPinnedCellOffset(pinnedPosition, computedWidth, columnIndex, columnPositions, dimensions);\n      let side = isLeftPinned ? 'left' : 'right';\n      if (isRtl) {\n        side = isLeftPinned ? 'right' : 'left';\n      }\n      if (pinnedPosition === 'left') {\n        style = {\n          [side]: pinnedOffset\n        };\n      }\n      if (pinnedPosition === 'right') {\n        style = {\n          [side]: pinnedOffset\n        };\n      }\n    }\n    return style;\n  };\n  const getColumnHeaders = function (params) {\n    let other = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      renderedColumns,\n      firstColumnToRender\n    } = getColumnsToRender(params);\n    const columns = [];\n    for (let i = 0; i < renderedColumns.length; i += 1) {\n      const colDef = renderedColumns[i];\n      const columnIndex = firstColumnToRender + i;\n      const isFirstColumn = columnIndex === 0;\n      const tabIndex = columnHeaderTabIndexState !== null && columnHeaderTabIndexState.field === colDef.field || isFirstColumn && !hasOtherElementInTabSequence ? 0 : -1;\n      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === colDef.field;\n      const open = columnMenuState.open && columnMenuState.field === colDef.field;\n      const pinnedPosition = params?.position;\n      const style = getCellOffsetStyle({\n        pinnedPosition,\n        columnIndex,\n        computedWidth: colDef.computedWidth\n      });\n      const siblingWithBorderingSeparator = pinnedPosition === GridPinnedColumnPosition.RIGHT ? renderedColumns[i - 1] : renderedColumns[i + 1];\n      const isSiblingFocused = siblingWithBorderingSeparator ? columnHeaderFocus !== null && columnHeaderFocus.field === siblingWithBorderingSeparator.field : false;\n      const isLastUnpinned = columnIndex + 1 === columnPositions.length - pinnedColumns.right.length;\n      columns.push(/*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[colDef.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[colDef.field] && filterColumnLookup[colDef.field].length,\n        headerHeight: dimensions.headerHeight,\n        isDragging: colDef.field === dragCol,\n        colDef: colDef,\n        colIndex: columnIndex,\n        isResizing: resizeCol === colDef.field,\n        isLast: columnIndex === columnPositions.length - 1,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        style: style,\n        indexInSection: i,\n        sectionLength: renderedColumns.length,\n        gridHasFiller: gridHasFiller,\n        isLastUnpinned: isLastUnpinned,\n        isSiblingFocused: isSiblingFocused\n      }, other), colDef.field));\n    }\n    return getFillers(params, columns, 0);\n  };\n  const getColumnHeadersRow = () => {\n    return /*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n      role: \"row\",\n      \"aria-rowindex\": headerGroupingMaxDepth + 1,\n      ownerState: rootProps,\n      className: gridClasses['row--borderBottom'],\n      children: [leftRenderContext && getColumnHeaders({\n        position: GridPinnedColumnPosition.LEFT,\n        renderContext: leftRenderContext,\n        maxLastColumn: leftRenderContext.lastColumnIndex\n      }, {\n        disableReorder: true\n      }), getColumnHeaders({\n        renderContext,\n        maxLastColumn: visibleColumns.length - pinnedColumns.right.length\n      }), rightRenderContext && getColumnHeaders({\n        position: GridPinnedColumnPosition.RIGHT,\n        renderContext: rightRenderContext,\n        maxLastColumn: rightRenderContext.lastColumnIndex\n      }, {\n        disableReorder: true,\n        separatorSide: GridColumnHeaderSeparatorSides.Left\n      })]\n    });\n  };\n  const getColumnGroupHeaders = _ref2 => {\n    let {\n      depth,\n      params\n    } = _ref2;\n    const columnsToRender = getColumnsToRender(params);\n    if (columnsToRender.renderedColumns.length === 0) {\n      return null;\n    }\n    const {\n      renderedColumns,\n      firstColumnToRender,\n      lastColumnToRender\n    } = columnsToRender;\n    const rowStructure = columnGroupsHeaderStructure[depth];\n    const firstColumnFieldToRender = visibleColumns[firstColumnToRender].field;\n    const firstGroupToRender = columnGroupsModel[firstColumnFieldToRender]?.[depth] ?? null;\n    const firstGroupIndex = rowStructure.findIndex(_ref3 => {\n      let {\n        groupId,\n        columnFields\n      } = _ref3;\n      return groupId === firstGroupToRender && columnFields.includes(firstColumnFieldToRender);\n    });\n    const lastColumnFieldToRender = visibleColumns[lastColumnToRender - 1].field;\n    const lastGroupToRender = columnGroupsModel[lastColumnFieldToRender]?.[depth] ?? null;\n    const lastGroupIndex = rowStructure.findIndex(_ref4 => {\n      let {\n        groupId,\n        columnFields\n      } = _ref4;\n      return groupId === lastGroupToRender && columnFields.includes(lastColumnFieldToRender);\n    });\n    const visibleColumnGroupHeader = rowStructure.slice(firstGroupIndex, lastGroupIndex + 1).map(groupStructure => {\n      return _extends({}, groupStructure, {\n        columnFields: groupStructure.columnFields.filter(field => columnVisibility[field] !== false)\n      });\n    }).filter(groupStructure => groupStructure.columnFields.length > 0);\n    const firstVisibleColumnIndex = visibleColumnGroupHeader[0].columnFields.indexOf(firstColumnFieldToRender);\n    const hiddenGroupColumns = visibleColumnGroupHeader[0].columnFields.slice(0, firstVisibleColumnIndex);\n    const leftOverflow = hiddenGroupColumns.reduce((acc, field) => {\n      const column = columnsLookup[field];\n      return acc + (column.computedWidth ?? 0);\n    }, 0);\n    let columnIndex = firstColumnToRender;\n    const children = visibleColumnGroupHeader.map((_ref5, index) => {\n      let {\n        groupId,\n        columnFields\n      } = _ref5;\n      const hasFocus = columnGroupHeaderFocus !== null && columnGroupHeaderFocus.depth === depth && columnFields.includes(columnGroupHeaderFocus.field);\n      const tabIndex = columnGroupHeaderTabIndexState !== null && columnGroupHeaderTabIndexState.depth === depth && columnFields.includes(columnGroupHeaderTabIndexState.field) ? 0 : -1;\n      const headerInfo = {\n        groupId,\n        width: columnFields.reduce((acc, field) => acc + columnsLookup[field].computedWidth, 0),\n        fields: columnFields,\n        colIndex: columnIndex,\n        hasFocus,\n        tabIndex\n      };\n      const pinnedPosition = params.position;\n      const style = getCellOffsetStyle({\n        pinnedPosition,\n        columnIndex,\n        computedWidth: headerInfo.width\n      });\n      columnIndex += columnFields.length;\n      let indexInSection = index;\n      if (pinnedPosition === 'left') {\n        // Group headers can expand to multiple columns, we need to adjust the index\n        indexInSection = columnIndex - 1;\n      }\n      return /*#__PURE__*/_jsx(GridColumnGroupHeader, {\n        groupId: groupId,\n        width: headerInfo.width,\n        fields: headerInfo.fields,\n        colIndex: headerInfo.colIndex,\n        depth: depth,\n        isLastColumn: headerInfo.colIndex === visibleColumns.length - headerInfo.fields.length,\n        maxDepth: headerGroupingMaxDepth,\n        height: dimensions.groupHeaderHeight,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        style: style,\n        indexInSection: indexInSection,\n        sectionLength: renderedColumns.length,\n        gridHasFiller: gridHasFiller\n      }, index);\n    });\n    return getFillers(params, children, leftOverflow);\n  };\n  const getColumnGroupHeadersRows = () => {\n    if (headerGroupingMaxDepth === 0) {\n      return null;\n    }\n    const headerRows = [];\n    for (let depth = 0; depth < headerGroupingMaxDepth; depth += 1) {\n      headerRows.push(/*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n        role: \"row\",\n        \"aria-rowindex\": depth + 1,\n        ownerState: rootProps,\n        children: [leftRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: GridPinnedColumnPosition.LEFT,\n            renderContext: leftRenderContext,\n            maxLastColumn: leftRenderContext.lastColumnIndex\n          }\n        }), getColumnGroupHeaders({\n          depth,\n          params: {\n            renderContext\n          }\n        }), rightRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: GridPinnedColumnPosition.RIGHT,\n            renderContext: rightRenderContext,\n            maxLastColumn: rightRenderContext.lastColumnIndex\n          }\n        })]\n      }, depth));\n    }\n    return headerRows;\n  };\n  return {\n    renderContext,\n    leftRenderContext,\n    rightRenderContext,\n    pinnedColumns,\n    visibleColumns,\n    getCellOffsetStyle,\n    getFillers,\n    getColumnHeadersRow,\n    getColumnsToRender,\n    getColumnGroupHeadersRows,\n    isDragging: !!dragCol,\n    getInnerProps: () => ({\n      role: 'rowgroup'\n    })\n  };\n};","map":{"version":3,"names":["_extends","React","clsx","styled","useRtl","useGridSelector","useGridRootProps","useGridPrivateApiContext","useGridApiEventHandler","GridColumnHeaderItem","gridDimensionsSelector","gridRenderContextColumnsSelector","gridVirtualizationColumnEnabledSelector","computeOffsetLeft","GridColumnGroupHeader","GridPinnedColumnPosition","gridColumnPositionsSelector","gridVisiblePinnedColumnDefinitionsSelector","gridColumnLookupSelector","gridColumnGroupsUnwrappedModelSelector","GridScrollbarFillerCell","ScrollbarFiller","getPinnedCellOffset","GridColumnHeaderSeparatorSides","gridClasses","jsx","_jsx","jsxs","_jsxs","GridColumnHeaderRow","name","slot","overridesResolver","_","styles","columnHeaderRow","display","useGridColumnHeaders","props","visibleColumns","sortColumnLookup","filterColumnLookup","columnHeaderTabIndexState","columnGroupHeaderTabIndexState","columnHeaderFocus","columnGroupHeaderFocus","headerGroupingMaxDepth","columnMenuState","columnVisibility","columnGroupsHeaderStructure","hasOtherElementInTabSequence","dragCol","setDragCol","useState","resizeCol","setResizeCol","apiRef","isRtl","rootProps","dimensions","hasVirtualization","columnGroupsModel","columnPositions","renderContext","pinnedColumns","columnsLookup","offsetLeft","left","length","gridHasFiller","columnsTotalWidth","viewportOuterSize","width","useEffect","current","columnHeadersContainerRef","scrollLeft","handleColumnResizeStart","useCallback","params","field","handleColumnResizeStop","handleColumnReorderStart","handleColumnReorderStop","leftRenderContext","useMemo","firstColumnIndex","lastColumnIndex","rightRenderContext","right","getColumnsToRender","currentContext","maxLastColumn","firstColumnToRender","lastColumnToRender","renderedColumns","slice","getFillers","children","leftOverflow","borderBottom","arguments","undefined","isPinnedRight","position","RIGHT","isNotPinned","hasScrollbarFiller","leftOffsetWidth","Fragment","role","style","className","filler","header","pinnedRight","borderTop","getCellOffsetStyle","_ref","pinnedPosition","columnIndex","computedWidth","isLeftPinned","LEFT","isRightPinned","pinnedOffset","side","getColumnHeaders","other","columns","i","colDef","isFirstColumn","tabIndex","hasFocus","open","siblingWithBorderingSeparator","isSiblingFocused","isLastUnpinned","push","columnMenuOpen","filterItemsCounter","headerHeight","isDragging","colIndex","isResizing","isLast","indexInSection","sectionLength","getColumnHeadersRow","ownerState","disableReorder","separatorSide","Left","getColumnGroupHeaders","_ref2","depth","columnsToRender","rowStructure","firstColumnFieldToRender","firstGroupToRender","firstGroupIndex","findIndex","_ref3","groupId","columnFields","includes","lastColumnFieldToRender","lastGroupToRender","lastGroupIndex","_ref4","visibleColumnGroupHeader","map","groupStructure","filter","firstVisibleColumnIndex","indexOf","hiddenGroupColumns","reduce","acc","column","_ref5","index","headerInfo","fields","isLastColumn","maxDepth","height","groupHeaderHeight","getColumnGroupHeadersRows","headerRows","getInnerProps"],"sources":["/home/user/projects/reactproj/reactmodule/node_modules/@mui/x-data-grid/hooks/features/columnHeaders/useGridColumnHeaders.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { styled } from '@mui/material/styles';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { useGridSelector } from \"../../utils/index.js\";\nimport { useGridRootProps } from \"../../utils/useGridRootProps.js\";\nimport { useGridPrivateApiContext } from \"../../utils/useGridPrivateApiContext.js\";\nimport { useGridApiEventHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { GridColumnHeaderItem } from \"../../../components/columnHeaders/GridColumnHeaderItem.js\";\nimport { gridDimensionsSelector } from \"../dimensions/index.js\";\nimport { gridRenderContextColumnsSelector, gridVirtualizationColumnEnabledSelector } from \"../virtualization/index.js\";\nimport { computeOffsetLeft } from \"../virtualization/useGridVirtualScroller.js\";\nimport { GridColumnGroupHeader } from \"../../../components/columnHeaders/GridColumnGroupHeader.js\";\nimport { GridPinnedColumnPosition, gridColumnPositionsSelector, gridVisiblePinnedColumnDefinitionsSelector, gridColumnLookupSelector } from \"../columns/index.js\";\nimport { gridColumnGroupsUnwrappedModelSelector } from \"../columnGrouping/gridColumnGroupsSelector.js\";\nimport { GridScrollbarFillerCell as ScrollbarFiller } from \"../../../components/GridScrollbarFillerCell.js\";\nimport { getPinnedCellOffset } from \"../../../internals/utils/getPinnedCellOffset.js\";\nimport { GridColumnHeaderSeparatorSides } from \"../../../components/columnHeaders/GridColumnHeaderSeparator.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const GridColumnHeaderRow = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderRow',\n  overridesResolver: (_, styles) => styles.columnHeaderRow\n})({\n  display: 'flex'\n});\nexport const useGridColumnHeaders = props => {\n  const {\n    visibleColumns,\n    sortColumnLookup,\n    filterColumnLookup,\n    columnHeaderTabIndexState,\n    columnGroupHeaderTabIndexState,\n    columnHeaderFocus,\n    columnGroupHeaderFocus,\n    headerGroupingMaxDepth,\n    columnMenuState,\n    columnVisibility,\n    columnGroupsHeaderStructure,\n    hasOtherElementInTabSequence\n  } = props;\n  const [dragCol, setDragCol] = React.useState('');\n  const [resizeCol, setResizeCol] = React.useState('');\n  const apiRef = useGridPrivateApiContext();\n  const isRtl = useRtl();\n  const rootProps = useGridRootProps();\n  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);\n  const hasVirtualization = useGridSelector(apiRef, gridVirtualizationColumnEnabledSelector);\n  const columnGroupsModel = useGridSelector(apiRef, gridColumnGroupsUnwrappedModelSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const renderContext = useGridSelector(apiRef, gridRenderContextColumnsSelector);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const columnsLookup = useGridSelector(apiRef, gridColumnLookupSelector);\n  const offsetLeft = computeOffsetLeft(columnPositions, renderContext, pinnedColumns.left.length);\n  const gridHasFiller = dimensions.columnsTotalWidth < dimensions.viewportOuterSize.width;\n  React.useEffect(() => {\n    apiRef.current.columnHeadersContainerRef.current.scrollLeft = 0;\n  }, [apiRef]);\n  const handleColumnResizeStart = React.useCallback(params => setResizeCol(params.field), []);\n  const handleColumnResizeStop = React.useCallback(() => setResizeCol(''), []);\n  const handleColumnReorderStart = React.useCallback(params => setDragCol(params.field), []);\n  const handleColumnReorderStop = React.useCallback(() => setDragCol(''), []);\n  const leftRenderContext = React.useMemo(() => {\n    return pinnedColumns.left.length ? {\n      firstColumnIndex: 0,\n      lastColumnIndex: pinnedColumns.left.length\n    } : null;\n  }, [pinnedColumns.left.length]);\n  const rightRenderContext = React.useMemo(() => {\n    return pinnedColumns.right.length ? {\n      firstColumnIndex: visibleColumns.length - pinnedColumns.right.length,\n      lastColumnIndex: visibleColumns.length\n    } : null;\n  }, [pinnedColumns.right.length, visibleColumns.length]);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleColumnReorderStop);\n\n  // Helper for computation common between getColumnHeaders and getColumnGroupHeaders\n  const getColumnsToRender = params => {\n    const {\n      renderContext: currentContext = renderContext,\n      maxLastColumn = visibleColumns.length\n    } = params || {};\n    const firstColumnToRender = currentContext.firstColumnIndex;\n    const lastColumnToRender = !hasVirtualization ? maxLastColumn : currentContext.lastColumnIndex;\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    return {\n      renderedColumns,\n      firstColumnToRender,\n      lastColumnToRender\n    };\n  };\n  const getFillers = (params, children, leftOverflow, borderBottom = false) => {\n    const isPinnedRight = params?.position === GridPinnedColumnPosition.RIGHT;\n    const isNotPinned = params?.position === undefined;\n    const hasScrollbarFiller = pinnedColumns.right.length > 0 && isPinnedRight || pinnedColumns.right.length === 0 && isNotPinned;\n    const leftOffsetWidth = offsetLeft - leftOverflow;\n    return /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        style: {\n          width: leftOffsetWidth\n        }\n      }), children, isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        className: clsx(gridClasses.filler, borderBottom && gridClasses['filler--borderBottom'])\n      }), hasScrollbarFiller && /*#__PURE__*/_jsx(ScrollbarFiller, {\n        header: true,\n        pinnedRight: isPinnedRight,\n        borderBottom: borderBottom,\n        borderTop: false\n      })]\n    });\n  };\n  const getCellOffsetStyle = ({\n    pinnedPosition,\n    columnIndex,\n    computedWidth\n  }) => {\n    let style;\n    const isLeftPinned = pinnedPosition === GridPinnedColumnPosition.LEFT;\n    const isRightPinned = pinnedPosition === GridPinnedColumnPosition.RIGHT;\n    if (isLeftPinned || isRightPinned) {\n      const pinnedOffset = getPinnedCellOffset(pinnedPosition, computedWidth, columnIndex, columnPositions, dimensions);\n      let side = isLeftPinned ? 'left' : 'right';\n      if (isRtl) {\n        side = isLeftPinned ? 'right' : 'left';\n      }\n      if (pinnedPosition === 'left') {\n        style = {\n          [side]: pinnedOffset\n        };\n      }\n      if (pinnedPosition === 'right') {\n        style = {\n          [side]: pinnedOffset\n        };\n      }\n    }\n    return style;\n  };\n  const getColumnHeaders = (params, other = {}) => {\n    const {\n      renderedColumns,\n      firstColumnToRender\n    } = getColumnsToRender(params);\n    const columns = [];\n    for (let i = 0; i < renderedColumns.length; i += 1) {\n      const colDef = renderedColumns[i];\n      const columnIndex = firstColumnToRender + i;\n      const isFirstColumn = columnIndex === 0;\n      const tabIndex = columnHeaderTabIndexState !== null && columnHeaderTabIndexState.field === colDef.field || isFirstColumn && !hasOtherElementInTabSequence ? 0 : -1;\n      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === colDef.field;\n      const open = columnMenuState.open && columnMenuState.field === colDef.field;\n      const pinnedPosition = params?.position;\n      const style = getCellOffsetStyle({\n        pinnedPosition,\n        columnIndex,\n        computedWidth: colDef.computedWidth\n      });\n      const siblingWithBorderingSeparator = pinnedPosition === GridPinnedColumnPosition.RIGHT ? renderedColumns[i - 1] : renderedColumns[i + 1];\n      const isSiblingFocused = siblingWithBorderingSeparator ? columnHeaderFocus !== null && columnHeaderFocus.field === siblingWithBorderingSeparator.field : false;\n      const isLastUnpinned = columnIndex + 1 === columnPositions.length - pinnedColumns.right.length;\n      columns.push(/*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[colDef.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[colDef.field] && filterColumnLookup[colDef.field].length,\n        headerHeight: dimensions.headerHeight,\n        isDragging: colDef.field === dragCol,\n        colDef: colDef,\n        colIndex: columnIndex,\n        isResizing: resizeCol === colDef.field,\n        isLast: columnIndex === columnPositions.length - 1,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        style: style,\n        indexInSection: i,\n        sectionLength: renderedColumns.length,\n        gridHasFiller: gridHasFiller,\n        isLastUnpinned: isLastUnpinned,\n        isSiblingFocused: isSiblingFocused\n      }, other), colDef.field));\n    }\n    return getFillers(params, columns, 0);\n  };\n  const getColumnHeadersRow = () => {\n    return /*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n      role: \"row\",\n      \"aria-rowindex\": headerGroupingMaxDepth + 1,\n      ownerState: rootProps,\n      className: gridClasses['row--borderBottom'],\n      children: [leftRenderContext && getColumnHeaders({\n        position: GridPinnedColumnPosition.LEFT,\n        renderContext: leftRenderContext,\n        maxLastColumn: leftRenderContext.lastColumnIndex\n      }, {\n        disableReorder: true\n      }), getColumnHeaders({\n        renderContext,\n        maxLastColumn: visibleColumns.length - pinnedColumns.right.length\n      }), rightRenderContext && getColumnHeaders({\n        position: GridPinnedColumnPosition.RIGHT,\n        renderContext: rightRenderContext,\n        maxLastColumn: rightRenderContext.lastColumnIndex\n      }, {\n        disableReorder: true,\n        separatorSide: GridColumnHeaderSeparatorSides.Left\n      })]\n    });\n  };\n  const getColumnGroupHeaders = ({\n    depth,\n    params\n  }) => {\n    const columnsToRender = getColumnsToRender(params);\n    if (columnsToRender.renderedColumns.length === 0) {\n      return null;\n    }\n    const {\n      renderedColumns,\n      firstColumnToRender,\n      lastColumnToRender\n    } = columnsToRender;\n    const rowStructure = columnGroupsHeaderStructure[depth];\n    const firstColumnFieldToRender = visibleColumns[firstColumnToRender].field;\n    const firstGroupToRender = columnGroupsModel[firstColumnFieldToRender]?.[depth] ?? null;\n    const firstGroupIndex = rowStructure.findIndex(({\n      groupId,\n      columnFields\n    }) => groupId === firstGroupToRender && columnFields.includes(firstColumnFieldToRender));\n    const lastColumnFieldToRender = visibleColumns[lastColumnToRender - 1].field;\n    const lastGroupToRender = columnGroupsModel[lastColumnFieldToRender]?.[depth] ?? null;\n    const lastGroupIndex = rowStructure.findIndex(({\n      groupId,\n      columnFields\n    }) => groupId === lastGroupToRender && columnFields.includes(lastColumnFieldToRender));\n    const visibleColumnGroupHeader = rowStructure.slice(firstGroupIndex, lastGroupIndex + 1).map(groupStructure => {\n      return _extends({}, groupStructure, {\n        columnFields: groupStructure.columnFields.filter(field => columnVisibility[field] !== false)\n      });\n    }).filter(groupStructure => groupStructure.columnFields.length > 0);\n    const firstVisibleColumnIndex = visibleColumnGroupHeader[0].columnFields.indexOf(firstColumnFieldToRender);\n    const hiddenGroupColumns = visibleColumnGroupHeader[0].columnFields.slice(0, firstVisibleColumnIndex);\n    const leftOverflow = hiddenGroupColumns.reduce((acc, field) => {\n      const column = columnsLookup[field];\n      return acc + (column.computedWidth ?? 0);\n    }, 0);\n    let columnIndex = firstColumnToRender;\n    const children = visibleColumnGroupHeader.map(({\n      groupId,\n      columnFields\n    }, index) => {\n      const hasFocus = columnGroupHeaderFocus !== null && columnGroupHeaderFocus.depth === depth && columnFields.includes(columnGroupHeaderFocus.field);\n      const tabIndex = columnGroupHeaderTabIndexState !== null && columnGroupHeaderTabIndexState.depth === depth && columnFields.includes(columnGroupHeaderTabIndexState.field) ? 0 : -1;\n      const headerInfo = {\n        groupId,\n        width: columnFields.reduce((acc, field) => acc + columnsLookup[field].computedWidth, 0),\n        fields: columnFields,\n        colIndex: columnIndex,\n        hasFocus,\n        tabIndex\n      };\n      const pinnedPosition = params.position;\n      const style = getCellOffsetStyle({\n        pinnedPosition,\n        columnIndex,\n        computedWidth: headerInfo.width\n      });\n      columnIndex += columnFields.length;\n      let indexInSection = index;\n      if (pinnedPosition === 'left') {\n        // Group headers can expand to multiple columns, we need to adjust the index\n        indexInSection = columnIndex - 1;\n      }\n      return /*#__PURE__*/_jsx(GridColumnGroupHeader, {\n        groupId: groupId,\n        width: headerInfo.width,\n        fields: headerInfo.fields,\n        colIndex: headerInfo.colIndex,\n        depth: depth,\n        isLastColumn: headerInfo.colIndex === visibleColumns.length - headerInfo.fields.length,\n        maxDepth: headerGroupingMaxDepth,\n        height: dimensions.groupHeaderHeight,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        style: style,\n        indexInSection: indexInSection,\n        sectionLength: renderedColumns.length,\n        gridHasFiller: gridHasFiller\n      }, index);\n    });\n    return getFillers(params, children, leftOverflow);\n  };\n  const getColumnGroupHeadersRows = () => {\n    if (headerGroupingMaxDepth === 0) {\n      return null;\n    }\n    const headerRows = [];\n    for (let depth = 0; depth < headerGroupingMaxDepth; depth += 1) {\n      headerRows.push(/*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n        role: \"row\",\n        \"aria-rowindex\": depth + 1,\n        ownerState: rootProps,\n        children: [leftRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: GridPinnedColumnPosition.LEFT,\n            renderContext: leftRenderContext,\n            maxLastColumn: leftRenderContext.lastColumnIndex\n          }\n        }), getColumnGroupHeaders({\n          depth,\n          params: {\n            renderContext\n          }\n        }), rightRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: GridPinnedColumnPosition.RIGHT,\n            renderContext: rightRenderContext,\n            maxLastColumn: rightRenderContext.lastColumnIndex\n          }\n        })]\n      }, depth));\n    }\n    return headerRows;\n  };\n  return {\n    renderContext,\n    leftRenderContext,\n    rightRenderContext,\n    pinnedColumns,\n    visibleColumns,\n    getCellOffsetStyle,\n    getFillers,\n    getColumnHeadersRow,\n    getColumnsToRender,\n    getColumnGroupHeadersRows,\n    isDragging: !!dragCol,\n    getInnerProps: () => ({\n      role: 'rowgroup'\n    })\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}