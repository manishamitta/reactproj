{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\nimport DragRegistry from \"@ui5/webcomponents-base/dist/util/dragAndDrop/DragRegistry.js\";\nimport findClosestPosition from \"@ui5/webcomponents-base/dist/util/dragAndDrop/findClosestPosition.js\";\nimport Orientation from \"@ui5/webcomponents-base/dist/types/Orientation.js\";\nimport MovePlacement from \"@ui5/webcomponents-base/dist/types/MovePlacement.js\";\nimport event from \"@ui5/webcomponents-base/dist/decorators/event.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport { getEffectiveAriaLabelText } from \"@ui5/webcomponents-base/dist/util/AriaLabelHelper.js\";\nimport DropIndicator from \"./DropIndicator.js\";\nimport TreeItem from \"./TreeItem.js\";\nimport TreeItemCustom from \"./TreeItemCustom.js\";\nimport TreeList from \"./TreeList.js\";\nimport ListAccessibleRole from \"./types/ListAccessibleRole.js\";\n// Template\nimport TreeTemplate from \"./generated/templates/TreeTemplate.lit.js\";\n// Styles\nimport TreeCss from \"./generated/themes/Tree.css.js\";\n/**\n * @class\n *\n * ### Overview\n * The `ui5-tree` component provides a tree structure for displaying data in a hierarchy.\n *\n * ### Usage\n *\n * #### When to use:\n *\n * - To display hierarchically structured items.\n * - To select one or more items out of a set of hierarchically structured items.\n *\n * #### When not to use:\n *\n * - To display items not hierarchically structured. In this case, use the List component.\n * - To select one item from a very small number of non-hierarchical items. Select or ComboBox might be more appropriate.\n * - The hierarchy turns out to have only two levels. In this case, use List with group items.\n *\n * ### Keyboard Handling\n *\n * The `ui5-tree` provides advanced keyboard handling.\n * The user can use the following keyboard shortcuts in order to navigate trough the tree:\n *\n * - [Up] or [Down] - Navigates up and down the tree items that are currently visible.\n * - [Right] - Drills down the tree by expanding the tree nodes.\n * - [Left] - Goes up the tree and collapses the tree nodes.\n *\n * The user can use the following keyboard shortcuts to perform selection,\n * when the `selectionMode` property is in use:\n *\n * - [Space] - Selects the currently focused item upon keyup.\n * - [Enter]  - Selects the currently focused item upon keydown.\n *\n * ### ES6 Module Import\n * `import \"@ui5/webcomponents/dist/Tree.js\";`\n *\n * `import \"@ui5/webcomponents/dist/TreeItem.js\";`\n * @constructor\n * @extends UI5Element\n * @public\n * @since 1.0.0-rc.8\n */\nlet Tree = class Tree extends UI5Element {\n  constructor() {\n    super(...arguments);\n    /**\n     * Defines the selection mode of the component. Since the tree uses a `ui5-list` to display its structure,\n     * the tree modes are exactly the same as the list modes, and are all applicable.\n     * @public\n     * @default \"None\"\n     */\n    this.selectionMode = \"None\";\n  }\n  onEnterDOM() {\n    DragRegistry.subscribe(this);\n  }\n  onExitDOM() {\n    DragRegistry.unsubscribe(this);\n  }\n  onBeforeRendering() {\n    this._prepareTreeItems();\n  }\n  onAfterRendering() {\n    // Note: this is a workaround for the problem that the list cannot invalidate itself when its only physical child is a slot (and the list items are inside the slot)\n    // This code should be removed once a framework-level fix is implemented\n    this.shadowRoot.querySelector(\"[ui5-tree-list]\").onBeforeRendering();\n  }\n  get dropIndicatorDOM() {\n    return this.shadowRoot.querySelector(\"[ui5-drop-indicator]\");\n  }\n  get list() {\n    return this.getDomRef();\n  }\n  get _role() {\n    return ListAccessibleRole.Tree;\n  }\n  get _label() {\n    return getEffectiveAriaLabelText(this);\n  }\n  get _hasHeader() {\n    return !!this.header.length;\n  }\n  _ondragenter(e) {\n    e.preventDefault();\n  }\n  _ondragleave(e) {\n    if (e.relatedTarget instanceof Node && this.shadowRoot.contains(e.relatedTarget)) {\n      return;\n    }\n    this.dropIndicatorDOM.targetReference = null;\n  }\n  _ondragover(e) {\n    const draggedElement = DragRegistry.getDraggedElement();\n    const allLiNodesTraversed = []; // use the only <li> nodes to determine positioning\n    if (!(e.target instanceof HTMLElement) || !draggedElement) {\n      return;\n    }\n    this.walk(item => {\n      allLiNodesTraversed.push(item.shadowRoot.querySelector(\"li\"));\n    });\n    const closestPosition = findClosestPosition(allLiNodesTraversed, e.clientY, Orientation.Vertical);\n    if (!closestPosition) {\n      this.dropIndicatorDOM.targetReference = null;\n      return;\n    }\n    let placements = closestPosition.placements;\n    closestPosition.element = closestPosition.element.getRootNode().host;\n    if (draggedElement.contains(closestPosition.element)) {\n      return;\n    }\n    if (closestPosition.element === draggedElement) {\n      placements = placements.filter(placement => placement !== MovePlacement.On);\n    }\n    const placementAccepted = placements.some(placement => {\n      const closestElement = closestPosition.element;\n      const beforeItemMovePrevented = !this.fireEvent(\"move-over\", {\n        source: {\n          element: draggedElement\n        },\n        destination: {\n          element: closestElement,\n          placement\n        }\n      }, true);\n      if (beforeItemMovePrevented) {\n        e.preventDefault();\n        this.dropIndicatorDOM.targetReference = closestElement;\n        this.dropIndicatorDOM.placement = placement;\n        return true;\n      }\n      return false;\n    });\n    if (!placementAccepted) {\n      this.dropIndicatorDOM.targetReference = null;\n    }\n  }\n  _ondrop(e) {\n    e.preventDefault();\n    const draggedElement = DragRegistry.getDraggedElement();\n    this.fireEvent(\"move\", {\n      source: {\n        element: draggedElement\n      },\n      destination: {\n        element: this.dropIndicatorDOM.targetReference,\n        placement: this.dropIndicatorDOM.placement\n      }\n    });\n    draggedElement.focus();\n    this.dropIndicatorDOM.targetReference = null;\n  }\n  _onListItemStepIn(e) {\n    const treeItem = e.detail.item;\n    if (treeItem.items.length > 0) {\n      const firstChild = treeItem.items[0];\n      const firstChildListItem = this._getListItemForTreeItem(firstChild);\n      firstChildListItem && this.list.focusItem(firstChildListItem);\n    }\n  }\n  _onListItemStepOut(e) {\n    const treeItem = e.detail.item;\n    if (treeItem.parentElement !== this) {\n      const parent = treeItem.parentElement;\n      const parentListItem = this._getListItemForTreeItem(parent);\n      parentListItem && this.list.focusItem(parentListItem);\n    }\n  }\n  _onListItemToggle(e) {\n    const treeItem = e.detail.item;\n    const defaultPrevented = !this.fireEvent(\"item-toggle\", {\n      item: treeItem\n    }, true);\n    if (!defaultPrevented) {\n      treeItem.toggle();\n    }\n  }\n  _onListItemClick(e) {\n    const treeItem = e.detail.item;\n    if (!this.fireEvent(\"item-click\", {\n      item: treeItem\n    }, true)) {\n      e.preventDefault();\n    }\n  }\n  _onListItemDelete(e) {\n    const treeItem = e.detail.item;\n    this.fireEvent(\"item-delete\", {\n      item: treeItem\n    });\n  }\n  _onListItemFocus(e) {\n    const treeItem = e.detail.item;\n    this.fireEvent(\"item-focus\", {\n      item: treeItem\n    });\n  }\n  _onListItemMouseOver(e) {\n    const target = e.target;\n    if (this._isInstanceOfTreeItemBase(target)) {\n      this.fireEvent(\"item-mouseover\", {\n        item: target\n      });\n    }\n  }\n  _onListItemMouseOut(e) {\n    const target = e.target;\n    if (this._isInstanceOfTreeItemBase(target)) {\n      this.fireEvent(\"item-mouseout\", {\n        item: target\n      });\n    }\n  }\n  _onListSelectionChange(e) {\n    const previouslySelectedItems = e.detail.previouslySelectedItems;\n    const selectedItems = e.detail.selectedItems;\n    const targetItem = e.detail.targetItem;\n    previouslySelectedItems.forEach(item => {\n      item.selected = false;\n    });\n    selectedItems.forEach(item => {\n      item.selected = true;\n    });\n    this.fireEvent(\"selection-change\", {\n      previouslySelectedItems,\n      selectedItems,\n      targetItem\n    });\n  }\n  _prepareTreeItems() {\n    // set level to tree items\n    this.walk((item, level, index) => {\n      const parent = item.parentNode;\n      const ariaSetSize = parent && parent.children.length || this.items.length;\n      item.setAttribute(\"level\", level.toString());\n      item.forcedSetsize = ariaSetSize;\n      item.forcedPosinset = index + 1;\n    });\n  }\n  /**\n   * Returns the corresponding list item for a given tree item\n   * @param item The tree item\n   * @protected\n   */\n  _getListItemForTreeItem(item) {\n    return this.getItems().find(listItem => listItem === item);\n  }\n  /**\n   * Returns the a flat array of all tree items\n   * @protected\n   * @returns array of the tree items\n   */\n  getItems() {\n    return this.list.getItems();\n  }\n  /**\n   * Focus a tree item by its index in the flat array of all tree items\n   * @protected\n   * @param index\n   */\n  focusItemByIndex(index) {\n    const item = this.getItems()[index];\n    item && this.list.focusItem(item);\n  }\n  /**\n   * Perform Depth-First-Search walk on the tree and run a callback on each node\n   * @public\n   * @param callback function to execute on each node of the tree with 3 arguments: the node, the level and the index\n   */\n  walk(callback) {\n    walkTree(this, 1, callback);\n  }\n  _isInstanceOfTreeItemBase(object) {\n    return \"isTreeItem\" in object;\n  }\n};\n__decorate([property()], Tree.prototype, \"selectionMode\", void 0);\n__decorate([property()], Tree.prototype, \"noDataText\", void 0);\n__decorate([property()], Tree.prototype, \"headerText\", void 0);\n__decorate([property()], Tree.prototype, \"footerText\", void 0);\n__decorate([property()], Tree.prototype, \"accessibleName\", void 0);\n__decorate([property()], Tree.prototype, \"accessibleNameRef\", void 0);\n__decorate([slot({\n  type: HTMLElement,\n  invalidateOnChildChange: true,\n  \"default\": true\n})], Tree.prototype, \"items\", void 0);\n__decorate([slot()], Tree.prototype, \"header\", void 0);\nTree = __decorate([customElement({\n  tag: \"ui5-tree\",\n  renderer: litRender,\n  styles: TreeCss,\n  template: TreeTemplate,\n  dependencies: [TreeList, TreeItem, TreeItemCustom, DropIndicator]\n})\n/**\n * Fired when a tree item is expanded or collapsed.\n *\n * **Note:** You can call `preventDefault()` on the event object to suppress the event, if needed.\n * This may be handy for example if you want to dynamically load tree items upon the user expanding a node.\n * Even if you prevented the event's default behavior, you can always manually call `toggle()` on a tree item.\n * @param {HTMLElement} item the toggled item.\n * @allowPreventDefault\n * @public\n */, event(\"item-toggle\", {\n  detail: {\n    /**\n     * @public\n     */\n    item: {\n      type: HTMLElement\n    }\n  }\n})\n/**\n * Fired when the mouse cursor enters the tree item borders.\n * @param {HTMLElement} item the hovered item.\n * @since 1.0.0-rc.16\n * @public\n */, event(\"item-mouseover\", {\n  detail: {\n    /**\n     * @public\n     */\n    item: {\n      type: HTMLElement\n    }\n  }\n})\n/**\n * Fired when the mouse cursor leaves the tree item borders.\n * @param {HTMLElement} item the hovered item.\n * @since 1.0.0-rc.16\n * @public\n */, event(\"item-mouseout\", {\n  detail: {\n    /**\n     * @public\n     */\n    item: {\n      type: HTMLElement\n    }\n  }\n})\n/**\n * Fired when a tree item is activated.\n * @allowPreventDefault\n * @param {HTMLElement} item The clicked item.\n * @public\n */, event(\"item-click\", {\n  detail: {\n    /**\n     * @public\n     */\n    item: {\n      type: HTMLElement\n    }\n  }\n})\n/**\n * Fired when the Delete button of any tree item is pressed.\n *\n * **Note:** A Delete button is displayed on each item,\n * when the component `selectionMode` property is set to `Delete`.\n * @param {HTMLElement} item the deleted item.\n * @public\n */, event(\"item-delete\", {\n  detail: {\n    /**\n     * @public\n     */\n    item: {\n      type: HTMLElement\n    }\n  }\n})\n/**\n * Fired when a tree item is focused.\n * @param {HTMLElement} item The focused item.\n * @private\n */, event(\"item-focus\", {\n  detail: {\n    item: {\n      type: HTMLElement\n    }\n  }\n})\n/**\n * Fired when selection is changed by user interaction\n * in `Single`, `SingleStart`, `SingleEnd` and `Multiple` modes.\n * @param {Array} selectedItems An array of the selected items.\n * @param {Array} previouslySelectedItems An array of the previously selected items.\n * @param {HTMLElement} targetItem The item triggering the event.\n * @public\n */, event(\"selection-change\", {\n  detail: {\n    /**\n     * @public\n     */\n    selectedItems: {\n      type: Array\n    },\n    /**\n     * @public\n     */\n    previouslySelectedItems: {\n      type: Array\n    },\n    /**\n     * @public\n     */\n    targetItem: {\n      type: HTMLElement\n    }\n  }\n})], Tree);\nconst walkTree = (el, level, callback) => {\n  el.items.forEach((item, index) => {\n    callback(item, level, index);\n    if (item.items.length > 0) {\n      walkTree(item, level + 1, callback);\n    }\n  });\n};\nTree.define();\nexport default Tree;","map":{"version":3,"names":["UI5Element","customElement","property","slot","DragRegistry","findClosestPosition","Orientation","MovePlacement","event","litRender","getEffectiveAriaLabelText","DropIndicator","TreeItem","TreeItemCustom","TreeList","ListAccessibleRole","TreeTemplate","TreeCss","Tree","constructor","selectionMode","onEnterDOM","subscribe","onExitDOM","unsubscribe","onBeforeRendering","_prepareTreeItems","onAfterRendering","shadowRoot","querySelector","dropIndicatorDOM","list","getDomRef","_role","_label","_hasHeader","header","length","_ondragenter","e","preventDefault","_ondragleave","relatedTarget","Node","contains","targetReference","_ondragover","draggedElement","getDraggedElement","allLiNodesTraversed","target","HTMLElement","walk","item","push","closestPosition","clientY","Vertical","placements","element","getRootNode","host","filter","placement","On","placementAccepted","some","closestElement","beforeItemMovePrevented","fireEvent","source","destination","_ondrop","focus","_onListItemStepIn","treeItem","detail","items","firstChild","firstChildListItem","_getListItemForTreeItem","focusItem","_onListItemStepOut","parentElement","parent","parentListItem","_onListItemToggle","defaultPrevented","toggle","_onListItemClick","_onListItemDelete","_onListItemFocus","_onListItemMouseOver","_isInstanceOfTreeItemBase","_onListItemMouseOut","_onListSelectionChange","previouslySelectedItems","selectedItems","targetItem","forEach","selected","level","index","parentNode","ariaSetSize","children","setAttribute","toString","forcedSetsize","forcedPosinset","getItems","find","listItem","focusItemByIndex","callback","walkTree","object","__decorate","type","invalidateOnChildChange","tag","renderer","styles","template","dependencies","Array","el","define"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents/src/Tree.ts"],"sourcesContent":["import UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\nimport DragRegistry from \"@ui5/webcomponents-base/dist/util/dragAndDrop/DragRegistry.js\";\nimport findClosestPosition from \"@ui5/webcomponents-base/dist/util/dragAndDrop/findClosestPosition.js\";\nimport Orientation from \"@ui5/webcomponents-base/dist/types/Orientation.js\";\nimport MovePlacement from \"@ui5/webcomponents-base/dist/types/MovePlacement.js\";\nimport event from \"@ui5/webcomponents-base/dist/decorators/event.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport { getEffectiveAriaLabelText } from \"@ui5/webcomponents-base/dist/util/AriaLabelHelper.js\";\nimport DropIndicator from \"./DropIndicator.js\";\nimport TreeItem from \"./TreeItem.js\";\nimport type TreeItemBase from \"./TreeItemBase.js\";\nimport TreeItemCustom from \"./TreeItemCustom.js\";\nimport TreeList from \"./TreeList.js\";\nimport type ListSelectionMode from \"./types/ListSelectionMode.js\";\nimport ListAccessibleRole from \"./types/ListAccessibleRole.js\";\nimport type {\n\tTreeItemBaseToggleEventDetail,\n\tTreeItemBaseStepInEventDetail,\n\tTreeItemBaseStepOutEventDetail,\n} from \"./TreeItemBase.js\";\nimport type {\n\tListItemClickEventDetail,\n\tListItemDeleteEventDetail,\n\tListItemFocusEventDetail,\n\tListSelectionChangeEventDetail,\n} from \"./List.js\";\n\n// Template\nimport TreeTemplate from \"./generated/templates/TreeTemplate.lit.js\";\n\n// Styles\nimport TreeCss from \"./generated/themes/Tree.css.js\";\n\ntype TreeMoveEventDetail = {\n\tsource: {\n\t\telement: HTMLElement,\n\t},\n\tdestination: {\n\t\telement: HTMLElement,\n\t\tplacement: `${MovePlacement}`,\n\t}\n}\n\ntype TreeItemEventDetail = {\n\titem: TreeItemBase,\n}\ntype TreeItemToggleEventDetail = TreeItemEventDetail;\ntype TreeItemMouseoverEventDetail = TreeItemEventDetail;\ntype TreeItemMouseoutEventDetail = TreeItemEventDetail;\ntype TreeItemClickEventDetail = TreeItemEventDetail;\ntype TreeItemDeleteEventDetail = TreeItemEventDetail;\ntype TreeItemFocusEventDetail = TreeItemEventDetail;\ntype TreeSelectionChangeEventDetail = {\n\tselectedItems: Array<TreeItemBase>;\n\tpreviouslySelectedItems: Array<TreeItemBase>;\n\ttargetItem: TreeItemBase;\n}\ntype WalkCallback = (item: TreeItemBase, level: number, index: number) => void;\n\n/**\n * @class\n *\n * ### Overview\n * The `ui5-tree` component provides a tree structure for displaying data in a hierarchy.\n *\n * ### Usage\n *\n * #### When to use:\n *\n * - To display hierarchically structured items.\n * - To select one or more items out of a set of hierarchically structured items.\n *\n * #### When not to use:\n *\n * - To display items not hierarchically structured. In this case, use the List component.\n * - To select one item from a very small number of non-hierarchical items. Select or ComboBox might be more appropriate.\n * - The hierarchy turns out to have only two levels. In this case, use List with group items.\n *\n * ### Keyboard Handling\n *\n * The `ui5-tree` provides advanced keyboard handling.\n * The user can use the following keyboard shortcuts in order to navigate trough the tree:\n *\n * - [Up] or [Down] - Navigates up and down the tree items that are currently visible.\n * - [Right] - Drills down the tree by expanding the tree nodes.\n * - [Left] - Goes up the tree and collapses the tree nodes.\n *\n * The user can use the following keyboard shortcuts to perform selection,\n * when the `selectionMode` property is in use:\n *\n * - [Space] - Selects the currently focused item upon keyup.\n * - [Enter]  - Selects the currently focused item upon keydown.\n *\n * ### ES6 Module Import\n * `import \"@ui5/webcomponents/dist/Tree.js\";`\n *\n * `import \"@ui5/webcomponents/dist/TreeItem.js\";`\n * @constructor\n * @extends UI5Element\n * @public\n * @since 1.0.0-rc.8\n */\n@customElement({\n\ttag: \"ui5-tree\",\n\trenderer: litRender,\n\tstyles: TreeCss,\n\ttemplate: TreeTemplate,\n\tdependencies: [\n\t\tTreeList,\n\t\tTreeItem,\n\t\tTreeItemCustom,\n\t\tDropIndicator,\n\t],\n})\n/**\n * Fired when a tree item is expanded or collapsed.\n *\n * **Note:** You can call `preventDefault()` on the event object to suppress the event, if needed.\n * This may be handy for example if you want to dynamically load tree items upon the user expanding a node.\n * Even if you prevented the event's default behavior, you can always manually call `toggle()` on a tree item.\n * @param {HTMLElement} item the toggled item.\n * @allowPreventDefault\n * @public\n */\n@event<TreeItemToggleEventDetail>(\"item-toggle\", {\n\tdetail: {\n\t\t/**\n\t\t * @public\n\t\t */\n\t\titem: { type: HTMLElement },\n\t},\n})\n/**\n * Fired when the mouse cursor enters the tree item borders.\n * @param {HTMLElement} item the hovered item.\n * @since 1.0.0-rc.16\n * @public\n */\n@event<TreeItemMouseoverEventDetail>(\"item-mouseover\", {\n\tdetail: {\n\t\t/**\n\t\t * @public\n\t\t */\n\t\titem: { type: HTMLElement },\n\t},\n})\n/**\n * Fired when the mouse cursor leaves the tree item borders.\n * @param {HTMLElement} item the hovered item.\n * @since 1.0.0-rc.16\n * @public\n */\n@event<TreeItemMouseoutEventDetail>(\"item-mouseout\", {\n\tdetail: {\n\t\t/**\n\t\t * @public\n\t\t */\n\t\titem: { type: HTMLElement },\n\t},\n})\n/**\n * Fired when a tree item is activated.\n * @allowPreventDefault\n * @param {HTMLElement} item The clicked item.\n * @public\n */\n@event<TreeItemClickEventDetail>(\"item-click\", {\n\tdetail: {\n\t\t/**\n\t\t * @public\n\t\t */\n\t\titem: { type: HTMLElement },\n\t},\n})\n\n/**\n * Fired when the Delete button of any tree item is pressed.\n *\n * **Note:** A Delete button is displayed on each item,\n * when the component `selectionMode` property is set to `Delete`.\n * @param {HTMLElement} item the deleted item.\n * @public\n */\n@event<TreeItemDeleteEventDetail>(\"item-delete\", {\n\tdetail: {\n\t\t/**\n\t\t * @public\n\t\t */\n\t\titem: { type: HTMLElement },\n\t},\n})\n\n/**\n * Fired when a tree item is focused.\n * @param {HTMLElement} item The focused item.\n * @private\n */\n@event<TreeItemFocusEventDetail>(\"item-focus\", {\n\tdetail: {\n\t\titem: { type: HTMLElement },\n\t},\n})\n\n/**\n * Fired when selection is changed by user interaction\n * in `Single`, `SingleStart`, `SingleEnd` and `Multiple` modes.\n * @param {Array} selectedItems An array of the selected items.\n * @param {Array} previouslySelectedItems An array of the previously selected items.\n * @param {HTMLElement} targetItem The item triggering the event.\n * @public\n */\n@event<TreeSelectionChangeEventDetail>(\"selection-change\", {\n\tdetail: {\n\t\t/**\n\t\t * @public\n\t\t */\n\t\tselectedItems: { type: Array },\n\t\t/**\n\t\t * @public\n\t\t */\n\t\tpreviouslySelectedItems: { type: Array },\n\t\t/**\n\t\t * @public\n\t\t */\n\t\ttargetItem: { type: HTMLElement },\n\t},\n})\nclass Tree extends UI5Element {\n\t/**\n\t * Defines the selection mode of the component. Since the tree uses a `ui5-list` to display its structure,\n\t * the tree modes are exactly the same as the list modes, and are all applicable.\n\t * @public\n\t * @default \"None\"\n\t */\n\t@property()\n\tselectionMode?: `${ListSelectionMode}` = \"None\";\n\n\t/**\n\t * Defines the text that is displayed when the component contains no items.\n\t * @default undefined\n\t * @public\n\t */\n\t@property()\n\tnoDataText?: string;\n\n\t/**\n\t * Defines the component header text.\n\t *\n\t * **Note:** If the `header` slot is set, this property is ignored.\n\t * @default undefined\n\t * @public\n\t */\n\t@property()\n\theaderText?: string;\n\n\t/**\n\t * Defines the component footer text.\n\t * @default undefined\n\t * @public\n\t */\n\t@property()\n\tfooterText?: string;\n\n\t/**\n\t * Defines the accessible name of the component.\n\t * @default undefined\n\t * @public\n\t * @since 1.8.0\n\t */\n\t@property()\n\taccessibleName?: string;\n\n\t/**\n\t * Defines the IDs of the elements that label the component.\n\t * @default undefined\n\t * @public\n\t * @since 1.8.0\n\t */\n\t@property()\n\taccessibleNameRef?: string;\n\n\t/**\n\t * Defines the items of the component. Tree items may have other tree items as children.\n\t *\n\t * **Note:** Use `ui5-tree-item` for the intended design.\n\t * @public\n\t */\n\t@slot({ type: HTMLElement, invalidateOnChildChange: true, \"default\": true })\n\titems!: Array<TreeItemBase>;\n\n\t/**\n\t * Defines the component header.\n\t *\n\t * **Note:** When the `header` slot is set, the\n\t * `headerText` property is ignored.\n\t * @public\n\t */\n\t@slot()\n\theader!: Array<HTMLElement>;\n\n\tonEnterDOM() {\n\t\tDragRegistry.subscribe(this);\n\t}\n\n\tonExitDOM() {\n\t\tDragRegistry.unsubscribe(this);\n\t}\n\n\tonBeforeRendering() {\n\t\tthis._prepareTreeItems();\n\t}\n\n\tonAfterRendering() {\n\t\t// Note: this is a workaround for the problem that the list cannot invalidate itself when its only physical child is a slot (and the list items are inside the slot)\n\t\t// This code should be removed once a framework-level fix is implemented\n\t\tthis.shadowRoot!.querySelector<TreeList>(\"[ui5-tree-list]\")!.onBeforeRendering();\n\t}\n\n\tget dropIndicatorDOM(): DropIndicator | null {\n\t\treturn this.shadowRoot!.querySelector(\"[ui5-drop-indicator]\");\n\t}\n\n\tget list() {\n\t\treturn this.getDomRef() as TreeList;\n\t}\n\n\tget _role() {\n\t\treturn ListAccessibleRole.Tree;\n\t}\n\n\tget _label() {\n\t\treturn getEffectiveAriaLabelText(this);\n\t}\n\n\tget _hasHeader() {\n\t\treturn !!this.header.length;\n\t}\n\n\t_ondragenter(e: DragEvent) {\n\t\te.preventDefault();\n\t}\n\n\t_ondragleave(e: DragEvent) {\n\t\tif (e.relatedTarget instanceof Node && this.shadowRoot!.contains(e.relatedTarget)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.dropIndicatorDOM!.targetReference = null;\n\t}\n\n\t_ondragover(e: DragEvent) {\n\t\tconst draggedElement = DragRegistry.getDraggedElement();\n\t\tconst allLiNodesTraversed: Array<HTMLElement> = []; // use the only <li> nodes to determine positioning\n\t\tif (!(e.target instanceof HTMLElement) || !draggedElement) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.walk(item => {\n\t\t\tallLiNodesTraversed.push(item.shadowRoot!.querySelector(\"li\")!);\n\t\t});\n\n\t\tconst closestPosition = findClosestPosition(\n\t\t\tallLiNodesTraversed,\n\t\t\te.clientY,\n\t\t\tOrientation.Vertical,\n\t\t);\n\n\t\tif (!closestPosition) {\n\t\t\tthis.dropIndicatorDOM!.targetReference = null;\n\t\t\treturn;\n\t\t}\n\n\t\tlet placements = closestPosition.placements;\n\n\t\tclosestPosition.element = <HTMLElement>(<ShadowRoot>closestPosition.element.getRootNode()).host;\n\n\t\tif (draggedElement.contains(closestPosition.element)) { return; }\n\n\t\tif (closestPosition.element === draggedElement) {\n\t\t\tplacements = placements.filter(placement => placement !== MovePlacement.On);\n\t\t}\n\n\t\tconst placementAccepted = placements.some(placement => {\n\t\t\tconst closestElement = closestPosition.element;\n\t\t\tconst beforeItemMovePrevented = !this.fireEvent<TreeMoveEventDetail>(\"move-over\", {\n\t\t\t\tsource: {\n\t\t\t\t\telement: draggedElement,\n\t\t\t\t},\n\t\t\t\tdestination: {\n\t\t\t\t\telement: closestElement,\n\t\t\t\t\tplacement,\n\t\t\t\t},\n\t\t\t}, true);\n\n\t\t\tif (beforeItemMovePrevented) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.dropIndicatorDOM!.targetReference = closestElement;\n\t\t\t\tthis.dropIndicatorDOM!.placement = placement;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t});\n\n\t\tif (!placementAccepted) {\n\t\t\tthis.dropIndicatorDOM!.targetReference = null;\n\t\t}\n\t}\n\n\t_ondrop(e: DragEvent) {\n\t\te.preventDefault();\n\n\t\tconst draggedElement = DragRegistry.getDraggedElement()!;\n\t\tthis.fireEvent<TreeMoveEventDetail>(\"move\", {\n\t\t\tsource: {\n\t\t\t\telement: draggedElement,\n\t\t\t},\n\t\t\tdestination: {\n\t\t\t\telement: this.dropIndicatorDOM!.targetReference!,\n\t\t\t\tplacement: this.dropIndicatorDOM!.placement,\n\t\t\t},\n\t\t});\n\t\tdraggedElement.focus();\n\t\tthis.dropIndicatorDOM!.targetReference = null;\n\t}\n\n\t_onListItemStepIn(e: CustomEvent<TreeItemBaseStepInEventDetail>) {\n\t\tconst treeItem = e.detail.item;\n\t\tif (treeItem.items.length > 0) {\n\t\t\tconst firstChild = treeItem.items[0];\n\t\t\tconst firstChildListItem = this._getListItemForTreeItem(firstChild);\n\t\t\tfirstChildListItem && this.list.focusItem(firstChildListItem);\n\t\t}\n\t}\n\n\t_onListItemStepOut(e: CustomEvent<TreeItemBaseStepOutEventDetail>) {\n\t\tconst treeItem = e.detail.item;\n\t\tif (treeItem.parentElement !== this) {\n\t\t\tconst parent = treeItem.parentElement as TreeItemBase;\n\t\t\tconst parentListItem = this._getListItemForTreeItem(parent);\n\t\t\tparentListItem && this.list.focusItem(parentListItem);\n\t\t}\n\t}\n\n\t_onListItemToggle(e: CustomEvent<TreeItemBaseToggleEventDetail>) {\n\t\tconst treeItem = e.detail.item;\n\t\tconst defaultPrevented = !this.fireEvent<TreeItemToggleEventDetail>(\"item-toggle\", { item: treeItem }, true);\n\t\tif (!defaultPrevented) {\n\t\t\ttreeItem.toggle();\n\t\t}\n\t}\n\n\t_onListItemClick(e: CustomEvent<ListItemClickEventDetail>) {\n\t\tconst treeItem = e.detail.item as TreeItemBase;\n\n\t\tif (!this.fireEvent<TreeItemClickEventDetail>(\"item-click\", { item: treeItem }, true)) {\n\t\t\te.preventDefault();\n\t\t}\n\t}\n\n\t_onListItemDelete(e: CustomEvent<ListItemDeleteEventDetail>) {\n\t\tconst treeItem = e.detail.item as TreeItemBase;\n\t\tthis.fireEvent<TreeItemDeleteEventDetail>(\"item-delete\", { item: treeItem });\n\t}\n\n\t_onListItemFocus(e: CustomEvent<ListItemFocusEventDetail>) {\n\t\tconst treeItem = e.detail.item as TreeItemBase;\n\t\tthis.fireEvent<TreeItemFocusEventDetail>(\"item-focus\", { item: treeItem });\n\t}\n\n\t_onListItemMouseOver(e: MouseEvent) {\n\t\tconst target = e.target;\n\n\t\tif (this._isInstanceOfTreeItemBase(target)) {\n\t\t\tthis.fireEvent<TreeItemMouseoverEventDetail>(\"item-mouseover\", { item: target });\n\t\t}\n\t}\n\n\t_onListItemMouseOut(e: MouseEvent) {\n\t\tconst target = e.target;\n\n\t\tif (this._isInstanceOfTreeItemBase(target)) {\n\t\t\tthis.fireEvent<TreeItemMouseoutEventDetail>(\"item-mouseout\", { item: target });\n\t\t}\n\t}\n\n\t_onListSelectionChange(e: CustomEvent<ListSelectionChangeEventDetail>) {\n\t\tconst previouslySelectedItems = e.detail.previouslySelectedItems as Array<TreeItemBase>;\n\t\tconst selectedItems = e.detail.selectedItems as Array<TreeItemBase>;\n\t\tconst targetItem = e.detail.targetItem as TreeItemBase;\n\n\t\tpreviouslySelectedItems.forEach(item => {\n\t\t\titem.selected = false;\n\t\t});\n\t\tselectedItems.forEach(item => {\n\t\t\titem.selected = true;\n\t\t});\n\n\t\tthis.fireEvent<TreeSelectionChangeEventDetail>(\"selection-change\", {\n\t\t\tpreviouslySelectedItems,\n\t\t\tselectedItems,\n\t\t\ttargetItem,\n\t\t});\n\t}\n\n\t_prepareTreeItems() {\n\t\t// set level to tree items\n\t\tthis.walk((item, level, index) => {\n\t\t\tconst parent = item.parentNode;\n\t\t\tconst ariaSetSize = (parent && parent.children.length) || this.items.length;\n\n\t\t\titem.setAttribute(\"level\", level.toString());\n\n\t\t\titem.forcedSetsize = ariaSetSize;\n\t\t\titem.forcedPosinset = index + 1;\n\t\t});\n\t}\n\n\t/**\n\t * Returns the corresponding list item for a given tree item\n\t * @param item The tree item\n\t * @protected\n\t */\n\t_getListItemForTreeItem(item: TreeItemBase) {\n\t\treturn this.getItems().find(listItem => listItem === item);\n\t}\n\n\t/**\n\t * Returns the a flat array of all tree items\n\t * @protected\n\t * @returns array of the tree items\n\t */\n\tgetItems(): Array<TreeItemBase> {\n\t\treturn this.list.getItems();\n\t}\n\n\t/**\n\t * Focus a tree item by its index in the flat array of all tree items\n\t * @protected\n\t * @param index\n\t */\n\tfocusItemByIndex(index: number) {\n\t\tconst item = this.getItems()[index];\n\t\titem && this.list.focusItem(item);\n\t}\n\n\t/**\n\t * Perform Depth-First-Search walk on the tree and run a callback on each node\n\t * @public\n\t * @param callback function to execute on each node of the tree with 3 arguments: the node, the level and the index\n\t */\n\twalk(callback: WalkCallback): void {\n\t\twalkTree(this, 1, callback);\n\t}\n\n\t_isInstanceOfTreeItemBase(object: any): object is TreeItemBase {\n\t\treturn \"isTreeItem\" in object;\n\t}\n}\n\nconst walkTree = (el: Tree | TreeItemBase, level: number, callback: WalkCallback) => {\n\t(el.items).forEach((item, index) => {\n\t\tcallback(item, level, index);\n\t\tif (item.items.length > 0) {\n\t\t\twalkTree(item, level + 1, callback);\n\t\t}\n\t});\n};\n\nTree.define();\n\nexport default Tree;\n\nexport type {\n\tTreeMoveEventDetail,\n\tTreeItemToggleEventDetail,\n\tTreeItemMouseoverEventDetail,\n\tTreeItemMouseoutEventDetail,\n\tTreeItemClickEventDetail,\n\tTreeItemDeleteEventDetail,\n\tTreeItemFocusEventDetail,\n\tTreeSelectionChangeEventDetail,\n\tWalkCallback,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}