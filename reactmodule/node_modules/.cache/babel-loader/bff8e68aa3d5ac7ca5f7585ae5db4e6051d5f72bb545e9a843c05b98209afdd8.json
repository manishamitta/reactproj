{"ast":null,"code":"/**\n * The GridWalker object represents the elements of a two-dimensional grid system and a position within them.\n *\n * @class\n * @private\n */\nclass GridWalker {\n  constructor() {\n    let grid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [[]];\n    this.rowPos = 0;\n    this.colPos = 0;\n    this.pageSize = 20;\n    this.firstRowPos = 0;\n    this.lastRowPos = 0;\n    this.grid = grid;\n  }\n  left() {\n    this.colPos = Math.max(this.getColPos() - 1, 0);\n  }\n  right() {\n    this.colPos = Math.min(this.getColPos() + 1, this.grid[this.getRowPos()].length - 1);\n  }\n  up() {\n    this.rowPos = Math.max(this.getRowPos() - 1, 0);\n  }\n  down() {\n    this.rowPos = Math.min(this.getRowPos() + 1, this.grid.length - 1);\n  }\n  pageup() {\n    this.colPos = this.getColPos();\n    const rowPos = this.getRowPos();\n    this.rowPos = Math.max(rowPos > this.firstRowPos ? this.firstRowPos : 0, rowPos - this.pageSize);\n  }\n  pagedown() {\n    this.colPos = this.getColPos();\n    const rowPos = this.getRowPos();\n    const endRowPos = this.grid.length - 1;\n    const lastRowPos = endRowPos + this.lastRowPos;\n    this.rowPos = Math.min(rowPos < lastRowPos ? lastRowPos : endRowPos, rowPos + this.pageSize);\n  }\n  home() {\n    this.colPos = this.getColPos();\n    if (this.colPos === 0) {\n      this.rowPos = this.rowPos > this.firstRowPos ? this.firstRowPos : 0;\n    } else {\n      this.colPos = this.colPos > 1 ? 1 : 0;\n    }\n  }\n  end() {\n    this.colPos = this.getColPos();\n    if (this.colPos === 0) {\n      const endRowPos = this.grid.length - 1;\n      const lastRowPos = endRowPos + this.lastRowPos;\n      this.rowPos = this.rowPos < lastRowPos ? lastRowPos : endRowPos;\n    } else {\n      const lastColPos = this.grid[this.rowPos].length - 1;\n      this.colPos = this.colPos < lastColPos ? lastColPos : 0;\n    }\n  }\n  setGrid(grid) {\n    this.grid = grid;\n  }\n  getCurrent() {\n    return this.grid[this.getRowPos()][this.getColPos()];\n  }\n  setCurrent(current) {\n    this.grid.forEach((row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell === current) {\n          this.rowPos = rowIndex;\n          this.colPos = colIndex;\n        }\n      });\n    });\n  }\n  setRowPos(rowPos) {\n    this.rowPos = rowPos;\n  }\n  getRowPos() {\n    return Math.min(this.rowPos, this.grid.length - 1);\n  }\n  setColPos(colPos) {\n    this.colPos = colPos;\n  }\n  getColPos() {\n    return Math.min(this.colPos, this.grid[this.getRowPos()].length - 1);\n  }\n  setFirstRowPos(firstRowPos) {\n    this.firstRowPos = firstRowPos;\n  }\n  getFirstRowPos() {\n    return this.firstRowPos;\n  }\n  setLastRowPos(lastRowPos) {\n    this.lastRowPos = lastRowPos;\n  }\n  getLastRowPos() {\n    return this.lastRowPos;\n  }\n}\nexport default GridWalker;","map":{"version":3,"names":["GridWalker","constructor","grid","arguments","length","undefined","rowPos","colPos","pageSize","firstRowPos","lastRowPos","left","Math","max","getColPos","right","min","getRowPos","up","down","pageup","pagedown","endRowPos","home","end","lastColPos","setGrid","getCurrent","setCurrent","current","forEach","row","rowIndex","cell","colIndex","setRowPos","setColPos","setFirstRowPos","getFirstRowPos","setLastRowPos","getLastRowPos"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents/src/GridWalker.ts"],"sourcesContent":["/**\n * The GridWalker object represents the elements of a two-dimensional grid system and a position within them.\n *\n * @class\n * @private\n */\nclass GridWalker {\n\tgrid: unknown[][];\n\trowPos: number = 0;\n\tcolPos: number = 0;\n\tpageSize: number = 20;\n\tfirstRowPos: number = 0;\n\tlastRowPos: number = 0;\n\n\tconstructor(grid: unknown[][] = [[]]) {\n\t\tthis.grid = grid;\n\t}\n\n\tleft() {\n\t\tthis.colPos = Math.max(this.getColPos() - 1, 0);\n\t}\n\n\tright() {\n\t\tthis.colPos = Math.min(this.getColPos() + 1, this.grid[this.getRowPos()].length - 1);\n\t}\n\n\tup() {\n\t\tthis.rowPos = Math.max(this.getRowPos() - 1, 0);\n\t}\n\n\tdown() {\n\t\tthis.rowPos = Math.min(this.getRowPos() + 1, this.grid.length - 1);\n\t}\n\n\tpageup() {\n\t\tthis.colPos = this.getColPos();\n\t\tconst rowPos = this.getRowPos();\n\t\tthis.rowPos = Math.max(rowPos > this.firstRowPos ? this.firstRowPos : 0, rowPos - this.pageSize);\n\t}\n\n\tpagedown() {\n\t\tthis.colPos = this.getColPos();\n\t\tconst rowPos = this.getRowPos();\n\t\tconst endRowPos = this.grid.length - 1;\n\t\tconst lastRowPos = endRowPos + this.lastRowPos;\n\t\tthis.rowPos = Math.min(rowPos < lastRowPos ? lastRowPos : endRowPos, rowPos + this.pageSize);\n\t}\n\n\thome() {\n\t\tthis.colPos = this.getColPos();\n\t\tif (this.colPos === 0) {\n\t\t\tthis.rowPos = (this.rowPos > this.firstRowPos) ? this.firstRowPos : 0;\n\t\t} else {\n\t\t\tthis.colPos = (this.colPos > 1) ? 1 : 0;\n\t\t}\n\t}\n\n\tend() {\n\t\tthis.colPos = this.getColPos();\n\t\tif (this.colPos === 0) {\n\t\t\tconst endRowPos = this.grid.length - 1;\n\t\t\tconst lastRowPos = endRowPos + this.lastRowPos;\n\t\t\tthis.rowPos = (this.rowPos < lastRowPos) ? lastRowPos : endRowPos;\n\t\t} else {\n\t\t\tconst lastColPos = this.grid[this.rowPos].length - 1;\n\t\t\tthis.colPos = (this.colPos < lastColPos) ? lastColPos : 0;\n\t\t}\n\t}\n\n\tsetGrid(grid: unknown[][]) {\n\t\tthis.grid = grid;\n\t}\n\n\tgetCurrent() {\n\t\treturn this.grid[this.getRowPos()][this.getColPos()];\n\t}\n\n\tsetCurrent(current: unknown) {\n\t\tthis.grid.forEach((row, rowIndex) => {\n\t\t\trow.forEach((cell, colIndex) => {\n\t\t\t\tif (cell === current) {\n\t\t\t\t\tthis.rowPos = rowIndex;\n\t\t\t\t\tthis.colPos = colIndex;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tsetRowPos(rowPos: number) {\n\t\tthis.rowPos = rowPos;\n\t}\n\n\tgetRowPos() {\n\t\treturn Math.min(this.rowPos, this.grid.length - 1);\n\t}\n\n\tsetColPos(colPos: number) {\n\t\tthis.colPos = colPos;\n\t}\n\n\tgetColPos() {\n\t\treturn Math.min(this.colPos, this.grid[this.getRowPos()].length - 1);\n\t}\n\n\tsetFirstRowPos(firstRowPos: number) {\n\t\tthis.firstRowPos = firstRowPos;\n\t}\n\n\tgetFirstRowPos() {\n\t\treturn this.firstRowPos;\n\t}\n\n\tsetLastRowPos(lastRowPos: number) {\n\t\tthis.lastRowPos = lastRowPos;\n\t}\n\n\tgetLastRowPos() {\n\t\treturn this.lastRowPos;\n\t}\n}\n\nexport default GridWalker;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}