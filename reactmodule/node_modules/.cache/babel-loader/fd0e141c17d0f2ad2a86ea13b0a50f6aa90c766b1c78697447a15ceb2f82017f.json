{"ast":null,"code":"\"use strict\";\n\nconst r = new WeakMap(),\n  o = new WeakMap(),\n  u = {\n    attributes: !0,\n    childList: !0,\n    characterData: !0,\n    subtree: !0\n  },\n  v = e => {\n    const t = e;\n    return t.accessibleNameRef ? m(e) : t.accessibleName ? t.accessibleName : void 0;\n  },\n  m = e => {\n    const t = e.accessibleNameRef?.split(\" \") ?? [],\n      s = e.getRootNode();\n    let l = \"\";\n    return t.forEach((a, c) => {\n      const n = s.querySelector(`[id='${a}']`),\n        d = `${n && n.textContent ? n.textContent : \"\"}`;\n      d && (l += d, c < t.length - 1 && (l += \" \"));\n    }), l;\n  },\n  E = e => {\n    const t = new Set();\n    return b(e).forEach(c => {\n      t.add(c);\n    }), (e.accessibleNameRef?.split(\" \") ?? []).forEach(c => {\n      const n = g(e, c);\n      n && t.add(n);\n    }), Array.from(t);\n  },\n  b = e => {\n    const t = e.getRootNode().querySelectorAll(`[for=\"${e.id}\"]`);\n    return Array.from(t);\n  },\n  g = (e, t) => e.getRootNode().querySelector(`[id='${t}']`),\n  M = e => {\n    const t = [];\n    if (b(e).forEach(l => {\n      const a = l.textContent;\n      a && t.push(a);\n    }), t.length) return t.join(\" \");\n  },\n  k = e => s => {\n    if (!(s && s.type === \"property\" && s.name === \"accessibleNameRef\")) return;\n    const l = o.get(e);\n    if (!l) return;\n    const a = l.observedElements,\n      c = E(e);\n    a.forEach(n => {\n      c.includes(n) || i(l, n);\n    }), c.forEach(n => {\n      a.includes(n) || (f(l, n), l.observedElements.push(n));\n    }), l?.callback();\n  },\n  A = (e, t) => {\n    if (o.has(e)) return;\n    const s = E(e),\n      l = k(e),\n      a = {\n        host: e,\n        observedElements: s,\n        callback: t,\n        invalidationCallback: l\n      };\n    o.set(e, a), e.attachInvalidate(l), s.forEach(c => {\n      f(a, c);\n    }), t();\n  },\n  f = (e, t) => {\n    let s = r.get(t);\n    if (!s) {\n      s = {\n        observer: null,\n        callbacks: []\n      };\n      const l = new MutationObserver(() => {\n        s.callbacks.forEach(n => {\n          n();\n        });\n        const c = document.getElementById(t.id);\n        e.host.id === t.getAttribute(\"for\") || c || i(e, t);\n      });\n      s.observer = l, l.observe(t, u), r.set(t, s);\n    }\n    s.callbacks.includes(e.callback) || s.callbacks.push(e.callback);\n  },\n  i = (e, t) => {\n    const s = r.get(t);\n    s && (s.callbacks = s.callbacks.filter(l => l !== e.callback), s.callbacks.length || (s.observer?.disconnect(), r.delete(t))), e.observedElements = e.observedElements.filter(l => l !== t);\n  },\n  T = e => {\n    const t = o.get(e);\n    if (!t) return;\n    [...t.observedElements].forEach(l => {\n      i(t, l);\n    }), e.detachInvalidate(t.invalidationCallback), o.delete(e);\n  };\nexport { v as getEffectiveAriaLabelText, M as getAssociatedLabelForTexts, A as registerUI5Element, T as deregisterUI5Element, m as getAllAccessibleNameRefTexts };","map":{"version":3,"names":["r","WeakMap","o","u","attributes","childList","characterData","subtree","v","e","t","accessibleNameRef","m","accessibleName","split","s","getRootNode","l","forEach","a","c","n","querySelector","d","textContent","length","E","Set","b","add","g","Array","from","querySelectorAll","id","_getReferencedElementById","M","push","join","k","type","name","get","observedElements","includes","i","f","callback","A","registerUI5Element","has","host","invalidationCallback","set","attachInvalidate","_addObservedElementToRegisteredElement","observer","callbacks","MutationObserver","document","getElementById","getAttribute","observe","_removeObservedElementFromRegisteredElement","filter","disconnect","delete","T","detachInvalidate","getEffectiveAriaLabelText","getAssociatedLabelForTexts","deregisterUI5Element","getAllAccessibleNameRefTexts"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-base/src/util/AriaLabelHelper.ts"],"sourcesContent":["import type UI5Element from \"../UI5Element.js\";\nimport type { ChangeInfo } from \"../UI5Element.js\";\n\ntype InvalidateCallback = (changeInfo: ChangeInfo) => void;\ntype MutationCallback = () => void;\ntype AssociatedElement = {\n\tobserver: MutationObserver | null;\n\tcallbacks: Array<MutationCallback>;\n};\ntype RegisteredElement = {\n\thost: UI5Element;\n\tobservedElements: Array<HTMLElement>;\n\tcallback: MutationCallback;\n\tinvalidationCallback: InvalidateCallback;\n};\n\nconst associatedElements = new WeakMap<HTMLElement, AssociatedElement>();\nconst registeredElements = new WeakMap<UI5Element, RegisteredElement>();\n\ntype AccessibleElement = HTMLElement & {\n\taccessibleNameRef?: string;\n\taccessibleName?: string;\n};\n\nconst observerOptions = {\n\tattributes: true,\n\tchildList: true,\n\tcharacterData: true,\n\tsubtree: true,\n};\n\nconst getEffectiveAriaLabelText = (el: HTMLElement) => {\n\tconst accessibleEl = el as AccessibleElement;\n\n\tif (!accessibleEl.accessibleNameRef) {\n\t\tif (accessibleEl.accessibleName) {\n\t\t\treturn accessibleEl.accessibleName;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\treturn getAllAccessibleNameRefTexts(el);\n};\n\n/**\n *\n * @param {HTMLElement} el Defines the HTMLElement, for which you need to get all related texts\n */\nconst getAllAccessibleNameRefTexts = (el: HTMLElement) => {\n\tconst ids = (el as AccessibleElement).accessibleNameRef?.split(\" \") ?? [];\n\tconst owner = el.getRootNode() as HTMLElement;\n\tlet result = \"\";\n\n\tids.forEach((elementId: string, index: number) => {\n\t\tconst element = owner.querySelector(`[id='${elementId}']`);\n\t\tconst text = `${element && element.textContent ? element.textContent : \"\"}`;\n\t\tif (text) {\n\t\t\tresult += text;\n\t\t\tif (index < ids.length - 1) {\n\t\t\t\tresult += \" \";\n\t\t\t}\n\t\t}\n\t});\n\n\treturn result;\n};\n\nconst _getAllAssociatedElementsFromDOM = (el: UI5Element): Array<HTMLElement> => {\n\tconst set = new Set<HTMLElement>();\n\t// adding labels with attribute for matching the el.id\n\tconst labelsForAssociated = _getAssociatedLabels(el);\n\tlabelsForAssociated.forEach(itm => {\n\t\tset.add(itm);\n\t});\n\t// adding other elements that id is the same as accessibleNameRef value\n\tconst value = el[\"accessibleNameRef\" as keyof typeof el] as string;\n\tconst ids = value?.split(\" \") ?? [];\n\tids.forEach(id => {\n\t\tconst refEl = _getReferencedElementById(el, id);\n\t\tif (refEl) {\n\t\t\tset.add(refEl);\n\t\t}\n\t});\n\treturn Array.from(set);\n};\n\nconst _getAssociatedLabels = (el: HTMLElement): Array<HTMLElement> => {\n\tconst labels = (el.getRootNode() as HTMLElement).querySelectorAll<HTMLElement>(`[for=\"${el.id}\"]`);\n\treturn Array.from(labels);\n};\n\nconst _getReferencedElementById = (el: HTMLElement, elementId: string): HTMLElement | null => {\n\treturn (el.getRootNode() as HTMLElement).querySelector<HTMLElement>(`[id='${elementId}']`);\n};\n\n/**\n * @param {HTMLElement} el Defines the HTMLElement, for which you need to get all related \"label for\" texts\n */\nconst getAssociatedLabelForTexts = (el: HTMLElement) => {\n\tconst results: Array<string> = [];\n\tconst labels = _getAssociatedLabels(el);\n\n\tlabels.forEach((label: HTMLElement) => {\n\t\tconst labelText = label.textContent;\n\t\tlabelText && results.push(labelText);\n\t});\n\n\tif (results.length) {\n\t\treturn results.join(\" \");\n\t}\n\n\treturn undefined;\n};\n\nconst _createInvalidationCallback = (el: UI5Element) => {\n\tconst invalidationCallback = (changeInfo: ChangeInfo) => {\n\t\tif (!(changeInfo && changeInfo.type === \"property\" && changeInfo.name === \"accessibleNameRef\")) {\n\t\t\treturn;\n\t\t}\n\t\tconst registeredElement = registeredElements.get(el);\n\t\tif (!registeredElement) {\n\t\t\treturn;\n\t\t}\n\t\tconst oldAssociatedElements = registeredElement.observedElements;\n\t\tconst newAssociatedElements = _getAllAssociatedElementsFromDOM(el);\n\t\toldAssociatedElements.forEach(oldElement => {\n\t\t\tif (!newAssociatedElements.includes(oldElement)) {\n\t\t\t\t_removeObservedElementFromRegisteredElement(registeredElement, oldElement);\n\t\t\t}\n\t\t});\n\t\tnewAssociatedElements.forEach(newElement => {\n\t\t\tif (!oldAssociatedElements.includes(newElement)) {\n\t\t\t\t_addObservedElementToRegisteredElement(registeredElement, newElement);\n\t\t\t\tregisteredElement.observedElements.push(newElement);\n\t\t\t}\n\t\t});\n\t\tregisteredElement?.callback();\n\t};\n\treturn invalidationCallback;\n};\n\nconst registerUI5Element = (el: UI5Element, callback: MutationCallback) => {\n\tif (registeredElements.has(el)) {\n\t\treturn;\n\t}\n\tconst allAssociatedElements = _getAllAssociatedElementsFromDOM(el);\n\tconst invalidationCallback = _createInvalidationCallback(el);\n\tconst registeredElement = {\n\t\thost: el,\n\t\tobservedElements: allAssociatedElements,\n\t\tcallback,\n\t\tinvalidationCallback,\n\t};\n\tregisteredElements.set(el, registeredElement);\n\tel.attachInvalidate(invalidationCallback);\n\n\tallAssociatedElements.forEach((element: HTMLElement) => {\n\t\t_addObservedElementToRegisteredElement(registeredElement, element);\n\t});\n\tcallback();\n};\n\nconst _addObservedElementToRegisteredElement = (registeredElement: RegisteredElement, element: HTMLElement) => {\n\tlet associatedElement = associatedElements.get(element);\n\tif (!associatedElement) {\n\t\tassociatedElement = { observer: null, callbacks: [] };\n\t\tconst observer = new MutationObserver(() => {\n\t\t\tconst callbacks = (associatedElement as AssociatedElement).callbacks;\n\t\t\tcallbacks.forEach(callback => {\n\t\t\t\tcallback();\n\t\t\t});\n\t\t\tconst domEl = document.getElementById(element.id);\n\t\t\t// if no longer should be observed from this registeredElement, remove it\n\t\t\tif (!(registeredElement.host.id === element.getAttribute(\"for\") || domEl)) {\n\t\t\t\t_removeObservedElementFromRegisteredElement(registeredElement, element);\n\t\t\t}\n\t\t});\n\t\tassociatedElement.observer = observer;\n\t\tobserver.observe(element, observerOptions);\n\t\tassociatedElements.set(element, associatedElement);\n\t}\n\tif (!associatedElement.callbacks.includes(registeredElement.callback)) {\n\t\tassociatedElement.callbacks.push(registeredElement.callback);\n\t}\n};\n\nconst _removeObservedElementFromRegisteredElement = (registeredElement: RegisteredElement, element: HTMLElement) => {\n\tconst associatedElement = associatedElements.get(element);\n\tif (associatedElement) {\n\t\tassociatedElement.callbacks = associatedElement.callbacks.filter(itm => itm !== registeredElement.callback);\n\t\tif (!associatedElement.callbacks.length) {\n\t\t\tassociatedElement.observer?.disconnect();\n\t\t\tassociatedElements.delete(element);\n\t\t}\n\t}\n\tregisteredElement.observedElements = registeredElement.observedElements.filter(itm => itm !== element);\n};\n\nconst deregisterUI5Element = (el: UI5Element) => {\n\tconst registeredElement = registeredElements.get(el);\n\tif (!registeredElement) {\n\t\treturn;\n\t}\n\tconst oldObservedElements = [...registeredElement.observedElements];\n\toldObservedElements.forEach(observedElement => {\n\t\t_removeObservedElementFromRegisteredElement(registeredElement, observedElement);\n\t});\n\tel.detachInvalidate(registeredElement.invalidationCallback);\n\tregisteredElements.delete(el);\n};\n\nexport {\n\tgetEffectiveAriaLabelText,\n\tgetAssociatedLabelForTexts,\n\tregisterUI5Element,\n\tderegisterUI5Element,\n\tgetAllAccessibleNameRefTexts,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}