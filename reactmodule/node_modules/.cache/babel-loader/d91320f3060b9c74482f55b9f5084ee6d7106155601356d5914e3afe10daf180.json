{"ast":null,"code":"/**\n * A plugin hook for defining the sort priority when sorting by multiple columns, starting with the first column ID.\n *\n * **Note:** Column IDs that are not found in the array use the default priority, so the first sorted column has a higher priority than the next sorted column.\n *\n * @param {string[]} orderedIds - Array of column IDs, defining the sorting priority.\n */\n\nexport const useOrderedMultiSort = orderedIds => {\n  const useOrderedMultiSortPlugin = hooks => {\n    hooks.stateReducers.push((newState, action) => {\n      if (action.type === 'toggleSortBy') {\n        if (newState.sortBy.length <= 1) {\n          return newState;\n        } else {\n          const clonedSortBy = [...newState.sortBy];\n          const updatedSortBy = orderedIds.flatMap(sortedId => {\n            const sortedItemIndex = clonedSortBy.findIndex(item => item.id === sortedId);\n            if (sortedItemIndex !== -1) {\n              const sortedEntry = clonedSortBy[sortedItemIndex];\n              clonedSortBy.splice(sortedItemIndex, 1);\n              return [sortedEntry];\n            }\n            return [];\n          });\n          return {\n            ...newState,\n            sortBy: [...updatedSortBy, ...clonedSortBy]\n          };\n        }\n      }\n      return newState;\n    });\n  };\n  useOrderedMultiSortPlugin.pluginName = 'useOrderedMultiSort';\n  return useOrderedMultiSortPlugin;\n};","map":{"version":3,"names":["useOrderedMultiSort","orderedIds","useOrderedMultiSortPlugin","hooks","stateReducers","push","newState","action","type","sortBy","length","clonedSortBy","updatedSortBy","flatMap","sortedId","sortedItemIndex","findIndex","item","id","sortedEntry","splice","pluginName"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-react/dist/components/AnalyticalTable/pluginHooks/useOrderedMultiSort.js"],"sourcesContent":["/**\n * A plugin hook for defining the sort priority when sorting by multiple columns, starting with the first column ID.\n *\n * **Note:** Column IDs that are not found in the array use the default priority, so the first sorted column has a higher priority than the next sorted column.\n *\n * @param {string[]} orderedIds - Array of column IDs, defining the sorting priority.\n */\n\nexport const useOrderedMultiSort = orderedIds => {\n  const useOrderedMultiSortPlugin = hooks => {\n    hooks.stateReducers.push((newState, action) => {\n      if (action.type === 'toggleSortBy') {\n        if (newState.sortBy.length <= 1) {\n          return newState;\n        } else {\n          const clonedSortBy = [...newState.sortBy];\n          const updatedSortBy = orderedIds.flatMap(sortedId => {\n            const sortedItemIndex = clonedSortBy.findIndex(item => item.id === sortedId);\n            if (sortedItemIndex !== -1) {\n              const sortedEntry = clonedSortBy[sortedItemIndex];\n              clonedSortBy.splice(sortedItemIndex, 1);\n              return [sortedEntry];\n            }\n            return [];\n          });\n          return {\n            ...newState,\n            sortBy: [...updatedSortBy, ...clonedSortBy]\n          };\n        }\n      }\n      return newState;\n    });\n  };\n  useOrderedMultiSortPlugin.pluginName = 'useOrderedMultiSort';\n  return useOrderedMultiSortPlugin;\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,mBAAmB,GAAGC,UAAU,IAAI;EAC/C,MAAMC,yBAAyB,GAAGC,KAAK,IAAI;IACzCA,KAAK,CAACC,aAAa,CAACC,IAAI,CAAC,CAACC,QAAQ,EAAEC,MAAM,KAAK;MAC7C,IAAIA,MAAM,CAACC,IAAI,KAAK,cAAc,EAAE;QAClC,IAAIF,QAAQ,CAACG,MAAM,CAACC,MAAM,IAAI,CAAC,EAAE;UAC/B,OAAOJ,QAAQ;QACjB,CAAC,MAAM;UACL,MAAMK,YAAY,GAAG,CAAC,GAAGL,QAAQ,CAACG,MAAM,CAAC;UACzC,MAAMG,aAAa,GAAGX,UAAU,CAACY,OAAO,CAACC,QAAQ,IAAI;YACnD,MAAMC,eAAe,GAAGJ,YAAY,CAACK,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,QAAQ,CAAC;YAC5E,IAAIC,eAAe,KAAK,CAAC,CAAC,EAAE;cAC1B,MAAMI,WAAW,GAAGR,YAAY,CAACI,eAAe,CAAC;cACjDJ,YAAY,CAACS,MAAM,CAACL,eAAe,EAAE,CAAC,CAAC;cACvC,OAAO,CAACI,WAAW,CAAC;YACtB;YACA,OAAO,EAAE;UACX,CAAC,CAAC;UACF,OAAO;YACL,GAAGb,QAAQ;YACXG,MAAM,EAAE,CAAC,GAAGG,aAAa,EAAE,GAAGD,YAAY;UAC5C,CAAC;QACH;MACF;MACA,OAAOL,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC;EACDJ,yBAAyB,CAACmB,UAAU,GAAG,qBAAqB;EAC5D,OAAOnB,yBAAyB;AAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}