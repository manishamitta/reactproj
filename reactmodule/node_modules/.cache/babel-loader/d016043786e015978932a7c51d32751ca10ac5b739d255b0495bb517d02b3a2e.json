{"ast":null,"code":"class RadioButtonGroup {\n  static hasGroup(groupName) {\n    return this.groups.has(groupName);\n  }\n  static getGroup(groupName) {\n    return this.groups.get(groupName);\n  }\n  static getCheckedRadioFromGroup(groupName) {\n    return this.checkedRadios.get(groupName);\n  }\n  static removeGroup(groupName) {\n    this.checkedRadios.delete(groupName);\n    return this.groups.delete(groupName);\n  }\n  static addToGroup(radioBtn, groupName) {\n    if (this.hasGroup(groupName)) {\n      this.enforceSingleSelection(radioBtn, groupName);\n      if (this.getGroup(groupName)) {\n        this.getGroup(groupName).push(radioBtn);\n      }\n    } else {\n      this.createGroup(radioBtn, groupName);\n    }\n    this.updateTabOrder(groupName);\n  }\n  static removeFromGroup(radioBtn, groupName) {\n    const group = this.getGroup(groupName);\n    if (!group) {\n      return;\n    }\n    const checkedRadio = this.getCheckedRadioFromGroup(groupName);\n    // Remove the radio button from the given group\n    group.forEach((_radioBtn, idx, arr) => {\n      if (radioBtn._id === _radioBtn._id) {\n        return arr.splice(idx, 1);\n      }\n    });\n    if (checkedRadio === radioBtn) {\n      this.checkedRadios.set(groupName, null);\n    }\n    // Remove the group if it is empty\n    if (!group.length) {\n      this.removeGroup(groupName);\n    }\n    this.updateTabOrder(groupName);\n  }\n  static createGroup(radioBtn, groupName) {\n    if (radioBtn.checked) {\n      this.checkedRadios.set(groupName, radioBtn);\n    }\n    this.groups.set(groupName, [radioBtn]);\n  }\n  static selectNextItem(item, groupName) {\n    const group = this.getGroup(groupName);\n    if (!group) {\n      return;\n    }\n    const groupLength = group.length,\n      currentItemPosition = group.indexOf(item);\n    if (groupLength <= 1) {\n      return;\n    }\n    const nextItemToSelect = this._nextSelectable(currentItemPosition, group);\n    if (!nextItemToSelect) {\n      return;\n    }\n    this.updateSelectionInGroup(nextItemToSelect, groupName);\n  }\n  static updateFormValidity(groupName) {\n    const group = this.getGroup(groupName);\n    if (!group) {\n      return;\n    }\n    const hasRequired = group.some(r => r.required);\n    const hasChecked = group.some(r => r.checked);\n    group.forEach(r => {\n      r._groupChecked = hasChecked;\n      r._groupRequired = hasRequired;\n    });\n  }\n  static updateTabOrder(groupName) {\n    const group = this.getGroup(groupName);\n    if (!group) {\n      return;\n    }\n    const hasCheckedRadio = group.some(radioBtn => radioBtn.checked);\n    group.filter(radioBtn => !radioBtn.disabled).forEach((radioBtn, idx) => {\n      if (hasCheckedRadio) {\n        radioBtn._tabIndex = radioBtn.checked ? \"0\" : \"-1\";\n      } else {\n        radioBtn._tabIndex = idx === 0 ? \"0\" : \"-1\";\n      }\n    });\n  }\n  static selectPreviousItem(item, groupName) {\n    const group = this.getGroup(groupName);\n    if (!group) {\n      return;\n    }\n    const groupLength = group.length,\n      currentItemPosition = group.indexOf(item);\n    if (groupLength <= 1) {\n      return;\n    }\n    const previousItemToSelect = this._previousSelectable(currentItemPosition, group);\n    if (!previousItemToSelect) {\n      return;\n    }\n    this.updateSelectionInGroup(previousItemToSelect, groupName);\n  }\n  static selectItem(item, groupName) {\n    this.updateSelectionInGroup(item, groupName);\n    this.updateTabOrder(groupName);\n  }\n  static updateSelectionInGroup(radioBtnToSelect, groupName) {\n    const checkedRadio = this.getCheckedRadioFromGroup(groupName);\n    if (checkedRadio) {\n      this._deselectRadio(checkedRadio);\n    }\n    this._selectRadio(radioBtnToSelect);\n    this.checkedRadios.set(groupName, radioBtnToSelect);\n  }\n  static _deselectRadio(radioBtn) {\n    if (radioBtn) {\n      radioBtn.checked = false;\n    }\n  }\n  static _selectRadio(radioBtn) {\n    if (radioBtn) {\n      radioBtn.focus();\n      radioBtn.checked = true;\n      radioBtn._checked = true;\n      radioBtn.fireEvent(\"change\");\n    }\n  }\n  static _nextSelectable(pos, group) {\n    if (!group) {\n      return null;\n    }\n    const groupLength = group.length;\n    let nextRadioToSelect = null;\n    if (pos === groupLength - 1) {\n      if (group[0].disabled || group[0].readonly) {\n        return this._nextSelectable(1, group);\n      }\n      nextRadioToSelect = group[0];\n    } else if (group[pos + 1].disabled || group[pos + 1].readonly) {\n      return this._nextSelectable(pos + 1, group);\n    } else {\n      nextRadioToSelect = group[pos + 1];\n    }\n    return nextRadioToSelect;\n  }\n  static _previousSelectable(pos, group) {\n    const groupLength = group.length;\n    let previousRadioToSelect = null;\n    if (pos === 0) {\n      if (group[groupLength - 1].disabled || group[groupLength - 1].readonly) {\n        return this._previousSelectable(groupLength - 1, group);\n      }\n      previousRadioToSelect = group[groupLength - 1];\n    } else if (group[pos - 1].disabled || group[pos - 1].readonly) {\n      return this._previousSelectable(pos - 1, group);\n    } else {\n      previousRadioToSelect = group[pos - 1];\n    }\n    return previousRadioToSelect;\n  }\n  static enforceSingleSelection(radioBtn, groupName) {\n    const checkedRadio = this.getCheckedRadioFromGroup(groupName);\n    if (radioBtn.checked) {\n      if (!checkedRadio) {\n        this.checkedRadios.set(groupName, radioBtn);\n      } else if (radioBtn !== checkedRadio) {\n        this._deselectRadio(checkedRadio);\n        this.checkedRadios.set(groupName, radioBtn);\n      }\n    } else if (radioBtn === checkedRadio) {\n      this.checkedRadios.set(groupName, null);\n    }\n    this.updateTabOrder(groupName);\n    this.updateFormValidity(groupName);\n  }\n  static get groups() {\n    if (!this._groups) {\n      this._groups = new Map();\n    }\n    return this._groups;\n  }\n  static get checkedRadios() {\n    if (!this._checkedRadios) {\n      this._checkedRadios = new Map();\n    }\n    return this._checkedRadios;\n  }\n}\nexport default RadioButtonGroup;","map":{"version":3,"names":["RadioButtonGroup","hasGroup","groupName","groups","has","getGroup","get","getCheckedRadioFromGroup","checkedRadios","removeGroup","delete","addToGroup","radioBtn","enforceSingleSelection","push","createGroup","updateTabOrder","removeFromGroup","group","checkedRadio","forEach","_radioBtn","idx","arr","_id","splice","set","length","checked","selectNextItem","item","groupLength","currentItemPosition","indexOf","nextItemToSelect","_nextSelectable","updateSelectionInGroup","updateFormValidity","hasRequired","some","r","required","hasChecked","_groupChecked","_groupRequired","hasCheckedRadio","filter","disabled","_tabIndex","selectPreviousItem","previousItemToSelect","_previousSelectable","selectItem","radioBtnToSelect","_deselectRadio","_selectRadio","focus","_checked","fireEvent","pos","nextRadioToSelect","readonly","previousRadioToSelect","_groups","Map","_checkedRadios"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents/src/RadioButtonGroup.ts"],"sourcesContent":["import type RadioButton from \"./RadioButton.js\";\n\nclass RadioButtonGroup {\n\tstatic _groups: Map<string, Array<RadioButton>>;\n\tstatic _checkedRadios: Map<string, RadioButton | null>;\n\n\tstatic hasGroup(groupName: string) {\n\t\treturn this.groups.has(groupName);\n\t}\n\n\tstatic getGroup(groupName: string) {\n\t\treturn this.groups.get(groupName);\n\t}\n\n\tstatic getCheckedRadioFromGroup(groupName: string) {\n\t\treturn this.checkedRadios.get(groupName);\n\t}\n\n\tstatic removeGroup(groupName: string) {\n\t\tthis.checkedRadios.delete(groupName);\n\t\treturn this.groups.delete(groupName);\n\t}\n\n\tstatic addToGroup(radioBtn: RadioButton, groupName: string) {\n\t\tif (this.hasGroup(groupName)) {\n\t\t\tthis.enforceSingleSelection(radioBtn, groupName);\n\t\t\tif (this.getGroup(groupName)) {\n\t\t\t\tthis.getGroup(groupName)!.push(radioBtn);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.createGroup(radioBtn, groupName);\n\t\t}\n\n\t\tthis.updateTabOrder(groupName);\n\t}\n\n\tstatic removeFromGroup(radioBtn: RadioButton, groupName: string) {\n\t\tconst group = this.getGroup(groupName);\n\n\t\tif (!group) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst checkedRadio = this.getCheckedRadioFromGroup(groupName);\n\n\t\t// Remove the radio button from the given group\n\t\tgroup.forEach((_radioBtn, idx, arr) => {\n\t\t\tif (radioBtn._id === _radioBtn._id) {\n\t\t\t\treturn arr.splice(idx, 1);\n\t\t\t}\n\t\t});\n\n\t\tif (checkedRadio === radioBtn) {\n\t\t\tthis.checkedRadios.set(groupName, null);\n\t\t}\n\n\t\t// Remove the group if it is empty\n\t\tif (!group.length) {\n\t\t\tthis.removeGroup(groupName);\n\t\t}\n\n\t\tthis.updateTabOrder(groupName);\n\t}\n\n\tstatic createGroup(radioBtn: RadioButton, groupName: string) {\n\t\tif (radioBtn.checked) {\n\t\t\tthis.checkedRadios.set(groupName, radioBtn);\n\t\t}\n\n\t\tthis.groups.set(groupName, [radioBtn]);\n\t}\n\n\tstatic selectNextItem(item: RadioButton, groupName: string) {\n\t\tconst group = this.getGroup(groupName);\n\t\tif (!group) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst groupLength = group.length,\n\t\t\tcurrentItemPosition = group.indexOf(item);\n\n\t\tif (groupLength <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextItemToSelect = this._nextSelectable(currentItemPosition, group);\n\t\tif (!nextItemToSelect) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.updateSelectionInGroup(nextItemToSelect, groupName);\n\t}\n\n\tstatic updateFormValidity(groupName: string) {\n\t\tconst group = this.getGroup(groupName);\n\n\t\tif (!group) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst hasRequired = group.some(r => r.required);\n\t\tconst hasChecked = group.some(r => r.checked);\n\n\t\tgroup.forEach(r => {\n\t\t\tr._groupChecked = hasChecked;\n\t\t\tr._groupRequired = hasRequired;\n\t\t});\n\t}\n\n\tstatic updateTabOrder(groupName: string) {\n\t\tconst group = this.getGroup(groupName);\n\n\t\tif (!group) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst hasCheckedRadio = group.some(radioBtn => radioBtn.checked);\n\n\t\tgroup.filter(radioBtn => !radioBtn.disabled).forEach((radioBtn, idx) => {\n\t\t\tif (hasCheckedRadio) {\n\t\t\t\tradioBtn._tabIndex = radioBtn.checked ? \"0\" : \"-1\";\n\t\t\t} else {\n\t\t\t\tradioBtn._tabIndex = idx === 0 ? \"0\" : \"-1\";\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic selectPreviousItem(item: RadioButton, groupName: string) {\n\t\tconst group = this.getGroup(groupName);\n\n\t\tif (!group) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst groupLength = group.length,\n\t\t\tcurrentItemPosition = group.indexOf(item);\n\n\t\tif (groupLength <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst previousItemToSelect = this._previousSelectable(currentItemPosition, group);\n\t\tif (!previousItemToSelect) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.updateSelectionInGroup(previousItemToSelect, groupName);\n\t}\n\n\tstatic selectItem(item: RadioButton, groupName: string) {\n\t\tthis.updateSelectionInGroup(item, groupName);\n\t\tthis.updateTabOrder(groupName);\n\t}\n\n\tstatic updateSelectionInGroup(radioBtnToSelect: RadioButton, groupName: string) {\n\t\tconst checkedRadio = this.getCheckedRadioFromGroup(groupName);\n\n\t\tif (checkedRadio) {\n\t\t\tthis._deselectRadio(checkedRadio);\n\t\t}\n\n\t\tthis._selectRadio(radioBtnToSelect);\n\t\tthis.checkedRadios.set(groupName, radioBtnToSelect);\n\t}\n\n\tstatic _deselectRadio(radioBtn: RadioButton) {\n\t\tif (radioBtn) {\n\t\t\tradioBtn.checked = false;\n\t\t}\n\t}\n\n\tstatic _selectRadio(radioBtn: RadioButton) {\n\t\tif (radioBtn) {\n\t\t\tradioBtn.focus();\n\t\t\tradioBtn.checked = true;\n\t\t\tradioBtn._checked = true;\n\t\t\tradioBtn.fireEvent(\"change\");\n\t\t}\n\t}\n\n\tstatic _nextSelectable(pos: number, group: RadioButton[]): RadioButton | null {\n\t\tif (!group) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst groupLength = group.length;\n\t\tlet nextRadioToSelect = null;\n\n\t\tif (pos === groupLength - 1) {\n\t\t\tif (group[0].disabled || group[0].readonly) {\n\t\t\t\treturn this._nextSelectable(1, group);\n\t\t\t}\n\t\t\tnextRadioToSelect = group[0];\n\t\t} else if (group[pos + 1].disabled || group[pos + 1].readonly) {\n\t\t\treturn this._nextSelectable(pos + 1, group);\n\t\t} else {\n\t\t\tnextRadioToSelect = group[pos + 1];\n\t\t}\n\n\t\treturn nextRadioToSelect;\n\t}\n\n\tstatic _previousSelectable(pos: number, group: RadioButton[]): RadioButton | null {\n\t\tconst groupLength = group.length;\n\t\tlet previousRadioToSelect = null;\n\t\tif (pos === 0) {\n\t\t\tif (group[groupLength - 1].disabled || group[groupLength - 1].readonly) {\n\t\t\t\treturn this._previousSelectable(groupLength - 1, group);\n\t\t\t}\n\t\t\tpreviousRadioToSelect = group[groupLength - 1];\n\t\t} else if (group[pos - 1].disabled || group[pos - 1].readonly) {\n\t\t\treturn this._previousSelectable(pos - 1, group);\n\t\t} else {\n\t\t\tpreviousRadioToSelect = group[pos - 1];\n\t\t}\n\n\t\treturn previousRadioToSelect;\n\t}\n\n\tstatic enforceSingleSelection(radioBtn: RadioButton, groupName: string) {\n\t\tconst checkedRadio = this.getCheckedRadioFromGroup(groupName);\n\n\t\tif (radioBtn.checked) {\n\t\t\tif (!checkedRadio) {\n\t\t\t\tthis.checkedRadios.set(groupName, radioBtn);\n\t\t\t} else if (radioBtn !== checkedRadio) {\n\t\t\t\tthis._deselectRadio(checkedRadio);\n\t\t\t\tthis.checkedRadios.set(groupName, radioBtn);\n\t\t\t}\n\t\t} else if (radioBtn === checkedRadio) {\n\t\t\tthis.checkedRadios.set(groupName, null);\n\t\t}\n\n\t\tthis.updateTabOrder(groupName);\n\t\tthis.updateFormValidity(groupName);\n\t}\n\n\tstatic get groups() {\n\t\tif (!this._groups) {\n\t\t\tthis._groups = new Map();\n\t\t}\n\t\treturn this._groups;\n\t}\n\n\tstatic get checkedRadios() {\n\t\tif (!this._checkedRadios) {\n\t\t\tthis._checkedRadios = new Map();\n\t\t}\n\t\treturn this._checkedRadios;\n\t}\n}\n\nexport default RadioButtonGroup;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}