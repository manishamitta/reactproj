{"ast":null,"code":"import UI5Date from \"./UI5Date.js\";\nimport UniversalDate from \"./UniversalDate.js\";\nclass CalendarDate {\n  constructor(year, month, date, calendarType) {\n    let aArgs = arguments,\n      // eslint-disable-line\n      oJSDate,\n      oNow,\n      sCalendarType;\n    switch (aArgs.length) {\n      case 0:\n        // defaults to the current date\n        oNow = UI5Date.getInstance();\n        return this.constructor(oNow.getFullYear(), oNow.getMonth(), oNow.getDate());\n      case 1: // CalendarDate\n      case 2:\n        // CalendarDate, sCalendarType\n        if (!(aArgs[0] instanceof CalendarDate)) {\n          throw new Error(\"Invalid arguments: the first argument must be of type CalendarDate.\");\n        }\n        sCalendarType = aArgs[1] ? aArgs[1] : aArgs[0]._oUDate.sCalendarType;\n        // Use source.valueOf() (returns the same point of time regardless calendar type) instead of\n        // source's getters to avoid non-gregorian Year, Month and Date may be used to construct a Gregorian date\n        oJSDate = UI5Date.getInstance(aArgs[0].valueOf());\n        // Make this date really local. Now getters are safe.\n        oJSDate.setFullYear(oJSDate.getUTCFullYear(), oJSDate.getUTCMonth(), oJSDate.getUTCDate());\n        oJSDate.setHours(oJSDate.getUTCHours(), oJSDate.getUTCMinutes(), oJSDate.getUTCSeconds(), oJSDate.getUTCMilliseconds());\n        this._oUDate = createUniversalUTCDate(oJSDate, sCalendarType);\n        break;\n      case 3: // year, month, date\n      case 4:\n        // year, month, date, sCalendarType\n        checkNumericLike(aArgs[0], `Invalid year: ${aArgs[0]}`);\n        checkNumericLike(aArgs[1], `Invalid month: ${aArgs[1]}`);\n        checkNumericLike(aArgs[2], `Invalid date: ${aArgs[2]}`);\n        oJSDate = UI5Date.getInstance(0, 0, 1);\n        oJSDate.setFullYear(aArgs[0], aArgs[1], aArgs[2]); // 2 digits year is not supported. If so, it is considered as full year as well.\n        if (aArgs[3]) {\n          sCalendarType = aArgs[3];\n        }\n        this._oUDate = createUniversalUTCDate(oJSDate, sCalendarType);\n        break;\n      default:\n        throw new Error(`${\"Invalid arguments. Accepted arguments are: 1) oCalendarDate, (optional)calendarType\" + \"or 2) year, month, date, (optional) calendarType\"}${aArgs}`);\n    }\n  }\n  getYear() {\n    return this._oUDate.getUTCFullYear();\n  }\n  setYear(year) {\n    checkNumericLike(year, `Invalid year: ${year}`);\n    this._oUDate.setUTCFullYear(year);\n    return this;\n  }\n  getMonth() {\n    return this._oUDate.getUTCMonth();\n  }\n  /**\n   * Sets the given month as ordinal month of the year.\n   * @param {int} month An integer between 0 and 11, representing the months January through December( or their\n   * equivalent month names for the given calendar).\n   * If the specified value is is outside of the expected range, this method attempts to update the date information\n   * accordingly. For example, if 12 is given as a month, the year will be incremented by 1, and 1 will be used for month.\n   * @param {int} [date] An integer between 1 and 31, representing the day of the month, but other values are allowed.\n   * 0 will result in the previous month's last day.\n   * -1 will result in the day before the previous month's last day.\n   * 32 will result in:\n   * - first day of the next month if the current month has 31 days.\n   * - second day of the next month if the current month has 30 days.\n   * Other value will result in adding or subtracting days according to the given value.\n   * @returns {sap.ui.unified.calendar.CalendarDate} <code>this</code> for method chaining.\n   */\n  setMonth(month, date) {\n    checkNumericLike(month, `Invalid month: ${month}`);\n    if (date || date === 0) {\n      checkNumericLike(date, `Invalid date: ${date}`);\n      this._oUDate.setUTCMonth(month, date);\n    } else {\n      this._oUDate.setUTCMonth(month);\n    }\n    return this;\n  }\n  getDate() {\n    return this._oUDate.getUTCDate();\n  }\n  setDate(date) {\n    checkNumericLike(date, `Invalid date: ${date}`);\n    this._oUDate.setUTCDate(date);\n    return this;\n  }\n  getDay() {\n    return this._oUDate.getUTCDay();\n  }\n  getCalendarType() {\n    return this._oUDate.sCalendarType;\n  }\n  isBefore(oCalendarDate) {\n    checkCalendarDate(oCalendarDate);\n    return this.valueOf() < oCalendarDate.valueOf();\n  }\n  isAfter(oCalendarDate) {\n    checkCalendarDate(oCalendarDate);\n    return this.valueOf() > oCalendarDate.valueOf();\n  }\n  isSameOrBefore(oCalendarDate) {\n    checkCalendarDate(oCalendarDate);\n    return this.valueOf() <= oCalendarDate.valueOf();\n  }\n  isSameOrAfter(oCalendarDate) {\n    checkCalendarDate(oCalendarDate);\n    return this.valueOf() >= oCalendarDate.valueOf();\n  }\n  isSame(oCalendarDate) {\n    checkCalendarDate(oCalendarDate);\n    return this.valueOf() === oCalendarDate.valueOf();\n  }\n  toLocalJSDate() {\n    // Use this._oUDate.getTime()(returns the same point of time regardless calendar type)  instead of\n    // this._oUDate's getters to avoid non-gregorian Year, Month and Date to be used to construct a Gregorian date\n    const oLocalDate = UI5Date.getInstance(this._oUDate.getTime());\n    // Make this date really local. Now getters are safe.\n    oLocalDate.setFullYear(oLocalDate.getUTCFullYear(), oLocalDate.getUTCMonth(), oLocalDate.getUTCDate());\n    oLocalDate.setHours(0, 0, 0, 0);\n    return oLocalDate;\n  }\n  toUTCJSDate() {\n    // Use this._oUDate.getTime()(returns the same point of time regardless calendar type)  instead of\n    // this._oUDate's getters to avoid non-gregorian Year, Month and Date to be used to construct a Gregorian date\n    const oUTCDate = UI5Date.getInstance(this._oUDate.getTime());\n    oUTCDate.setUTCHours(0, 0, 0, 0);\n    return oUTCDate;\n  }\n  toString() {\n    return `${this._oUDate.sCalendarType}: ${this.getYear()}/${this.getMonth() + 1}/${this.getDate()}`;\n  }\n  valueOf() {\n    return this._oUDate.getTime();\n  }\n  static fromLocalJSDate(oJSDate, sCalendarType) {\n    // Cross frame check for a date should be performed here otherwise setDateValue would fail in OPA tests\n    // because Date object in the test is different than the Date object in the application (due to the iframe).\n    // We can use jQuery.type or this method:\n    function isValidDate(date) {\n      return date && Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN(date); // eslint-disable-line\n    }\n    if (!isValidDate(oJSDate)) {\n      throw new Error(`Date parameter must be a JavaScript Date object: [${oJSDate}].`);\n    }\n    return new CalendarDate(oJSDate.getFullYear(), oJSDate.getMonth(), oJSDate.getDate(), sCalendarType);\n  }\n  static fromTimestamp(iTimestamp, sCalendarType) {\n    const oCalDate = new CalendarDate(0, 0, 1);\n    let oUDate;\n    try {\n      oUDate = UniversalDate.getInstance(UI5Date.getInstance(iTimestamp), sCalendarType);\n    } catch (e) {\n      oUDate = new Date(NaN); // UniversalDate.getInstance may now throw an Exception - keep the old behavior\n    }\n    oCalDate._oUDate = oUDate;\n    return oCalDate;\n  }\n}\nfunction createUniversalUTCDate(oDate, sCalendarType) {\n  if (sCalendarType) {\n    return UniversalDate.getInstance(createUTCDate(oDate), sCalendarType);\n  }\n  return new UniversalDate(createUTCDate(oDate).getTime());\n}\n/**\n * Creates a JavaScript UTC Date corresponding to the given JavaScript Date.\n * @param {Date} oDate JavaScript date object. Time related information is cut.\n * @returns {Date} JavaScript date created from the date object, but this time considered as UTC date information.\n */\nfunction createUTCDate(oDate) {\n  const oUTCDate = new Date(Date.UTC(0, 0, 1)); // no need to replace with UI5Date as we are creating a new UTC date object\n  oUTCDate.setUTCFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());\n  return oUTCDate;\n}\nfunction checkCalendarDate(oCalendarDate) {\n  if (!(oCalendarDate instanceof CalendarDate)) {\n    throw new Error(`Invalid calendar date: [${oCalendarDate}]. Expected: CalendarDate`);\n  }\n}\n/**\n * Verifies the given value is numeric like, i.e. 3, \"3\" and throws an error if it is not.\n * @param {any} value The value of any type to check. If null or undefined, this method throws an error.\n * @param {string} message The message to be used if an error is to be thrown\n * @throws will throw an error if the value is null or undefined or is not like a number\n */\nfunction checkNumericLike(value, message) {\n  if (value === undefined || value === Infinity || isNaN(value)) {\n    // eslint-disable-line\n    throw message;\n  }\n}\nexport default CalendarDate;","map":{"version":3,"names":["UI5Date","UniversalDate","CalendarDate","constructor","year","month","date","calendarType","aArgs","arguments","oJSDate","oNow","sCalendarType","length","getInstance","getFullYear","getMonth","getDate","Error","_oUDate","valueOf","setFullYear","getUTCFullYear","getUTCMonth","getUTCDate","setHours","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","createUniversalUTCDate","checkNumericLike","getYear","setYear","setUTCFullYear","setMonth","setUTCMonth","setDate","setUTCDate","getDay","getUTCDay","getCalendarType","isBefore","oCalendarDate","checkCalendarDate","isAfter","isSameOrBefore","isSameOrAfter","isSame","toLocalJSDate","oLocalDate","getTime","toUTCJSDate","oUTCDate","setUTCHours","toString","fromLocalJSDate","isValidDate","Object","prototype","call","isNaN","fromTimestamp","iTimestamp","oCalDate","oUDate","e","Date","NaN","oDate","createUTCDate","UTC","value","message","undefined","Infinity"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-localization/src/dates/CalendarDate.ts"],"sourcesContent":["import type CalendarType from \"@ui5/webcomponents-base/dist/types/CalendarType.js\";\nimport UI5Date from \"./UI5Date.js\";\nimport UniversalDate from \"./UniversalDate.js\";\n\nclass CalendarDate {\n\t_oUDate!: UI5Date | Date | UniversalDate;\n\n\tconstructor(year?: number | CalendarDate, month?: number | string, date?: number, calendarType?: string) { // eslint-disable-line\n\t\tlet aArgs = arguments, // eslint-disable-line\n\t\t\toJSDate: UI5Date | Date,\n\t\t\toNow: UI5Date | Date,\n\t\t\tsCalendarType!: CalendarType;\n\n\t\tswitch (aArgs.length) {\n\t\tcase 0: // defaults to the current date\n\t\t\toNow = UI5Date.getInstance();\n\t\t\treturn (this.constructor(oNow.getFullYear(), oNow.getMonth(), oNow.getDate()) as CalendarDate);\n\n\t\tcase 1: // CalendarDate\n\t\tcase 2: // CalendarDate, sCalendarType\n\t\t\tif (!(aArgs[0] instanceof CalendarDate)) {\n\t\t\t\tthrow new Error(\"Invalid arguments: the first argument must be of type CalendarDate.\");\n\t\t\t}\n\t\t\tsCalendarType = aArgs[1] ? aArgs[1] : (aArgs[0]._oUDate as UniversalDate).sCalendarType;\n\t\t\t// Use source.valueOf() (returns the same point of time regardless calendar type) instead of\n\t\t\t// source's getters to avoid non-gregorian Year, Month and Date may be used to construct a Gregorian date\n\t\t\toJSDate = UI5Date.getInstance(aArgs[0].valueOf());\n\n\t\t\t// Make this date really local. Now getters are safe.\n\t\t\toJSDate.setFullYear(oJSDate.getUTCFullYear(), oJSDate.getUTCMonth(), oJSDate.getUTCDate());\n\t\t\toJSDate.setHours(oJSDate.getUTCHours(), oJSDate.getUTCMinutes(), oJSDate.getUTCSeconds(), oJSDate.getUTCMilliseconds());\n\n\t\t\tthis._oUDate = createUniversalUTCDate(oJSDate, sCalendarType);\n\t\t\tbreak;\n\n\t\tcase 3: // year, month, date\n\t\tcase 4: // year, month, date, sCalendarType\n\t\t\tcheckNumericLike(aArgs[0] as number, `Invalid year: ${aArgs[0] as number}`);\n\t\t\tcheckNumericLike(aArgs[1] as number, `Invalid month: ${aArgs[1] as number}`);\n\t\t\tcheckNumericLike(aArgs[2] as number, `Invalid date: ${aArgs[2] as number}`);\n\n\t\t\toJSDate = UI5Date.getInstance(0, 0, 1);\n\t\t\toJSDate.setFullYear(aArgs[0] as number, aArgs[1] as number, aArgs[2] as number); // 2 digits year is not supported. If so, it is considered as full year as well.\n\n\t\t\tif (aArgs[3]) {\n\t\t\t\tsCalendarType = aArgs[3];\n\t\t\t}\n\t\t\tthis._oUDate = createUniversalUTCDate(oJSDate, sCalendarType);\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new Error(`${\"Invalid arguments. Accepted arguments are: 1) oCalendarDate, (optional)calendarType\"\n\t\t\t\t+ \"or 2) year, month, date, (optional) calendarType\"}${aArgs as unknown as string}`);\n\t\t}\n\t}\n\n\tgetYear() {\n\t\treturn this._oUDate.getUTCFullYear();\n\t}\n\n\tsetYear(year: number) {\n\t\tcheckNumericLike(year, `Invalid year: ${year}`);\n\t\tthis._oUDate.setUTCFullYear(year);\n\t\treturn this;\n\t}\n\n\tgetMonth() {\n\t\treturn this._oUDate.getUTCMonth();\n\t}\n\n\t/**\n\t * Sets the given month as ordinal month of the year.\n\t * @param {int} month An integer between 0 and 11, representing the months January through December( or their\n\t * equivalent month names for the given calendar).\n\t * If the specified value is is outside of the expected range, this method attempts to update the date information\n\t * accordingly. For example, if 12 is given as a month, the year will be incremented by 1, and 1 will be used for month.\n\t * @param {int} [date] An integer between 1 and 31, representing the day of the month, but other values are allowed.\n\t * 0 will result in the previous month's last day.\n\t * -1 will result in the day before the previous month's last day.\n\t * 32 will result in:\n\t * - first day of the next month if the current month has 31 days.\n\t * - second day of the next month if the current month has 30 days.\n\t * Other value will result in adding or subtracting days according to the given value.\n\t * @returns {sap.ui.unified.calendar.CalendarDate} <code>this</code> for method chaining.\n\t */\n\tsetMonth(month: number, date?: number) {\n\t\tcheckNumericLike(month, `Invalid month: ${month}`);\n\t\tif (date || date === 0) {\n\t\t\tcheckNumericLike(date, `Invalid date: ${date}`);\n\t\t\tthis._oUDate.setUTCMonth(month, date);\n\t\t} else {\n\t\t\tthis._oUDate.setUTCMonth(month);\n\t\t}\n\t\treturn this;\n\t}\n\n\tgetDate() {\n\t\treturn this._oUDate.getUTCDate();\n\t}\n\n\tsetDate(date: number) {\n\t\tcheckNumericLike(date, `Invalid date: ${date}`);\n\t\tthis._oUDate.setUTCDate(date);\n\t\treturn this;\n\t}\n\n\tgetDay() {\n\t\treturn this._oUDate.getUTCDay();\n\t}\n\n\tgetCalendarType() {\n\t\treturn (this._oUDate as UniversalDate).sCalendarType;\n\t}\n\n\tisBefore(oCalendarDate: CalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() < oCalendarDate.valueOf();\n\t}\n\n\tisAfter(oCalendarDate: CalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() > oCalendarDate.valueOf();\n\t}\n\n\tisSameOrBefore(oCalendarDate: CalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() <= oCalendarDate.valueOf();\n\t}\n\n\tisSameOrAfter(oCalendarDate: CalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() >= oCalendarDate.valueOf();\n\t}\n\n\tisSame(oCalendarDate: CalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() === oCalendarDate.valueOf();\n\t}\n\n\ttoLocalJSDate() {\n\t\t// Use this._oUDate.getTime()(returns the same point of time regardless calendar type)  instead of\n\t\t// this._oUDate's getters to avoid non-gregorian Year, Month and Date to be used to construct a Gregorian date\n\t\tconst oLocalDate = UI5Date.getInstance(this._oUDate.getTime());\n\n\t\t// Make this date really local. Now getters are safe.\n\t\toLocalDate.setFullYear(oLocalDate.getUTCFullYear(), oLocalDate.getUTCMonth(), oLocalDate.getUTCDate());\n\t\toLocalDate.setHours(0, 0, 0, 0);\n\n\t\treturn oLocalDate;\n\t}\n\n\ttoUTCJSDate() {\n\t\t// Use this._oUDate.getTime()(returns the same point of time regardless calendar type)  instead of\n\t\t// this._oUDate's getters to avoid non-gregorian Year, Month and Date to be used to construct a Gregorian date\n\t\tconst oUTCDate = UI5Date.getInstance(this._oUDate.getTime());\n\t\toUTCDate.setUTCHours(0, 0, 0, 0);\n\n\t\treturn oUTCDate;\n\t}\n\n\ttoString() {\n\t\treturn `${(this._oUDate as UniversalDate).sCalendarType}: ${this.getYear()}/${this.getMonth() + 1}/${this.getDate()}`;\n\t}\n\n\tvalueOf() {\n\t\treturn this._oUDate.getTime();\n\t}\n\n\tstatic fromLocalJSDate(oJSDate: Date | UI5Date, sCalendarType?: `${CalendarType}`) {\n\t\t// Cross frame check for a date should be performed here otherwise setDateValue would fail in OPA tests\n\t\t// because Date object in the test is different than the Date object in the application (due to the iframe).\n\t\t// We can use jQuery.type or this method:\n\t\tfunction isValidDate(date: Date | UI5Date) {\n\t\t\treturn date && Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN(date as unknown as number); // eslint-disable-line\n\t\t}\n\t\tif (!isValidDate(oJSDate)) {\n\t\t\tthrow new Error(`Date parameter must be a JavaScript Date object: [${oJSDate as unknown as string}].`);\n\t\t}\n\t\treturn new CalendarDate(oJSDate.getFullYear(), oJSDate.getMonth(), oJSDate.getDate(), sCalendarType);\n\t}\n\n\tstatic fromTimestamp(iTimestamp: number, sCalendarType?: `${CalendarType}`) {\n\t\tconst oCalDate = new CalendarDate(0, 0, 1);\n\t\tlet oUDate;\n\t\ttry {\n\t\t\toUDate = UniversalDate.getInstance(UI5Date.getInstance(iTimestamp), sCalendarType);\n\t\t} catch (e) {\n\t\t\toUDate = new Date(NaN); // UniversalDate.getInstance may now throw an Exception - keep the old behavior\n\t\t}\n\t\toCalDate._oUDate = oUDate;\n\t\treturn oCalDate;\n\t}\n}\n\nfunction createUniversalUTCDate(oDate: UI5Date | Date, sCalendarType: `${CalendarType}`) {\n\tif (sCalendarType) {\n\t\treturn UniversalDate.getInstance(createUTCDate(oDate), sCalendarType);\n\t}\n\treturn new UniversalDate(createUTCDate(oDate).getTime());\n}\n\n/**\n * Creates a JavaScript UTC Date corresponding to the given JavaScript Date.\n * @param {Date} oDate JavaScript date object. Time related information is cut.\n * @returns {Date} JavaScript date created from the date object, but this time considered as UTC date information.\n */\nfunction createUTCDate(oDate: UI5Date | Date) {\n\tconst oUTCDate = new Date(Date.UTC(0, 0, 1)); // no need to replace with UI5Date as we are creating a new UTC date object\n\n\toUTCDate.setUTCFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());\n\n\treturn oUTCDate;\n}\n\nfunction checkCalendarDate(oCalendarDate: CalendarDate) {\n\tif (!(oCalendarDate instanceof CalendarDate)) {\n\t\tthrow new Error(`Invalid calendar date: [${oCalendarDate as unknown as string}]. Expected: CalendarDate`);\n\t}\n}\n\n/**\n * Verifies the given value is numeric like, i.e. 3, \"3\" and throws an error if it is not.\n * @param {any} value The value of any type to check. If null or undefined, this method throws an error.\n * @param {string} message The message to be used if an error is to be thrown\n * @throws will throw an error if the value is null or undefined or is not like a number\n */\nfunction checkNumericLike(value: any, message: string) {\n\tif (value === undefined || value === Infinity || isNaN(value)) { // eslint-disable-line\n\t\tthrow message;\n\t}\n}\n\nexport default CalendarDate;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}