{"ast":null,"code":"\"use strict\";\n\nconst a = new Map(),\n  t = new Map();\nt.set(\"S\", [0, 599]), t.set(\"M\", [600, 1023]), t.set(\"L\", [1024, 1439]), t.set(\"XL\", [1440, 1 / 0]);\nvar S = (e => (e.RANGE_4STEPS = \"4Step\", e))(S || {});\nconst o = (r, e) => {\n    a.set(r, e);\n  },\n  c = function (r) {\n    let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.innerWidth;\n    let n = a.get(r);\n    n || (n = a.get(\"4Step\"));\n    let g;\n    const s = Math.floor(e);\n    return n.forEach((R, E) => {\n      s >= R[0] && s <= R[1] && (g = E);\n    }), g || [...n.keys()][0];\n  },\n  i = {\n    RANGESETS: S,\n    initRangeSet: o,\n    getCurrentRange: c\n  };\ni.initRangeSet(i.RANGESETS.RANGE_4STEPS, t);\nexport default i;","map":{"version":3,"names":["a","Map","t","set","S","e","RANGE_4STEPS","o","initRangeSet","r","c","getCurrentRange","arguments","length","undefined","window","innerWidth","n","get","g","s","Math","floor","forEach","R","E","keys","i","RANGESETS"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-base/src/MediaRange.ts"],"sourcesContent":["type Range = Map<string, Array<number>>;\n\nconst mediaRanges = new Map<string, Range>();\n\nconst DEAFULT_RANGE_SET: Range = new Map<string, Array<number>>();\nDEAFULT_RANGE_SET.set(\"S\", [0, 599]);\nDEAFULT_RANGE_SET.set(\"M\", [600, 1023]);\nDEAFULT_RANGE_SET.set(\"L\", [1024, 1439]);\nDEAFULT_RANGE_SET.set(\"XL\", [1440, Infinity]);\n\n/**\n * Enumeration containing the names and settings of predefined screen width media query range sets.\n *\n * @public\n */\n enum RANGESETS {\n\t/**\n\t * A 4-step range set (S-M-L-XL).\n\t *\n\t * The ranges of this set are:\n\t *\n\t * - `\"S\"`: For screens smaller than 600 pixels.\n\t * - `\"M\"`: For screens greater than or equal to 600 pixels and smaller than 1024 pixels.\n\t * - `\"L\"`: For screens greater than or equal to 1024 pixels and smaller than 1440 pixels.\n\t * - `\"XL\"`: For screens greater than or equal to 1440 pixels.\n\t *\n\t *\n\t * @public\n\t */\n\tRANGE_4STEPS = \"4Step\",\n}\n\n/**\n * Initializes a screen width media query range set.\n *\n * This initialization step makes the range set ready to be used for one of the other functions in namespace `MediaRange`.\n *\n * A range set can be defined as shown in the following example:\n * ```\n * MediaRange.initRangeSet(\"MyRangeSet\", [200, 400], [\"Small\", \"Medium\", \"Large\"]);\n * ```\n * This example defines the following named ranges:\n *\n * - `\"Small\"`: For screens smaller than 200 pixels.\n * - `\"Medium\"`: For screens greater than or equal to 200 pixels and smaller than 400 pixels.\n * - `\"Large\"`: For screens greater than or equal to 400 pixels.\n *\n *\n * @param name The name of the range set to be initialized.\n * The name must be a valid id and consist only of letters and numeric digits.\n * @param range The given range set.\n */\nconst initRangeSet = (name: string, range: Range) => {\n\tmediaRanges.set(name, range);\n};\n\n/**\n * Returns information about the current active range of the range set with the given name.\n *\n * If the optional parameter `width` is given, the active range will be determined for that width,\n * otherwise it is determined for the current window size.\n *\n * @param name The name of the range set. The range set must be initialized beforehand ({@link MediaRange.initRangeSet})\n * @param [width] An optional width, based on which the range should be determined;\n * If `width` is not provided, the window size will be used.\n * @returns The name of the current active interval of the range set.\n * @public\n */\nconst getCurrentRange = (name: string, width = window.innerWidth): string => {\n\tlet rangeSet = mediaRanges.get(name);\n\n\tif (!rangeSet) {\n\t\trangeSet = mediaRanges.get(RANGESETS.RANGE_4STEPS)!;\n\t}\n\n\tlet currentRangeName;\n\tconst effectiveWidth = Math.floor(width);\n\n\trangeSet.forEach((value, key) => {\n\t\tif (effectiveWidth >= value[0] && effectiveWidth <= value[1]) {\n\t\t\tcurrentRangeName = key;\n\t\t}\n\t});\n\n\treturn currentRangeName || [...rangeSet.keys()][0];\n};\n\n/**\n * API for screen width changes.\n */\nconst MediaRange = {\n\tRANGESETS,\n\tinitRangeSet,\n\tgetCurrentRange,\n};\n\nMediaRange.initRangeSet(MediaRange.RANGESETS.RANGE_4STEPS, DEAFULT_RANGE_SET);\n\nexport default MediaRange;\n"],"mappings":";;AAEA,MAAMA,CAAA,GAAc,IAAIC,GAAA;EAElBC,CAAA,GAA2B,IAAID,GAAA;AACrCC,CAAA,CAAkBC,GAAA,CAAI,KAAK,CAAC,GAAG,GAAG,CAAC,GACnCD,CAAA,CAAkBC,GAAA,CAAI,KAAK,CAAC,KAAK,IAAI,CAAC,GACtCD,CAAA,CAAkBC,GAAA,CAAI,KAAK,CAAC,MAAM,IAAI,CAAC,GACvCD,CAAA,CAAkBC,GAAA,CAAI,MAAM,CAAC,MAAM,KAAQ,CAAC;AAO3C,IAAKC,CAAA,IAAAC,CAAA,KAcLA,CAAA,CAAAC,YAAA,GAAe,SAdVD,CAAA,GAAAD,CAAA;AAqCN,MAAMG,CAAA,GAAeC,CAACC,CAAA,EAAcJ,CAAA,KAAiB;IACpDL,CAAA,CAAYG,GAAA,CAAIM,CAAA,EAAMJ,CAAK,CAC5B;EAAA;EAcMK,CAAA,GAAkB,SAAAC,CAACF,CAAA,EAAoD;IAAA,IAAtCJ,CAAA,GAAAO,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAQG,MAAA,CAAOC,UAAA;IACrD,IAAIC,CAAA,GAAWjB,CAAA,CAAYkB,GAAA,CAAIT,CAAI;IAE9BQ,CAAA,KACJA,CAAA,GAAWjB,CAAA,CAAYkB,GAAA,CAAI,OAAsB;IAGlD,IAAIC,CAAA;IACJ,MAAMC,CAAA,GAAiBC,IAAA,CAAKC,KAAA,CAAMjB,CAAK;IAEvC,OAAAY,CAAA,CAASM,OAAA,CAAQ,CAACC,CAAA,EAAOC,CAAA,KAAQ;MAC5BL,CAAA,IAAkBI,CAAA,CAAM,CAAC,KAAKJ,CAAA,IAAkBI,CAAA,CAAM,CAAC,MAC1DL,CAAA,GAAmBM,CAAA,CAErB;IAAA,CAAC,GAEMN,CAAA,IAAoB,CAAC,GAAGF,CAAA,CAASS,IAAA,CAAK,CAAC,EAAE,CAAC,CAClD;EAAA;EAKMC,CAAA,GAAa;IAClBC,SAAA,EAAAxB,CAAA;IACAI,YAAA,EAAAD,CAAA;IACAI,eAAA,EAAAD;EACD;AAEAiB,CAAA,CAAWnB,YAAA,CAAamB,CAAA,CAAWC,SAAA,CAAUtB,YAAA,EAAcJ,CAAiB;AAE5E,eAAeyB,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}