{"ast":null,"code":"\"use strict\";\n\n/**\n* @license\n* Copyright 2018 Google LLC\n* SPDX-License-Identifier: BSD-3-Clause\n*/\nimport { noChange as o } from \"lit-html\";\nimport { directive as l, Directive as n, PartType as u } from \"lit-html/directive.js\";\nclass p extends n {\n  constructor(r) {\n    var t;\n    if (super(r), r.type !== u.ATTRIBUTE || r.name !== \"style\" || ((t = r.strings) === null || t === void 0 ? void 0 : t.length) > 2) throw new Error(\"The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.\");\n  }\n  render(r) {\n    return \"\";\n  }\n  update(r, _ref) {\n    let [t] = _ref;\n    const {\n      style: i\n    } = r.element;\n    if (this._previousStyleProperties === void 0) {\n      this._previousStyleProperties = new Set();\n      for (const e in t) this._previousStyleProperties.add(e);\n    }\n    this._previousStyleProperties.forEach(e => {\n      t[e] == null && (this._previousStyleProperties.delete(e), e.includes(\"-\") ? i.removeProperty(e) : i[e] = \"\");\n    });\n    for (const e in t) {\n      const s = t[e];\n      s != null && (this._previousStyleProperties.add(e), e.includes(\"-\") ? i.setProperty(e, s) : i[e] = s);\n    }\n    return o;\n  }\n}\nexport const styleMap = l(p);","map":{"version":3,"names":["noChange","o","directive","l","Directive","n","PartType","u","p","constructor","r","t","type","ATTRIBUTE","name","strings","length","Error","render","update","_ref","style","i","element","_previousStyleProperties","Set","e","add","forEach","delete","includes","removeProperty","s","setProperty","styleMap"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-base/src/renderer/directives/style-map.ts"],"sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * This is the original style-map.js directive from lit-html 2 with the only difference that \"render\" is not called even for the first rendering (update is used instead)\n */\n\nimport { noChange } from 'lit-html';\nimport { directive, Directive, PartType, } from 'lit-html/directive.js';\nclass StyleMapDirective extends Directive {\n\tconstructor(partInfo) {\n\t\tvar _a;\n\t\tsuper(partInfo);\n\t\tif (partInfo.type !== PartType.ATTRIBUTE ||\n\t\t\tpartInfo.name !== 'style' ||\n\t\t\t((_a = partInfo.strings) === null || _a === void 0 ? void 0 : _a.length) > 2) {\n\t\t\tthrow new Error('The `styleMap` directive must be used in the `style` attribute ' +\n\t\t\t\t'and must be the only part in the attribute.');\n\t\t}\n\t}\n\trender(styleInfo) {\n\t\treturn \"\";\n\t}\n\tupdate(part, [styleInfo]) {\n\t\tconst { style } = part.element;\n\t\tif (this._previousStyleProperties === undefined) {\n\t\t\tthis._previousStyleProperties = new Set();\n\t\t\tfor (const name in styleInfo) {\n\t\t\t\tthis._previousStyleProperties.add(name);\n\t\t\t}\n\t\t\t// return this.render(styleInfo);\n\t\t}\n\t\t// Remove old properties that no longer exist in styleInfo\n\t\t// We use forEach() instead of for-of so that re don't require down-level\n\t\t// iteration.\n\t\tthis._previousStyleProperties.forEach((name) => {\n\t\t\t// If the name isn't in styleInfo or it's null/undefined\n\t\t\tif (styleInfo[name] == null) {\n\t\t\t\tthis._previousStyleProperties.delete(name);\n\t\t\t\tif (name.includes('-')) {\n\t\t\t\t\tstyle.removeProperty(name);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Note reset using empty string (vs null) as IE11 does not always\n\t\t\t\t\t// reset via null (https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style#setting_styles)\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\t\tstyle[name] = '';\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t// Add or update properties\n\t\tfor (const name in styleInfo) {\n\t\t\tconst value = styleInfo[name];\n\t\t\tif (value != null) {\n\t\t\t\tthis._previousStyleProperties.add(name);\n\t\t\t\tif (name.includes('-')) {\n\t\t\t\t\tstyle.setProperty(name, value);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\t\tstyle[name] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn noChange;\n\t}\n}\n\nexport const styleMap = directive(StyleMapDirective);\n"],"mappings":";;AAEA;AAAA;AAAA;AAAA;AAAA;AAUA,SAASA,QAAA,IAAAC,CAAA,QAAgB;AACzB,SAASC,SAAA,IAAAC,CAAA,EAAWC,SAAA,IAAAC,CAAA,EAAWC,QAAA,IAAAC,CAAA,QAAiB;AAChD,MAAMC,CAAA,SAA0BH,CAAU;EACzCI,YAAYC,CAAA,EAAU;IACrB,IAAIC,CAAA;IAEJ,IADA,MAAMD,CAAQ,GACVA,CAAA,CAASE,IAAA,KAASL,CAAA,CAASM,SAAA,IAC9BH,CAAA,CAASI,IAAA,KAAS,aAChBH,CAAA,GAAKD,CAAA,CAASK,OAAA,MAAa,QAAQJ,CAAA,KAAO,SAAS,SAASA,CAAA,CAAGK,MAAA,IAAU,GAC3E,MAAM,IAAIC,KAAA,CAAM,4GAC8B,CAEhD;EAAA;EACAC,OAAOR,CAAA,EAAW;IACjB,OAAO,EACR;EAAA;EACAS,OAAOT,CAAA,EAAAU,IAAA,EAAmB;IAAA,IAAb,CAACT,CAAS,IAAAS,IAAA;IACtB,MAAM;MAAEC,KAAA,EAAAC;IAAM,IAAIZ,CAAA,CAAKa,OAAA;IACvB,IAAI,KAAKC,wBAAA,KAA6B,QAAW;MAChD,KAAKA,wBAAA,GAA2B,IAAIC,GAAA;MACpC,WAAWC,CAAA,IAAQf,CAAA,EAClB,KAAKa,wBAAA,CAAyBG,GAAA,CAAID,CAAI,CAGxC;IAAA;IAIA,KAAKF,wBAAA,CAAyBI,OAAA,CAASF,CAAA,IAAS;MAE3Cf,CAAA,CAAUe,CAAI,KAAK,SACtB,KAAKF,wBAAA,CAAyBK,MAAA,CAAOH,CAAI,GACrCA,CAAA,CAAKI,QAAA,CAAS,GAAG,IACpBR,CAAA,CAAMS,cAAA,CAAeL,CAAI,IAMzBJ,CAAA,CAAMI,CAAI,IAAI,GAGjB;IAAA,CAAC;IAED,WAAWA,CAAA,IAAQf,CAAA,EAAW;MAC7B,MAAMqB,CAAA,GAAQrB,CAAA,CAAUe,CAAI;MACxBM,CAAA,IAAS,SACZ,KAAKR,wBAAA,CAAyBG,GAAA,CAAID,CAAI,GAClCA,CAAA,CAAKI,QAAA,CAAS,GAAG,IACpBR,CAAA,CAAMW,WAAA,CAAYP,CAAA,EAAMM,CAAK,IAI7BV,CAAA,CAAMI,CAAI,IAAIM,CAAA,CAGjB;IAAA;IACA,OAAO/B,CACR;EAAA;AACD;AAEO,aAAMiC,QAAA,GAAW/B,CAAA,CAAUK,CAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}