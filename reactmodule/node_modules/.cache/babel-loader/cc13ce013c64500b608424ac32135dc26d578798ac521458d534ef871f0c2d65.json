{"ast":null,"code":"import { actions } from 'react-table';\nexport const stateReducer = (state, action, _prevState, instance) => {\n  const {\n    payload\n  } = action;\n  if (state.isRtl && action.type === actions.columnResizing) {\n    const {\n      clientX\n    } = action;\n    const {\n      startX,\n      columnWidth,\n      headerIdWidths\n    } = state.columnResizing;\n    const deltaX = startX - clientX;\n    const percentageDeltaX = deltaX / columnWidth;\n    const newColumnWidths = {};\n    headerIdWidths.forEach(_ref => {\n      let [headerId, headerWidth] = _ref;\n      newColumnWidths[headerId] = Math.max(headerWidth + headerWidth * percentageDeltaX, 0);\n    });\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths\n        }\n      }\n    };\n  }\n  switch (action.type) {\n    case 'toggleRowExpanded':\n      // this flag disables scrolling to the top of the table if a table is collapsed\n      if (!state.expanded[action.id]) {\n        instance.dispatch({\n          type: 'ROW_COLLAPSED_FLAG',\n          payload: true\n        });\n      }\n      return state;\n    case 'TABLE_RESIZE':\n      // tableClientWidth is misleading, as only when scaled the `clientWidth` is used. In all other cases `getBoundingClientRect` is measuring the width.\n      return {\n        ...state,\n        tableClientWidth: payload.tableClientWidth\n      };\n    case 'VISIBLE_ROWS':\n      return {\n        ...state,\n        visibleRows: payload.visibleRows\n      };\n    case 'TABLE_SCROLLING_ENABLED':\n      return {\n        ...state,\n        isScrollable: payload.isScrollable\n      };\n    case 'SET_SELECTED_ROW_IDS':\n      return {\n        ...state,\n        selectedRowIds: payload.selectedRowIds\n      };\n    case 'SET_POPIN_COLUMNS':\n      return {\n        ...state,\n        popInColumns: payload\n      };\n    case 'INTERACTIVE_ROWS_HAVE_POPIN':\n      return {\n        ...state,\n        interactiveRowsHavePopIn: payload\n      };\n    case 'IS_RTL':\n      return {\n        ...state,\n        isRtl: payload.isRtl\n      };\n    case 'SUB_COMPONENTS_HEIGHT':\n      return {\n        ...state,\n        subComponentsHeight: payload\n      };\n    case 'TABLE_COL_RESIZED':\n      return {\n        ...state,\n        tableColResized: payload\n      };\n    case 'SELECT_ROW_CB':\n      return {\n        ...state,\n        selectedRowPayload: payload\n      };\n    case 'ROW_COLLAPSED_FLAG':\n      return {\n        ...state,\n        rowCollapsed: payload\n      };\n    case 'COLUMN_DND_START':\n      return {\n        ...state,\n        dndColumn: payload\n      };\n    case 'COLUMN_DND_END':\n      return {\n        ...state,\n        dndColumn: ''\n      };\n    // fallback if the component wasn't ready yet for scrolling (elements are not initialized), e.g. when calling `.scrollToItem` on mount\n    case 'TRIGGER_PROG_SCROLL':\n      return {\n        ...state,\n        triggerScroll: payload\n      };\n    case 'AUTO_RESIZE':\n      return {\n        ...state,\n        columnResizing: {\n          ...state.columnResizing,\n          columnWidths: {\n            ...state.columnResizing.columnWidths,\n            ...payload\n          }\n        }\n      };\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["actions","stateReducer","state","action","_prevState","instance","payload","isRtl","type","columnResizing","clientX","startX","columnWidth","headerIdWidths","deltaX","percentageDeltaX","newColumnWidths","forEach","_ref","headerId","headerWidth","Math","max","columnWidths","expanded","id","dispatch","tableClientWidth","visibleRows","isScrollable","selectedRowIds","popInColumns","interactiveRowsHavePopIn","subComponentsHeight","tableColResized","selectedRowPayload","rowCollapsed","dndColumn","triggerScroll"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-react/dist/components/AnalyticalTable/tableReducer/stateReducer.js"],"sourcesContent":["import { actions } from 'react-table';\nexport const stateReducer = (state, action, _prevState, instance) => {\n  const {\n    payload\n  } = action;\n  if (state.isRtl && action.type === actions.columnResizing) {\n    const {\n      clientX\n    } = action;\n    const {\n      startX,\n      columnWidth,\n      headerIdWidths\n    } = state.columnResizing;\n    const deltaX = startX - clientX;\n    const percentageDeltaX = deltaX / columnWidth;\n    const newColumnWidths = {};\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(headerWidth + headerWidth * percentageDeltaX, 0);\n    });\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths\n        }\n      }\n    };\n  }\n  switch (action.type) {\n    case 'toggleRowExpanded':\n      // this flag disables scrolling to the top of the table if a table is collapsed\n      if (!state.expanded[action.id]) {\n        instance.dispatch({\n          type: 'ROW_COLLAPSED_FLAG',\n          payload: true\n        });\n      }\n      return state;\n    case 'TABLE_RESIZE':\n      // tableClientWidth is misleading, as only when scaled the `clientWidth` is used. In all other cases `getBoundingClientRect` is measuring the width.\n      return {\n        ...state,\n        tableClientWidth: payload.tableClientWidth\n      };\n    case 'VISIBLE_ROWS':\n      return {\n        ...state,\n        visibleRows: payload.visibleRows\n      };\n    case 'TABLE_SCROLLING_ENABLED':\n      return {\n        ...state,\n        isScrollable: payload.isScrollable\n      };\n    case 'SET_SELECTED_ROW_IDS':\n      return {\n        ...state,\n        selectedRowIds: payload.selectedRowIds\n      };\n    case 'SET_POPIN_COLUMNS':\n      return {\n        ...state,\n        popInColumns: payload\n      };\n    case 'INTERACTIVE_ROWS_HAVE_POPIN':\n      return {\n        ...state,\n        interactiveRowsHavePopIn: payload\n      };\n    case 'IS_RTL':\n      return {\n        ...state,\n        isRtl: payload.isRtl\n      };\n    case 'SUB_COMPONENTS_HEIGHT':\n      return {\n        ...state,\n        subComponentsHeight: payload\n      };\n    case 'TABLE_COL_RESIZED':\n      return {\n        ...state,\n        tableColResized: payload\n      };\n    case 'SELECT_ROW_CB':\n      return {\n        ...state,\n        selectedRowPayload: payload\n      };\n    case 'ROW_COLLAPSED_FLAG':\n      return {\n        ...state,\n        rowCollapsed: payload\n      };\n    case 'COLUMN_DND_START':\n      return {\n        ...state,\n        dndColumn: payload\n      };\n    case 'COLUMN_DND_END':\n      return {\n        ...state,\n        dndColumn: ''\n      };\n    // fallback if the component wasn't ready yet for scrolling (elements are not initialized), e.g. when calling `.scrollToItem` on mount\n    case 'TRIGGER_PROG_SCROLL':\n      return {\n        ...state,\n        triggerScroll: payload\n      };\n    case 'AUTO_RESIZE':\n      return {\n        ...state,\n        columnResizing: {\n          ...state.columnResizing,\n          columnWidths: {\n            ...state.columnResizing.columnWidths,\n            ...payload\n          }\n        }\n      };\n    default:\n      return state;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}