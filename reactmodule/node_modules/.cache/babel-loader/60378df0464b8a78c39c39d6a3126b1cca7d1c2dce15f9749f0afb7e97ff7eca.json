{"ast":null,"code":"\"use strict\";\n\nimport { getNoConflict as i } from \"../InitialConfiguration.js\";\nimport { attachConfigurationReset as r } from \"./ConfigurationReset.js\";\nconst c = [\"value-changed\", \"click\"];\nlet e;\nr(() => {\n  e = void 0;\n});\nconst s = t => c.includes(t),\n  l = t => {\n    const n = o();\n    return !(typeof n != \"boolean\" && n.events && n.events.includes && n.events.includes(t));\n  },\n  o = () => (e === void 0 && (e = i()), e),\n  f = t => {\n    e = t;\n  },\n  a = t => {\n    const n = o();\n    return s(t) ? !1 : n === !0 ? !0 : !l(t);\n  };\nexport { o as getNoConflict, f as setNoConflict, a as skipOriginalEvent };","map":{"version":3,"names":["getNoConflict","i","attachConfigurationReset","r","c","e","s","t","includes","l","n","o","events","f","a","setNoConflict","skipOriginalEvent"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-base/src/config/NoConflict.ts"],"sourcesContent":["import { getNoConflict as getConfiguredNoConflict } from \"../InitialConfiguration.js\";\nimport { attachConfigurationReset } from \"./ConfigurationReset.js\";\n\n// Fire these events even with noConflict: true\nconst excludeList = [\n\t\"value-changed\",\n\t\"click\",\n];\n\ntype NoConflictData = boolean | { events: Array<string>};\n\nlet noConflict: NoConflictData | undefined;\n\nattachConfigurationReset(() => {\n\tnoConflict = undefined;\n});\n\nconst shouldFireOriginalEvent = (eventName: string) => {\n\treturn excludeList.includes(eventName);\n};\n\nconst shouldNotFireOriginalEvent = (eventName: string) => {\n\tconst nc = getNoConflict();\n\t// return !(nc.events && nc.events.includes && nc.events.includes(eventName));\n\treturn !(typeof nc !== \"boolean\" && nc.events && nc.events.includes && nc.events.includes(eventName));\n};\n\n/**\n * Returns if the \"noConflict\" configuration is set.\n * @public\n * @returns { NoConflictData }\n */\nconst getNoConflict = (): NoConflictData => {\n\tif (noConflict === undefined) {\n\t\tnoConflict = getConfiguredNoConflict();\n\t}\n\n\treturn noConflict;\n};\n\n/**\n * Sets the \"noConflict\" mode.\n * - When \"false\" (default value), all custom events are fired with and without the \"ui5-\" prefix.\n * - When \"true\", all custom events are fired with the \"ui5-\" prefix only.\n * - When an object is supplied, just the specified events will be fired with the \"ui5-\" prefix.\n * @public\n * @param { NoConflictData } noConflictData\n */\nconst setNoConflict = (noConflictData: NoConflictData) => {\n\tnoConflict = noConflictData;\n};\n\nconst skipOriginalEvent = (eventName: string) => {\n\tconst nc = getNoConflict();\n\n\t// Always fire these events\n\tif (shouldFireOriginalEvent(eventName)) {\n\t\treturn false;\n\t}\n\n\t// Read from the configuration\n\tif (nc === true) {\n\t\treturn true;\n\t}\n\n\treturn !shouldNotFireOriginalEvent(eventName);\n};\n\nexport {\n\tgetNoConflict,\n\tsetNoConflict,\n\tskipOriginalEvent,\n};\n"],"mappings":";;AAAA,SAASA,aAAA,IAAiBC,CAAA,QAA+B;AACzD,SAASC,wBAAA,IAAAC,CAAA,QAAgC;AAGzC,MAAMC,CAAA,GAAc,CACnB,iBACA,OACD;AAIA,IAAIC,CAAA;AAEJF,CAAA,CAAyB,MAAM;EAC9BE,CAAA,GAAa,MACd;AAAA,CAAC;AAED,MAAMC,CAAA,GAA2BC,CAAA,IACzBH,CAAA,CAAYI,QAAA,CAASD,CAAS;EAGhCE,CAAA,GAA8BF,CAAA,IAAsB;IACzD,MAAMG,CAAA,GAAKC,CAAA,CAAc;IAEzB,OAAO,EAAE,OAAOD,CAAA,IAAO,aAAaA,CAAA,CAAGE,MAAA,IAAUF,CAAA,CAAGE,MAAA,CAAOJ,QAAA,IAAYE,CAAA,CAAGE,MAAA,CAAOJ,QAAA,CAASD,CAAS,EACpG;EAAA;EAOMI,CAAA,GAAgBX,CAAA,MACjBK,CAAA,KAAe,WAClBA,CAAA,GAAaJ,CAAA,CAAwB,IAG/BI,CAAA;EAWFQ,CAAA,GAAiBN,CAAA,IAAmC;IACzDF,CAAA,GAAaE,CACd;EAAA;EAEMO,CAAA,GAAqBP,CAAA,IAAsB;IAChD,MAAMG,CAAA,GAAKC,CAAA,CAAc;IAGzB,OAAIL,CAAA,CAAwBC,CAAS,IAC7B,KAIJG,CAAA,KAAO,KACH,KAGD,CAACD,CAAA,CAA2BF,CAAS,CAC7C;EAAA;AAEA,SACCI,CAAA,IAAAX,aAAA,EACAa,CAAA,IAAAE,aAAA,EACAD,CAAA,IAAAE,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}