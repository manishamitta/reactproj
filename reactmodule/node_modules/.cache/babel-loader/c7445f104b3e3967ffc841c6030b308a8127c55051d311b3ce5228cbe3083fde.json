{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport \"@ui5/webcomponents-localization/dist/features/calendar/Gregorian.js\"; // default calendar for bundling\nimport { isEnter, isNumber } from \"@ui5/webcomponents-base/dist/Keys.js\";\nimport TimePickerInternals from \"./TimePickerInternals.js\";\nimport Input from \"./Input.js\";\nimport SegmentedButton from \"./SegmentedButton.js\";\nimport SegmentedButtonItem from \"./SegmentedButtonItem.js\";\nimport InputType from \"./types/InputType.js\";\nimport { TIMEPICKER_INPUTS_ENTER_HOURS, TIMEPICKER_INPUTS_ENTER_MINUTES, TIMEPICKER_INPUTS_ENTER_SECONDS } from \"./generated/i18n/i18n-defaults.js\";\n// Template\nimport TimeSelectionInputsTemplate from \"./generated/templates/TimeSelectionInputsTemplate.lit.js\";\n// Styles\nimport TimeSelectionInputsCss from \"./generated/themes/TimeSelectionInputs.css.js\";\n/**\n * @class\n *\n * ### Overview\n *\n * `ui5-time-selection-inputs` displays a popover with `ui5-input` components of type=\"number\" and an\n * optional a AM/PM `ui5-segmented-button` according to the display format given to the `ui5-time-picker`.\n * Using of numeric input components enables display of mobile devices' native numeric keyboard, which speeds up entering of the time.\n * The popup appears only on mobile devices when there is a tap on the `ui5-time-picker` input.\n *\n * This component should not be used separately.\n * @constructor\n * @extends TimePickerInternals\n * @abstract\n * @since 1.18.0\n * @private\n */\nlet TimeSelectionInputs = class TimeSelectionInputs extends TimePickerInternals {\n  constructor() {\n    super(...arguments);\n    this._editedInput = -1;\n  }\n  get enterHoursLabel() {\n    return TimePickerInternals.i18nBundle.getText(TIMEPICKER_INPUTS_ENTER_HOURS);\n  }\n  get enterMinutesLabel() {\n    return TimePickerInternals.i18nBundle.getText(TIMEPICKER_INPUTS_ENTER_MINUTES);\n  }\n  get enterSecondsLabel() {\n    return TimePickerInternals.i18nBundle.getText(TIMEPICKER_INPUTS_ENTER_SECONDS);\n  }\n  get _numberType() {\n    return InputType.Number;\n  }\n  get _isHoursInput() {\n    const key = this._componentKey(\"hours\");\n    return this._componentMap[key] === this._activeIndex;\n  }\n  get _is24HoursFormat() {\n    return this.formatPattern?.includes(\"HH\") || this.formatPattern?.includes(\"H\");\n  }\n  onBeforeRendering() {\n    this._createComponents();\n  }\n  _addNumericAttributes() {\n    this._entities.forEach((item, index) => {\n      const input = this._inputComponent(index);\n      if (input) {\n        const innerInput = this._innerInput(input);\n        innerInput.setAttribute(\"autocomplete\", \"off\");\n        innerInput.setAttribute(\"pattern\", \"[0-9]*\");\n        innerInput.setAttribute(\"inputmode\", \"numeric\");\n      }\n    });\n  }\n  /**\n   * Returns Input component by index or name.\n   * @param indexOrName the index or name of the component\n   * @returns component (if exists) or undefined\n   */\n  _inputComponent(indexOrName) {\n    const index = typeof indexOrName === \"string\" ? this._indexFromName(indexOrName) : indexOrName;\n    const entity = this._entities[index].entity;\n    return entity ? this.shadowRoot?.querySelector(`#${this._id}_input_${entity}`) : undefined;\n  }\n  /**\n   * Returns the inner input element DOM reference.\n   * @param input the Input component\n   * @returns inner input element\n   */\n  _innerInput(input) {\n    return input && input.getInputDOMRefSync();\n  }\n  /**\n   * Creates clock and button components according to the display format pattern.\n   */\n  _createComponents() {\n    let value;\n    this._entities = [];\n    this._periods = [];\n    this._componentMap = {\n      hours: -1,\n      minutes: -1,\n      seconds: -1\n    };\n    if (this._hasHoursComponent) {\n      // add Hours input\n      this._componentMap.hours = this._entities.length;\n      value = parseInt(this._hours);\n      this._entities.push({\n        \"entity\": \"hours\",\n        \"label\": this.enterHoursLabel,\n        \"value\": value,\n        \"stringValue\": this._editedInput === this._entities.length ? this._editedInputValue : this._formatNumberToString(value, this._zeroPaddedHours),\n        \"hasSeparator\": this._entities.length > 0,\n        \"prependZero\": this._zeroPaddedHours,\n        \"attributes\": {\n          \"min\": this._hoursConfiguration.minHour,\n          \"max\": this._hoursConfiguration.maxHour,\n          \"step\": 1\n        }\n      });\n    }\n    if (this._hasMinutesComponent) {\n      // add Minutes clock\n      this._componentMap.minutes = this._entities.length;\n      value = parseInt(this._minutes);\n      this._entities.push({\n        \"entity\": \"minutes\",\n        \"label\": this.enterMinutesLabel,\n        \"value\": value,\n        \"stringValue\": this._editedInput === this._entities.length ? this._editedInputValue : this._formatNumberToString(value, true),\n        \"hasSeparator\": this._entities.length > 0,\n        \"prependZero\": true,\n        \"attributes\": {\n          \"min\": 0,\n          \"max\": 59,\n          \"step\": 1\n        }\n      });\n    }\n    if (this._hasSecondsComponent) {\n      // add Seconds clock\n      this._componentMap.seconds = this._entities.length;\n      value = parseInt(this._seconds);\n      this._entities.push({\n        \"entity\": \"seconds\",\n        \"label\": this.enterSecondsLabel,\n        \"value\": value,\n        \"stringValue\": this._editedInput === this._entities.length ? this._editedInputValue : this._formatNumberToString(value, true),\n        \"hasSeparator\": this._entities.length > 0,\n        \"prependZero\": true,\n        \"attributes\": {\n          \"min\": 0,\n          \"max\": 59,\n          \"step\": 1\n        }\n      });\n    }\n    this._createPeriodComponent();\n  }\n  /**\n   * Switches to the specific input.\n   * @param index the index (in _entities array) of the input\n   * @private\n   */\n  _switchInput(index) {\n    if (index >= this._entities.length) {\n      index = 0;\n    }\n    this._inputComponent(index).focus();\n  }\n  /**\n   * Switches to the next input that can de focused.\n   * @param wrapAround whether to start with first clock after reaching the last one, or not\n   * @private\n   */\n  _switchNextInput() {\n    let wrapAround = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let activeInput = this._activeIndex;\n    const startActiveInput = activeInput;\n    if (!this._entities.length) {\n      return;\n    }\n    do {\n      activeInput++;\n      if (activeInput >= this._entities.length) {\n        activeInput = wrapAround ? 0 : this._entities.length - 1;\n      }\n      // false-positive finding of no-unmodified-loop-condition rule\n      // eslint-disable-next-line no-unmodified-loop-condition\n    } while (this._inputComponent(activeInput).disabled && activeInput !== startActiveInput && (wrapAround || activeInput < this._entities.length));\n    if (activeInput !== startActiveInput && !this._inputComponent(activeInput).disabled) {\n      this._switchInput(activeInput);\n    }\n  }\n  /**\n   * Return a value as string, formatted and prepended with zero if necessary.\n   * @param num A number to format\n   * @param prependZero Whether to prepend with zero or not\n   * @returns Formatted value\n   * @private\n   */\n  _formatNumberToString(num, prependZero) {\n    return num < 10 && prependZero ? `0${num}` : num.toString();\n  }\n  _onkeydown(evt) {\n    if (this._activeIndex === -1) {\n      return;\n    }\n    if (isEnter(evt)) {\n      // Accept the time and close the popover\n      this.fireEvent(\"close-inputs\");\n    } else if (isNumber(evt) && this._entities[this._activeIndex]) {\n      const char = evt.key;\n      const buffer = this._keyboardBuffer + char;\n      const bufferValue = parseInt(buffer);\n      evt.preventDefault();\n      this._resetCooldown(true);\n      if (bufferValue > this._entities[this._activeIndex].attributes.max) {\n        // value accumulated in the buffer (old entry + new entry) is greater than the input maximum value,\n        // so assign old entry to the current inut and then switch to the next input, and add new entry as an old value\n        this._inputChange(parseInt(this._keyboardBuffer));\n        this._switchNextInput();\n        this._keyboardBuffer = char;\n        this._inputChange(parseInt(char));\n        this._resetCooldown(true);\n      } else {\n        // value is less than clock's max value, so add new entry to the buffer\n        this._keyboardBuffer = buffer;\n        this._inputChange(parseInt(this._keyboardBuffer));\n        if (this._keyboardBuffer.length === 2 || parseInt(`${this._keyboardBuffer}0`) > this._entities[this._activeIndex].attributes.max) {\n          // if buffer length is 2, or buffer value + one more (any) number is greater than clock's max value\n          // there is no place for more entry - just set buffer as a value, and switch to the next clock\n          this._resetCooldown(this._keyboardBuffer.length !== 2);\n          this._keyboardBuffer = \"\";\n          this._switchNextInput();\n        }\n      }\n    }\n  }\n  /**\n   * Input 'change' event handler.\n   * @param value new value to set on active input\n   */\n  _inputChange(value) {\n    const stringValue = this._formatNumberToString(value, this._entities[this._activeIndex].prependZero);\n    if (this._activeIndex === -1) {\n      return;\n    }\n    value = parseInt(stringValue);\n    this._entities[this._activeIndex].value = value;\n    this._inputComponent(this._activeIndex).value = this._formatNumberToString(value, this._entities[this._activeIndex].prependZero);\n    switch (this._activeIndex) {\n      case this._componentMap.hours:\n        this._hoursChange(value);\n        break;\n      case this._componentMap.minutes:\n        this._minutesChange(value);\n        break;\n      case this._componentMap.seconds:\n        this._secondsChange(value);\n        break;\n    }\n  }\n  _onfocusin(e) {\n    const input = e.target;\n    const innerInput = this._innerInput(input);\n    this._editedInput = -1;\n    innerInput.select();\n    this._activeIndex = this._getIndexFromId(input.id);\n  }\n  _onfocusout() {\n    let value = this._inputComponent(this._activeIndex).value === \"\" ? 0 : this._entities[this._activeIndex].value;\n    this._editedInput = -1;\n    if (this._isHoursInput && !this._is24HoursFormat && value === 0) {\n      value = 12;\n    }\n    this._inputChange(value);\n    this._activeIndex = -1;\n  }\n  _oninput() {\n    const stringValue = this._inputComponent(this._activeIndex).value;\n    const value = stringValue === \"\" ? 0 : parseInt(stringValue);\n    if (value !== this._entities[this._activeIndex].value) {\n      this._editedInput = this._activeIndex;\n      this._editedInputValue = stringValue;\n      this._inputChange(value);\n      this._keyboardBuffer = stringValue;\n    }\n  }\n};\n__decorate([property({\n  type: Number\n})], TimeSelectionInputs.prototype, \"_editedInput\", void 0);\n__decorate([property()], TimeSelectionInputs.prototype, \"_editedInputValue\", void 0);\nTimeSelectionInputs = __decorate([customElement({\n  tag: \"ui5-time-selection-inputs\",\n  styles: TimeSelectionInputsCss,\n  template: TimeSelectionInputsTemplate,\n  dependencies: [Input, SegmentedButton, SegmentedButtonItem]\n})], TimeSelectionInputs);\nTimeSelectionInputs.define();\nexport default TimeSelectionInputs;","map":{"version":3,"names":["customElement","property","isEnter","isNumber","TimePickerInternals","Input","SegmentedButton","SegmentedButtonItem","InputType","TIMEPICKER_INPUTS_ENTER_HOURS","TIMEPICKER_INPUTS_ENTER_MINUTES","TIMEPICKER_INPUTS_ENTER_SECONDS","TimeSelectionInputsTemplate","TimeSelectionInputsCss","TimeSelectionInputs","constructor","_editedInput","enterHoursLabel","i18nBundle","getText","enterMinutesLabel","enterSecondsLabel","_numberType","Number","_isHoursInput","key","_componentKey","_componentMap","_activeIndex","_is24HoursFormat","formatPattern","includes","onBeforeRendering","_createComponents","_addNumericAttributes","_entities","forEach","item","index","input","_inputComponent","innerInput","_innerInput","setAttribute","indexOrName","_indexFromName","entity","shadowRoot","querySelector","_id","undefined","getInputDOMRefSync","value","_periods","hours","minutes","seconds","_hasHoursComponent","length","parseInt","_hours","push","_editedInputValue","_formatNumberToString","_zeroPaddedHours","_hoursConfiguration","minHour","maxHour","_hasMinutesComponent","_minutes","_hasSecondsComponent","_seconds","_createPeriodComponent","_switchInput","focus","_switchNextInput","wrapAround","arguments","activeInput","startActiveInput","disabled","num","prependZero","toString","_onkeydown","evt","fireEvent","char","buffer","_keyboardBuffer","bufferValue","preventDefault","_resetCooldown","attributes","max","_inputChange","stringValue","_hoursChange","_minutesChange","_secondsChange","_onfocusin","e","target","select","_getIndexFromId","id","_onfocusout","_oninput","__decorate","type","tag","styles","template","dependencies","define"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents/src/TimeSelectionInputs.ts"],"sourcesContent":["import customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\n\nimport \"@ui5/webcomponents-localization/dist/features/calendar/Gregorian.js\"; // default calendar for bundling\nimport {\n\tisEnter,\n\tisNumber,\n} from \"@ui5/webcomponents-base/dist/Keys.js\";\nimport TimePickerInternals from \"./TimePickerInternals.js\";\nimport Input from \"./Input.js\";\nimport SegmentedButton from \"./SegmentedButton.js\";\nimport SegmentedButtonItem from \"./SegmentedButtonItem.js\";\n\nimport InputType from \"./types/InputType.js\";\n\nimport {\n\tTIMEPICKER_INPUTS_ENTER_HOURS,\n\tTIMEPICKER_INPUTS_ENTER_MINUTES,\n\tTIMEPICKER_INPUTS_ENTER_SECONDS,\n} from \"./generated/i18n/i18n-defaults.js\";\n\n// Template\nimport TimeSelectionInputsTemplate from \"./generated/templates/TimeSelectionInputsTemplate.lit.js\";\n\n// Styles\nimport TimeSelectionInputsCss from \"./generated/themes/TimeSelectionInputs.css.js\";\n\n/**\n * @class\n *\n * ### Overview\n *\n * `ui5-time-selection-inputs` displays a popover with `ui5-input` components of type=\"number\" and an\n * optional a AM/PM `ui5-segmented-button` according to the display format given to the `ui5-time-picker`.\n * Using of numeric input components enables display of mobile devices' native numeric keyboard, which speeds up entering of the time.\n * The popup appears only on mobile devices when there is a tap on the `ui5-time-picker` input.\n *\n * This component should not be used separately.\n * @constructor\n * @extends TimePickerInternals\n * @abstract\n * @since 1.18.0\n * @private\n */\n@customElement({\n\ttag: \"ui5-time-selection-inputs\",\n\tstyles: TimeSelectionInputsCss,\n\ttemplate: TimeSelectionInputsTemplate,\n\tdependencies: [\n\t\tInput,\n\t\tSegmentedButton,\n\t\tSegmentedButtonItem,\n\t],\n})\n\nclass TimeSelectionInputs extends TimePickerInternals {\n\t@property({ type: Number })\n\t_editedInput = -1;\n\n\t@property()\n\t_editedInputValue?: string;\n\n\tget enterHoursLabel() {\n\t\treturn TimePickerInternals.i18nBundle.getText(TIMEPICKER_INPUTS_ENTER_HOURS);\n\t}\n\n\tget enterMinutesLabel() {\n\t\treturn TimePickerInternals.i18nBundle.getText(TIMEPICKER_INPUTS_ENTER_MINUTES);\n\t}\n\n\tget enterSecondsLabel() {\n\t\treturn TimePickerInternals.i18nBundle.getText(TIMEPICKER_INPUTS_ENTER_SECONDS);\n\t}\n\n\tget _numberType() {\n\t\treturn InputType.Number;\n\t}\n\n\tget _isHoursInput() {\n\t\tconst key = this._componentKey(\"hours\");\n\t\treturn this._componentMap[key] === this._activeIndex;\n\t}\n\n\tget _is24HoursFormat() {\n\t\treturn this.formatPattern?.includes(\"HH\") || this.formatPattern?.includes(\"H\");\n\t}\n\n\tonBeforeRendering() {\n\t\tthis._createComponents();\n\t}\n\n\t_addNumericAttributes() {\n\t\tthis._entities.forEach((item, index) => {\n\t\t\tconst input = this._inputComponent(index);\n\t\t\tif (input) {\n\t\t\t\tconst innerInput = this._innerInput(input)!;\n\t\t\t\tinnerInput.setAttribute(\"autocomplete\", \"off\");\n\t\t\t\tinnerInput.setAttribute(\"pattern\", \"[0-9]*\");\n\t\t\t\tinnerInput.setAttribute(\"inputmode\", \"numeric\");\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Returns Input component by index or name.\n\t * @param indexOrName the index or name of the component\n\t * @returns component (if exists) or undefined\n\t */\n\t_inputComponent(indexOrName: number | string): Input | undefined | null {\n\t\tconst index = typeof indexOrName === \"string\" ? this._indexFromName(indexOrName) : indexOrName;\n\t\tconst entity = this._entities[index].entity;\n\t\treturn entity ? this.shadowRoot?.querySelector<Input>(`#${this._id}_input_${entity}`) : undefined;\n\t}\n\n\t/**\n\t * Returns the inner input element DOM reference.\n\t * @param input the Input component\n\t * @returns inner input element\n\t */\n\t_innerInput(input: Input): HTMLInputElement | null {\n\t\treturn input && input.getInputDOMRefSync();\n\t}\n\n\t/**\n\t * Creates clock and button components according to the display format pattern.\n\t */\n\t_createComponents() {\n\t\tlet value;\n\n\t\tthis._entities = [];\n\t\tthis._periods = [];\n\t\tthis._componentMap = {\n\t\t\thours: -1,\n\t\t\tminutes: -1,\n\t\t\tseconds: -1,\n\t\t};\n\t\tif (this._hasHoursComponent) {\n\t\t\t// add Hours input\n\t\t\tthis._componentMap.hours = this._entities.length;\n\t\t\tvalue = parseInt(this._hours);\n\t\t\tthis._entities.push({\n\t\t\t\t\"entity\": \"hours\",\n\t\t\t\t\"label\": this.enterHoursLabel,\n\t\t\t\t\"value\": value,\n\t\t\t\t\"stringValue\": this._editedInput === this._entities.length ? this._editedInputValue : this._formatNumberToString(value, this._zeroPaddedHours),\n\t\t\t\t\"hasSeparator\": this._entities.length > 0,\n\t\t\t\t\"prependZero\": this._zeroPaddedHours,\n\t\t\t\t\"attributes\": {\n\t\t\t\t\t\"min\": this._hoursConfiguration.minHour,\n\t\t\t\t\t\"max\": this._hoursConfiguration.maxHour,\n\t\t\t\t\t\"step\": 1,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tif (this._hasMinutesComponent) {\n\t\t\t// add Minutes clock\n\t\t\tthis._componentMap.minutes = this._entities.length;\n\t\t\tvalue = parseInt(this._minutes);\n\t\t\tthis._entities.push({\n\t\t\t\t\"entity\": \"minutes\",\n\t\t\t\t\"label\": this.enterMinutesLabel,\n\t\t\t\t\"value\": value,\n\t\t\t\t\"stringValue\": this._editedInput === this._entities.length ? this._editedInputValue : this._formatNumberToString(value, true),\n\t\t\t\t\"hasSeparator\": this._entities.length > 0,\n\t\t\t\t\"prependZero\": true,\n\t\t\t\t\"attributes\": {\n\t\t\t\t\t\"min\": 0,\n\t\t\t\t\t\"max\": 59,\n\t\t\t\t\t\"step\": 1,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tif (this._hasSecondsComponent) {\n\t\t\t// add Seconds clock\n\t\t\tthis._componentMap.seconds = this._entities.length;\n\t\t\tvalue = parseInt(this._seconds);\n\t\t\tthis._entities.push({\n\t\t\t\t\"entity\": \"seconds\",\n\t\t\t\t\"label\": this.enterSecondsLabel,\n\t\t\t\t\"value\": value,\n\t\t\t\t\"stringValue\": this._editedInput === this._entities.length ? this._editedInputValue : this._formatNumberToString(value, true),\n\t\t\t\t\"hasSeparator\": this._entities.length > 0,\n\t\t\t\t\"prependZero\": true,\n\t\t\t\t\"attributes\": {\n\t\t\t\t\t\"min\": 0,\n\t\t\t\t\t\"max\": 59,\n\t\t\t\t\t\"step\": 1,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tthis._createPeriodComponent();\n\t}\n\n\t/**\n\t * Switches to the specific input.\n\t * @param index the index (in _entities array) of the input\n\t * @private\n\t */\n\t_switchInput(index: number) {\n\t\tif (index >= this._entities.length) {\n\t\t\tindex = 0;\n\t\t}\n\t\tthis._inputComponent(index)!.focus();\n\t}\n\n\t/**\n\t * Switches to the next input that can de focused.\n\t * @param wrapAround whether to start with first clock after reaching the last one, or not\n\t * @private\n\t */\n\t_switchNextInput(wrapAround = false) {\n\t\tlet activeInput = this._activeIndex;\n\t\tconst startActiveInput = activeInput;\n\n\t\tif (!this._entities.length) {\n\t\t\treturn;\n\t\t}\n\t\tdo {\n\t\t\tactiveInput++;\n\t\t\tif (activeInput >= this._entities.length) {\n\t\t\t\tactiveInput = wrapAround ? 0 : this._entities.length - 1;\n\t\t\t}\n\t\t// false-positive finding of no-unmodified-loop-condition rule\n\t\t// eslint-disable-next-line no-unmodified-loop-condition\n\t\t} while (this._inputComponent(activeInput)!.disabled && activeInput !== startActiveInput && (wrapAround || activeInput < this._entities.length));\n\t\tif (activeInput !== startActiveInput && !this._inputComponent(activeInput)!.disabled) {\n\t\t\tthis._switchInput(activeInput);\n\t\t}\n\t}\n\n\t/**\n\t * Return a value as string, formatted and prepended with zero if necessary.\n\t * @param num A number to format\n\t * @param prependZero Whether to prepend with zero or not\n\t * @returns Formatted value\n\t * @private\n\t */\n\t_formatNumberToString(num: number, prependZero: boolean): string {\n\t\treturn num < 10 && prependZero ? `0${num}` : num.toString();\n\t}\n\n\t_onkeydown(evt: KeyboardEvent) {\n\t\tif (this._activeIndex === -1) {\n\t\t\treturn;\n\t\t}\n\t\tif (isEnter(evt)) {\n\t\t\t// Accept the time and close the popover\n\t\t\tthis.fireEvent(\"close-inputs\");\n\t\t} else if (isNumber(evt) && this._entities[this._activeIndex]) {\n\t\t\tconst char = evt.key;\n\t\t\tconst buffer = this._keyboardBuffer + char;\n\t\t\tconst bufferValue = parseInt(buffer);\n\n\t\t\tevt.preventDefault();\n\t\t\tthis._resetCooldown(true);\n\t\t\tif (bufferValue > this._entities[this._activeIndex].attributes!.max) {\n\t\t\t\t// value accumulated in the buffer (old entry + new entry) is greater than the input maximum value,\n\t\t\t\t// so assign old entry to the current inut and then switch to the next input, and add new entry as an old value\n\t\t\t\tthis._inputChange(parseInt(this._keyboardBuffer));\n\t\t\t\tthis._switchNextInput();\n\t\t\t\tthis._keyboardBuffer = char;\n\t\t\t\tthis._inputChange(parseInt(char));\n\t\t\t\tthis._resetCooldown(true);\n\t\t\t} else {\n\t\t\t\t// value is less than clock's max value, so add new entry to the buffer\n\t\t\t\tthis._keyboardBuffer = buffer;\n\t\t\t\tthis._inputChange(parseInt(this._keyboardBuffer));\n\t\t\t\tif (this._keyboardBuffer.length === 2 || parseInt(`${this._keyboardBuffer}0`) > this._entities[this._activeIndex].attributes!.max) {\n\t\t\t\t\t// if buffer length is 2, or buffer value + one more (any) number is greater than clock's max value\n\t\t\t\t\t// there is no place for more entry - just set buffer as a value, and switch to the next clock\n\t\t\t\t\tthis._resetCooldown(this._keyboardBuffer.length !== 2);\n\t\t\t\t\tthis._keyboardBuffer = \"\";\n\t\t\t\t\tthis._switchNextInput();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Input 'change' event handler.\n\t * @param value new value to set on active input\n\t */\n\t_inputChange(value: number) {\n\t\tconst stringValue = this._formatNumberToString(value, this._entities[this._activeIndex].prependZero);\n\n\t\tif (this._activeIndex === -1) {\n\t\t\treturn;\n\t\t}\n\t\tvalue = parseInt(stringValue);\n\t\tthis._entities[this._activeIndex].value = value;\n\t\tthis._inputComponent(this._activeIndex)!.value = this._formatNumberToString(value, this._entities[this._activeIndex].prependZero);\n\t\tswitch (this._activeIndex) {\n\t\tcase this._componentMap.hours:\n\t\t\tthis._hoursChange(value);\n\t\t\tbreak;\n\t\tcase this._componentMap.minutes:\n\t\t\tthis._minutesChange(value);\n\t\t\tbreak;\n\t\tcase this._componentMap.seconds:\n\t\t\tthis._secondsChange(value);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t_onfocusin(e: FocusEvent) {\n\t\tconst input = e.target as Input;\n\t\tconst innerInput = this._innerInput(input);\n\n\t\tthis._editedInput = -1;\n\t\tinnerInput!.select();\n\t\tthis._activeIndex = this._getIndexFromId(input.id);\n\t}\n\n\t_onfocusout() {\n\t\tlet value = this._inputComponent(this._activeIndex)!.value === \"\" ? 0 : this._entities[this._activeIndex].value;\n\n\t\tthis._editedInput = -1;\n\t\tif (this._isHoursInput && !this._is24HoursFormat && value === 0) {\n\t\t\tvalue = 12;\n\t\t}\n\t\tthis._inputChange(value);\n\t\tthis._activeIndex = -1;\n\t}\n\n\t_oninput() {\n\t\tconst stringValue = this._inputComponent(this._activeIndex)!.value;\n\t\tconst value = stringValue === \"\" ? 0 : parseInt(stringValue);\n\n\t\tif (value !== this._entities[this._activeIndex].value) {\n\t\t\tthis._editedInput = this._activeIndex;\n\t\t\tthis._editedInputValue = stringValue;\n\t\t\tthis._inputChange(value);\n\t\t\tthis._keyboardBuffer = stringValue;\n\t\t}\n\t}\n}\n\nTimeSelectionInputs.define();\n\nexport default TimeSelectionInputs;\n"],"mappings":";;;;;;;AAAA,OAAOA,aAAa,MAAM,0DAA0D;AACpF,OAAOC,QAAQ,MAAM,qDAAqD;AAE1E,OAAO,qEAAqE,CAAC,CAAC;AAC9E,SACCC,OAAO,EACPC,QAAQ,QACF,sCAAsC;AAC7C,OAAOC,mBAAmB,MAAM,0BAA0B;AAC1D,OAAOC,KAAK,MAAM,YAAY;AAC9B,OAAOC,eAAe,MAAM,sBAAsB;AAClD,OAAOC,mBAAmB,MAAM,0BAA0B;AAE1D,OAAOC,SAAS,MAAM,sBAAsB;AAE5C,SACCC,6BAA6B,EAC7BC,+BAA+B,EAC/BC,+BAA+B,QACzB,mCAAmC;AAE1C;AACA,OAAOC,2BAA2B,MAAM,0DAA0D;AAElG;AACA,OAAOC,sBAAsB,MAAM,+CAA+C;AAElF;;;;;;;;;;;;;;;;;AA4BA,IAAMC,mBAAmB,GAAzB,MAAMA,mBAAoB,SAAQV,mBAAmB;EAArDW,YAAA;;IAEC,KAAAC,YAAY,GAAG,CAAC,CAAC;EAsRlB;EAjRC,IAAIC,eAAeA,CAAA;IAClB,OAAOb,mBAAmB,CAACc,UAAU,CAACC,OAAO,CAACV,6BAA6B,CAAC;EAC7E;EAEA,IAAIW,iBAAiBA,CAAA;IACpB,OAAOhB,mBAAmB,CAACc,UAAU,CAACC,OAAO,CAACT,+BAA+B,CAAC;EAC/E;EAEA,IAAIW,iBAAiBA,CAAA;IACpB,OAAOjB,mBAAmB,CAACc,UAAU,CAACC,OAAO,CAACR,+BAA+B,CAAC;EAC/E;EAEA,IAAIW,WAAWA,CAAA;IACd,OAAOd,SAAS,CAACe,MAAM;EACxB;EAEA,IAAIC,aAAaA,CAAA;IAChB,MAAMC,GAAG,GAAG,IAAI,CAACC,aAAa,CAAC,OAAO,CAAC;IACvC,OAAO,IAAI,CAACC,aAAa,CAACF,GAAG,CAAC,KAAK,IAAI,CAACG,YAAY;EACrD;EAEA,IAAIC,gBAAgBA,CAAA;IACnB,OAAO,IAAI,CAACC,aAAa,EAAEC,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAACD,aAAa,EAAEC,QAAQ,CAAC,GAAG,CAAC;EAC/E;EAEAC,iBAAiBA,CAAA;IAChB,IAAI,CAACC,iBAAiB,EAAE;EACzB;EAEAC,qBAAqBA,CAAA;IACpB,IAAI,CAACC,SAAS,CAACC,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAI;MACtC,MAAMC,KAAK,GAAG,IAAI,CAACC,eAAe,CAACF,KAAK,CAAC;MACzC,IAAIC,KAAK,EAAE;QACV,MAAME,UAAU,GAAG,IAAI,CAACC,WAAW,CAACH,KAAK,CAAE;QAC3CE,UAAU,CAACE,YAAY,CAAC,cAAc,EAAE,KAAK,CAAC;QAC9CF,UAAU,CAACE,YAAY,CAAC,SAAS,EAAE,QAAQ,CAAC;QAC5CF,UAAU,CAACE,YAAY,CAAC,WAAW,EAAE,SAAS,CAAC;;IAEjD,CAAC,CAAC;EACH;EAEA;;;;;EAKAH,eAAeA,CAACI,WAA4B;IAC3C,MAAMN,KAAK,GAAG,OAAOM,WAAW,KAAK,QAAQ,GAAG,IAAI,CAACC,cAAc,CAACD,WAAW,CAAC,GAAGA,WAAW;IAC9F,MAAME,MAAM,GAAG,IAAI,CAACX,SAAS,CAACG,KAAK,CAAC,CAACQ,MAAM;IAC3C,OAAOA,MAAM,GAAG,IAAI,CAACC,UAAU,EAAEC,aAAa,CAAQ,IAAI,IAAI,CAACC,GAAG,UAAUH,MAAM,EAAE,CAAC,GAAGI,SAAS;EAClG;EAEA;;;;;EAKAR,WAAWA,CAACH,KAAY;IACvB,OAAOA,KAAK,IAAIA,KAAK,CAACY,kBAAkB,EAAE;EAC3C;EAEA;;;EAGAlB,iBAAiBA,CAAA;IAChB,IAAImB,KAAK;IAET,IAAI,CAACjB,SAAS,GAAG,EAAE;IACnB,IAAI,CAACkB,QAAQ,GAAG,EAAE;IAClB,IAAI,CAAC1B,aAAa,GAAG;MACpB2B,KAAK,EAAE,CAAC,CAAC;MACTC,OAAO,EAAE,CAAC,CAAC;MACXC,OAAO,EAAE,CAAC;KACV;IACD,IAAI,IAAI,CAACC,kBAAkB,EAAE;MAC5B;MACA,IAAI,CAAC9B,aAAa,CAAC2B,KAAK,GAAG,IAAI,CAACnB,SAAS,CAACuB,MAAM;MAChDN,KAAK,GAAGO,QAAQ,CAAC,IAAI,CAACC,MAAM,CAAC;MAC7B,IAAI,CAACzB,SAAS,CAAC0B,IAAI,CAAC;QACnB,QAAQ,EAAE,OAAO;QACjB,OAAO,EAAE,IAAI,CAAC5C,eAAe;QAC7B,OAAO,EAAEmC,KAAK;QACd,aAAa,EAAE,IAAI,CAACpC,YAAY,KAAK,IAAI,CAACmB,SAAS,CAACuB,MAAM,GAAG,IAAI,CAACI,iBAAiB,GAAG,IAAI,CAACC,qBAAqB,CAACX,KAAK,EAAE,IAAI,CAACY,gBAAgB,CAAC;QAC9I,cAAc,EAAE,IAAI,CAAC7B,SAAS,CAACuB,MAAM,GAAG,CAAC;QACzC,aAAa,EAAE,IAAI,CAACM,gBAAgB;QACpC,YAAY,EAAE;UACb,KAAK,EAAE,IAAI,CAACC,mBAAmB,CAACC,OAAO;UACvC,KAAK,EAAE,IAAI,CAACD,mBAAmB,CAACE,OAAO;UACvC,MAAM,EAAE;;OAET,CAAC;;IAEH,IAAI,IAAI,CAACC,oBAAoB,EAAE;MAC9B;MACA,IAAI,CAACzC,aAAa,CAAC4B,OAAO,GAAG,IAAI,CAACpB,SAAS,CAACuB,MAAM;MAClDN,KAAK,GAAGO,QAAQ,CAAC,IAAI,CAACU,QAAQ,CAAC;MAC/B,IAAI,CAAClC,SAAS,CAAC0B,IAAI,CAAC;QACnB,QAAQ,EAAE,SAAS;QACnB,OAAO,EAAE,IAAI,CAACzC,iBAAiB;QAC/B,OAAO,EAAEgC,KAAK;QACd,aAAa,EAAE,IAAI,CAACpC,YAAY,KAAK,IAAI,CAACmB,SAAS,CAACuB,MAAM,GAAG,IAAI,CAACI,iBAAiB,GAAG,IAAI,CAACC,qBAAqB,CAACX,KAAK,EAAE,IAAI,CAAC;QAC7H,cAAc,EAAE,IAAI,CAACjB,SAAS,CAACuB,MAAM,GAAG,CAAC;QACzC,aAAa,EAAE,IAAI;QACnB,YAAY,EAAE;UACb,KAAK,EAAE,CAAC;UACR,KAAK,EAAE,EAAE;UACT,MAAM,EAAE;;OAET,CAAC;;IAEH,IAAI,IAAI,CAACY,oBAAoB,EAAE;MAC9B;MACA,IAAI,CAAC3C,aAAa,CAAC6B,OAAO,GAAG,IAAI,CAACrB,SAAS,CAACuB,MAAM;MAClDN,KAAK,GAAGO,QAAQ,CAAC,IAAI,CAACY,QAAQ,CAAC;MAC/B,IAAI,CAACpC,SAAS,CAAC0B,IAAI,CAAC;QACnB,QAAQ,EAAE,SAAS;QACnB,OAAO,EAAE,IAAI,CAACxC,iBAAiB;QAC/B,OAAO,EAAE+B,KAAK;QACd,aAAa,EAAE,IAAI,CAACpC,YAAY,KAAK,IAAI,CAACmB,SAAS,CAACuB,MAAM,GAAG,IAAI,CAACI,iBAAiB,GAAG,IAAI,CAACC,qBAAqB,CAACX,KAAK,EAAE,IAAI,CAAC;QAC7H,cAAc,EAAE,IAAI,CAACjB,SAAS,CAACuB,MAAM,GAAG,CAAC;QACzC,aAAa,EAAE,IAAI;QACnB,YAAY,EAAE;UACb,KAAK,EAAE,CAAC;UACR,KAAK,EAAE,EAAE;UACT,MAAM,EAAE;;OAET,CAAC;;IAEH,IAAI,CAACc,sBAAsB,EAAE;EAC9B;EAEA;;;;;EAKAC,YAAYA,CAACnC,KAAa;IACzB,IAAIA,KAAK,IAAI,IAAI,CAACH,SAAS,CAACuB,MAAM,EAAE;MACnCpB,KAAK,GAAG,CAAC;;IAEV,IAAI,CAACE,eAAe,CAACF,KAAK,CAAE,CAACoC,KAAK,EAAE;EACrC;EAEA;;;;;EAKAC,gBAAgBA,CAAA,EAAmB;IAAA,IAAlBC,UAAU,GAAAC,SAAA,CAAAnB,MAAA,QAAAmB,SAAA,QAAA3B,SAAA,GAAA2B,SAAA,MAAG,KAAK;IAClC,IAAIC,WAAW,GAAG,IAAI,CAAClD,YAAY;IACnC,MAAMmD,gBAAgB,GAAGD,WAAW;IAEpC,IAAI,CAAC,IAAI,CAAC3C,SAAS,CAACuB,MAAM,EAAE;MAC3B;;IAED,GAAG;MACFoB,WAAW,EAAE;MACb,IAAIA,WAAW,IAAI,IAAI,CAAC3C,SAAS,CAACuB,MAAM,EAAE;QACzCoB,WAAW,GAAGF,UAAU,GAAG,CAAC,GAAG,IAAI,CAACzC,SAAS,CAACuB,MAAM,GAAG,CAAC;;MAE1D;MACA;KACC,QAAQ,IAAI,CAAClB,eAAe,CAACsC,WAAW,CAAE,CAACE,QAAQ,IAAIF,WAAW,KAAKC,gBAAgB,KAAKH,UAAU,IAAIE,WAAW,GAAG,IAAI,CAAC3C,SAAS,CAACuB,MAAM,CAAC;IAC/I,IAAIoB,WAAW,KAAKC,gBAAgB,IAAI,CAAC,IAAI,CAACvC,eAAe,CAACsC,WAAW,CAAE,CAACE,QAAQ,EAAE;MACrF,IAAI,CAACP,YAAY,CAACK,WAAW,CAAC;;EAEhC;EAEA;;;;;;;EAOAf,qBAAqBA,CAACkB,GAAW,EAAEC,WAAoB;IACtD,OAAOD,GAAG,GAAG,EAAE,IAAIC,WAAW,GAAG,IAAID,GAAG,EAAE,GAAGA,GAAG,CAACE,QAAQ,EAAE;EAC5D;EAEAC,UAAUA,CAACC,GAAkB;IAC5B,IAAI,IAAI,CAACzD,YAAY,KAAK,CAAC,CAAC,EAAE;MAC7B;;IAED,IAAI1B,OAAO,CAACmF,GAAG,CAAC,EAAE;MACjB;MACA,IAAI,CAACC,SAAS,CAAC,cAAc,CAAC;KAC9B,MAAM,IAAInF,QAAQ,CAACkF,GAAG,CAAC,IAAI,IAAI,CAAClD,SAAS,CAAC,IAAI,CAACP,YAAY,CAAC,EAAE;MAC9D,MAAM2D,IAAI,GAAGF,GAAG,CAAC5D,GAAG;MACpB,MAAM+D,MAAM,GAAG,IAAI,CAACC,eAAe,GAAGF,IAAI;MAC1C,MAAMG,WAAW,GAAG/B,QAAQ,CAAC6B,MAAM,CAAC;MAEpCH,GAAG,CAACM,cAAc,EAAE;MACpB,IAAI,CAACC,cAAc,CAAC,IAAI,CAAC;MACzB,IAAIF,WAAW,GAAG,IAAI,CAACvD,SAAS,CAAC,IAAI,CAACP,YAAY,CAAC,CAACiE,UAAW,CAACC,GAAG,EAAE;QACpE;QACA;QACA,IAAI,CAACC,YAAY,CAACpC,QAAQ,CAAC,IAAI,CAAC8B,eAAe,CAAC,CAAC;QACjD,IAAI,CAACd,gBAAgB,EAAE;QACvB,IAAI,CAACc,eAAe,GAAGF,IAAI;QAC3B,IAAI,CAACQ,YAAY,CAACpC,QAAQ,CAAC4B,IAAI,CAAC,CAAC;QACjC,IAAI,CAACK,cAAc,CAAC,IAAI,CAAC;OACzB,MAAM;QACN;QACA,IAAI,CAACH,eAAe,GAAGD,MAAM;QAC7B,IAAI,CAACO,YAAY,CAACpC,QAAQ,CAAC,IAAI,CAAC8B,eAAe,CAAC,CAAC;QACjD,IAAI,IAAI,CAACA,eAAe,CAAC/B,MAAM,KAAK,CAAC,IAAIC,QAAQ,CAAC,GAAG,IAAI,CAAC8B,eAAe,GAAG,CAAC,GAAG,IAAI,CAACtD,SAAS,CAAC,IAAI,CAACP,YAAY,CAAC,CAACiE,UAAW,CAACC,GAAG,EAAE;UAClI;UACA;UACA,IAAI,CAACF,cAAc,CAAC,IAAI,CAACH,eAAe,CAAC/B,MAAM,KAAK,CAAC,CAAC;UACtD,IAAI,CAAC+B,eAAe,GAAG,EAAE;UACzB,IAAI,CAACd,gBAAgB,EAAE;;;;EAI3B;EAEA;;;;EAIAoB,YAAYA,CAAC3C,KAAa;IACzB,MAAM4C,WAAW,GAAG,IAAI,CAACjC,qBAAqB,CAACX,KAAK,EAAE,IAAI,CAACjB,SAAS,CAAC,IAAI,CAACP,YAAY,CAAC,CAACsD,WAAW,CAAC;IAEpG,IAAI,IAAI,CAACtD,YAAY,KAAK,CAAC,CAAC,EAAE;MAC7B;;IAEDwB,KAAK,GAAGO,QAAQ,CAACqC,WAAW,CAAC;IAC7B,IAAI,CAAC7D,SAAS,CAAC,IAAI,CAACP,YAAY,CAAC,CAACwB,KAAK,GAAGA,KAAK;IAC/C,IAAI,CAACZ,eAAe,CAAC,IAAI,CAACZ,YAAY,CAAE,CAACwB,KAAK,GAAG,IAAI,CAACW,qBAAqB,CAACX,KAAK,EAAE,IAAI,CAACjB,SAAS,CAAC,IAAI,CAACP,YAAY,CAAC,CAACsD,WAAW,CAAC;IACjI,QAAQ,IAAI,CAACtD,YAAY;MACzB,KAAK,IAAI,CAACD,aAAa,CAAC2B,KAAK;QAC5B,IAAI,CAAC2C,YAAY,CAAC7C,KAAK,CAAC;QACxB;MACD,KAAK,IAAI,CAACzB,aAAa,CAAC4B,OAAO;QAC9B,IAAI,CAAC2C,cAAc,CAAC9C,KAAK,CAAC;QAC1B;MACD,KAAK,IAAI,CAACzB,aAAa,CAAC6B,OAAO;QAC9B,IAAI,CAAC2C,cAAc,CAAC/C,KAAK,CAAC;QAC1B;;EAEF;EAEAgD,UAAUA,CAACC,CAAa;IACvB,MAAM9D,KAAK,GAAG8D,CAAC,CAACC,MAAe;IAC/B,MAAM7D,UAAU,GAAG,IAAI,CAACC,WAAW,CAACH,KAAK,CAAC;IAE1C,IAAI,CAACvB,YAAY,GAAG,CAAC,CAAC;IACtByB,UAAW,CAAC8D,MAAM,EAAE;IACpB,IAAI,CAAC3E,YAAY,GAAG,IAAI,CAAC4E,eAAe,CAACjE,KAAK,CAACkE,EAAE,CAAC;EACnD;EAEAC,WAAWA,CAAA;IACV,IAAItD,KAAK,GAAG,IAAI,CAACZ,eAAe,CAAC,IAAI,CAACZ,YAAY,CAAE,CAACwB,KAAK,KAAK,EAAE,GAAG,CAAC,GAAG,IAAI,CAACjB,SAAS,CAAC,IAAI,CAACP,YAAY,CAAC,CAACwB,KAAK;IAE/G,IAAI,CAACpC,YAAY,GAAG,CAAC,CAAC;IACtB,IAAI,IAAI,CAACQ,aAAa,IAAI,CAAC,IAAI,CAACK,gBAAgB,IAAIuB,KAAK,KAAK,CAAC,EAAE;MAChEA,KAAK,GAAG,EAAE;;IAEX,IAAI,CAAC2C,YAAY,CAAC3C,KAAK,CAAC;IACxB,IAAI,CAACxB,YAAY,GAAG,CAAC,CAAC;EACvB;EAEA+E,QAAQA,CAAA;IACP,MAAMX,WAAW,GAAG,IAAI,CAACxD,eAAe,CAAC,IAAI,CAACZ,YAAY,CAAE,CAACwB,KAAK;IAClE,MAAMA,KAAK,GAAG4C,WAAW,KAAK,EAAE,GAAG,CAAC,GAAGrC,QAAQ,CAACqC,WAAW,CAAC;IAE5D,IAAI5C,KAAK,KAAK,IAAI,CAACjB,SAAS,CAAC,IAAI,CAACP,YAAY,CAAC,CAACwB,KAAK,EAAE;MACtD,IAAI,CAACpC,YAAY,GAAG,IAAI,CAACY,YAAY;MACrC,IAAI,CAACkC,iBAAiB,GAAGkC,WAAW;MACpC,IAAI,CAACD,YAAY,CAAC3C,KAAK,CAAC;MACxB,IAAI,CAACqC,eAAe,GAAGO,WAAW;;EAEpC;CACA;AAtRAY,UAAA,EADC3G,QAAQ,CAAC;EAAE4G,IAAI,EAAEtF;AAAM,CAAE,CAAC,C,wDACT;AAGlBqF,UAAA,EADC3G,QAAQ,EAAE,C,6DACgB;AALtBa,mBAAmB,GAAA8F,UAAA,EAXxB5G,aAAa,CAAC;EACd8G,GAAG,EAAE,2BAA2B;EAChCC,MAAM,EAAElG,sBAAsB;EAC9BmG,QAAQ,EAAEpG,2BAA2B;EACrCqG,YAAY,EAAE,CACb5G,KAAK,EACLC,eAAe,EACfC,mBAAmB;CAEpB,CAAC,C,EAEIO,mBAAmB,CAwRxB;AAEDA,mBAAmB,CAACoG,MAAM,EAAE;AAE5B,eAAepG,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}