{"ast":null,"code":"const escapeReg = /[[\\]{}()*+?.\\\\^$|]/g;\nconst escapeRegExp = str => {\n  return str.replace(escapeReg, \"\\\\$&\");\n};\nconst StartsWithPerTerm = (value, items, propName) => {\n  const reg = new RegExp(`(^|\\\\s)${escapeRegExp(value.toLowerCase())}.*`, \"g\");\n  return items.filter(item => {\n    const text = item[propName];\n    reg.lastIndex = 0;\n    return reg.test(text.toLowerCase());\n  });\n};\nconst StartsWith = (value, items, propName) => items.filter(item => (item[propName] || \"\").toLowerCase().startsWith(value.toLowerCase()));\nconst Contains = (value, items, propName) => items.filter(item => (item[propName] || \"\").toLowerCase().includes(value.toLowerCase()));\nconst None = (_, items) => items;\nexport { StartsWithPerTerm, StartsWith, Contains, None };","map":{"version":3,"names":["escapeReg","escapeRegExp","str","replace","StartsWithPerTerm","value","items","propName","reg","RegExp","toLowerCase","filter","item","text","lastIndex","test","StartsWith","startsWith","Contains","includes","None","_"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents/src/Filters.ts"],"sourcesContent":["const escapeReg = /[[\\]{}()*+?.\\\\^$|]/g;\n\nconst escapeRegExp = (str: string): string => {\n\treturn str.replace(escapeReg, \"\\\\$&\");\n};\n\nconst StartsWithPerTerm = <T>(value: string, items: Array<T>, propName: string) => {\n\tconst reg = new RegExp(`(^|\\\\s)${escapeRegExp(value.toLowerCase())}.*`, \"g\");\n\n\treturn items.filter(item => {\n\t\tconst text = item[propName as keyof typeof item] as string;\n\n\t\treg.lastIndex = 0;\n\n\t\treturn reg.test(text.toLowerCase());\n\t});\n};\n\nconst StartsWith = <T>(value: string, items: Array<T>, propName: string): Array<T> => items.filter(item => (item[propName as keyof typeof item] as string || \"\").toLowerCase().startsWith(value.toLowerCase()));\nconst Contains = <T>(value: string, items: Array<T>, propName: string): Array<T> => items.filter(item => (item[propName as keyof typeof item] as string || \"\").toLowerCase().includes(value.toLowerCase()));\nconst None = <T>(_: string, items: Array<T>): Array<T> => items;\n\nexport {\n\tStartsWithPerTerm,\n\tStartsWith,\n\tContains,\n\tNone,\n};\n"],"mappings":"AAAA,MAAMA,SAAS,GAAG,qBAAqB;AAEvC,MAAMC,YAAY,GAAIC,GAAW,IAAY;EAC5C,OAAOA,GAAG,CAACC,OAAO,CAACH,SAAS,EAAE,MAAM,CAAC;AACtC,CAAC;AAED,MAAMI,iBAAiB,GAAGA,CAAIC,KAAa,EAAEC,KAAe,EAAEC,QAAgB,KAAI;EACjF,MAAMC,GAAG,GAAG,IAAIC,MAAM,CAAC,UAAUR,YAAY,CAACI,KAAK,CAACK,WAAW,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;EAE5E,OAAOJ,KAAK,CAACK,MAAM,CAACC,IAAI,IAAG;IAC1B,MAAMC,IAAI,GAAGD,IAAI,CAACL,QAA6B,CAAW;IAE1DC,GAAG,CAACM,SAAS,GAAG,CAAC;IAEjB,OAAON,GAAG,CAACO,IAAI,CAACF,IAAI,CAACH,WAAW,EAAE,CAAC;EACpC,CAAC,CAAC;AACH,CAAC;AAED,MAAMM,UAAU,GAAGA,CAAIX,KAAa,EAAEC,KAAe,EAAEC,QAAgB,KAAeD,KAAK,CAACK,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACL,QAA6B,CAAW,IAAI,EAAE,EAAEG,WAAW,EAAE,CAACO,UAAU,CAACZ,KAAK,CAACK,WAAW,EAAE,CAAC,CAAC;AAC/M,MAAMQ,QAAQ,GAAGA,CAAIb,KAAa,EAAEC,KAAe,EAAEC,QAAgB,KAAeD,KAAK,CAACK,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACL,QAA6B,CAAW,IAAI,EAAE,EAAEG,WAAW,EAAE,CAACS,QAAQ,CAACd,KAAK,CAACK,WAAW,EAAE,CAAC,CAAC;AAC3M,MAAMU,IAAI,GAAGA,CAAIC,CAAS,EAAEf,KAAe,KAAeA,KAAK;AAE/D,SACCF,iBAAiB,EACjBY,UAAU,EACVE,QAAQ,EACRE,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}