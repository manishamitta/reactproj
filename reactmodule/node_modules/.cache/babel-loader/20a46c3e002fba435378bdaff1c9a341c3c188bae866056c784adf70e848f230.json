{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport event from \"@ui5/webcomponents-base/dist/decorators/event.js\";\nimport \"@ui5/webcomponents-localization/dist/features/calendar/Gregorian.js\"; // default calendar for bundling\nimport { isDown, isUp, isDownAlt, isUpAlt, isPageUp, isPageDown, isPageUpShift, isPageDownShift, isPageUpShiftCtrl, isPageDownShiftCtrl, isSpace, isEnter, isKeyA, isKeyP, isNumber, isColon } from \"@ui5/webcomponents-base/dist/Keys.js\";\nimport TimePickerInternals from \"./TimePickerInternals.js\";\nimport TimePickerClock from \"./TimePickerClock.js\";\nimport ToggleSpinButton from \"./ToggleSpinButton.js\";\nimport SegmentedButton from \"./SegmentedButton.js\";\nimport SegmentedButtonItem from \"./SegmentedButtonItem.js\";\n// Template\nimport TimeSelectionClocksTemplate from \"./generated/templates/TimeSelectionClocksTemplate.lit.js\";\n// Styles\nimport TimeSelectionClocksCss from \"./generated/themes/TimeSelectionClocks.css.js\";\n/**\n * Fired when the picker is being closed.\n */\nlet TimeSelectionClocks = class TimeSelectionClocks extends TimePickerInternals {\n  constructor() {\n    super(...arguments);\n    /**\n     * Flag for pressed Space key\n     */\n    this._spacePressed = false;\n    /**\n     * Flag for focused state of Clocks component\n     */\n    this._focused = false;\n    /**\n     * Flag for focused state of AM/PM segmented button\n     */\n    this._amPmFocused = false;\n  }\n  onBeforeRendering() {\n    this._createComponents();\n  }\n  /**\n   * Returns ToggleSpinButton component by index or name.\n   * @param indexOrName the index or name of the component\n   * @returns component (if exists) or undefined\n   */\n  _buttonComponent(indexOrName) {\n    const index = typeof indexOrName === \"string\" ? this._indexFromName(indexOrName) : indexOrName;\n    const entity = this._entities[index].entity;\n    return entity ? this.shadowRoot?.querySelector(`#${this._id}_button_${entity}`) : undefined;\n  }\n  /**\n   * Returns TimePickerClock component by index or name.\n   * @param indexOrName the index or name of the component\n   * @returns component (if exists) or undefined\n   */\n  _clockComponent(indexOrName) {\n    const index = typeof indexOrName === \"string\" ? this._indexFromName(indexOrName) : indexOrName;\n    const entity = this._entities[index].entity;\n    return entity ? this.shadowRoot?.querySelector(`#${this._id}_clock_${entity}`) : undefined;\n  }\n  /**\n   * TimePickerClocks focusin event handler. Focuses the active button and switches to active clock.\n   * @param evt Event object\n   */\n  _clocksFocusIn(evt) {\n    const target = evt.target;\n    this._focused = true;\n    if (target.id === this._id) {\n      this._switchClock(this._activeIndex);\n    }\n  }\n  _clocksFocusOut() {\n    this._focused = false;\n  }\n  /**\n   * ToggleSpinButton focusin event handler.Switches to clock which button is being focused.\n   * @param evt Event object\n   */\n  _buttonFocusIn(evt) {\n    const target = evt.target;\n    const name = this._getNameFromId(target.id);\n    if (name) {\n      this._switchTo(name);\n    }\n  }\n  /**\n   * AM/PM segmented button focusin event handler.\n   */\n  _amPmFocusIn() {\n    this._amPmFocused = true;\n  }\n  /**\n   * AM/PM segmented button focusout event handler.\n   */\n  _amPmFocusOut() {\n    this._amPmFocused = false;\n  }\n  /**\n   * keyup event handler.\n   * @param evt Event object\n   */\n  _onkeyup(evt) {\n    if (isSpace(evt)) {\n      this._spacePressed = false;\n    }\n  }\n  /**\n   * keydown event handler.\n   * @param evt Event object\n   */\n  _onkeydown(evt) {\n    let clock;\n    const toggleSpinButtonTarget = evt.target && evt.target.tagName.toLowerCase().indexOf(\"segmented\") === -1;\n    if (isEnter(evt)) {\n      // Accept the time and close the popover\n      this.fireEvent(\"close-picker\");\n    } else if (isSpace(evt) && toggleSpinButtonTarget && !this._spacePressed) {\n      evt.preventDefault();\n      this._spacePressed = true;\n      this._keyboardBuffer = \"\";\n      this._resetCooldown(true);\n      this._switchNextClock(true);\n    } else if ((isUp(evt) || isDown(evt)) && !isUpAlt(evt) && !isDownAlt(evt)) {\n      // Arrows up/down increase/decrease currently active clock\n      clock = this._clockComponent(this._activeIndex);\n      clock && !clock.disabled && !this._amPmFocused && clock._modifyValue(isUp(evt));\n      evt.preventDefault();\n    } else if (isPageUp(evt) || isPageDown(evt)) {\n      // PageUp/PageDown increase/decrease hours clock\n      clock = this._clockComponent(\"hours\");\n      if (clock && !clock.disabled) {\n        this._switchTo(\"hours\");\n        clock._modifyValue(isPageUp(evt));\n      }\n      evt.preventDefault();\n    } else if (isPageUpShift(evt) || isPageDownShift(evt)) {\n      // Shift+PageUp/Shift+PageDown increase/decrease minutes clock\n      clock = this._clockComponent(\"minutes\");\n      if (clock && !clock.disabled) {\n        this._switchTo(\"minutes\");\n        clock._modifyValue(isPageUpShift(evt));\n      }\n      evt.preventDefault();\n    } else if (isPageUpShiftCtrl(evt) || isPageDownShiftCtrl(evt)) {\n      // Ctrl+Shift+PageUp/Ctrl+Shift+PageDown increase/decrease seconds clock\n      clock = this._clockComponent(\"seconds\");\n      if (clock && !clock.disabled) {\n        this._switchTo(\"seconds\");\n        clock._modifyValue(isPageUpShiftCtrl(evt));\n      }\n      evt.preventDefault();\n    } else if (isKeyA(evt) || isKeyP(evt)) {\n      // A/P selects AM/PM segmented button item\n      const buttonAmPm = this._buttonAmPm();\n      if (buttonAmPm) {\n        buttonAmPm.items[0].selected = isKeyA(evt);\n        buttonAmPm.items[1].selected = isKeyP(evt);\n        const period = isKeyA(evt) ? buttonAmPm.items[0].textContent : buttonAmPm.items[1].textContent;\n        period && this._calculatePeriodChange(period);\n      }\n      evt.preventDefault();\n    } else if (isColon(evt)) {\n      // Colon (:) - Switch to next clock\n      this._keyboardBuffer = \"\";\n      this._exactMatch = undefined;\n      this._resetCooldown(true);\n      this._switchNextClock(true);\n    } else if (isNumber(evt) && this._entities[this._activeIndex]) {\n      // Direct number entry\n      this._exactMatch = undefined;\n      this._resetCooldown(true);\n      this._numbersInput(evt);\n    }\n  }\n  /**\n   * Handles direct numbers entry.\n   * @param evt Event object\n   */\n  _numbersInput(evt) {\n    const char = evt.key;\n    const bufferStr = this._keyboardBuffer + char;\n    const bufferNum = parseInt(bufferStr);\n    const entity = this._entities[this._activeIndex];\n    let activeClock = this._clockComponent(this._activeIndex);\n    if (!entity || !entity.attributes) {\n      return;\n    }\n    if (bufferNum > entity.attributes.max) {\n      // value accumulated in the buffer (old entry + new entry) is greater than the clock maximum value,\n      // so assign old entry to the current clock and then switch to the next clock, and add new entry as an old value\n      activeClock && activeClock._setSelectedValue(parseInt(this._keyboardBuffer));\n      this._switchNextClock();\n      this._keyboardBuffer = char;\n      activeClock = this._clockComponent(this._activeIndex);\n      activeClock && activeClock._setSelectedValue(parseInt(char));\n      this._resetCooldown(true);\n    } else {\n      // value is less than clock's max value, so add new entry to the buffer\n      this._keyboardBuffer = bufferStr;\n      activeClock && activeClock._setSelectedValue(parseInt(this._keyboardBuffer));\n      if (this._keyboardBuffer.length === 2 || parseInt(`${this._keyboardBuffer}0`) > entity.attributes.max) {\n        // if buffer length is 2, or buffer value + one more (any) number is greater than clock's max value\n        // there is no place for more entry - just set buffer as a value, and switch to the next clock\n        this._resetCooldown(this._keyboardBuffer.length !== 2);\n        this._keyboardBuffer = \"\";\n        this._switchNextClock();\n      }\n    }\n  }\n  /**\n   * Focuses the first available button.\n   */\n  _focusFirstButton() {\n    this._activeIndex = 0;\n    this._buttonComponent(0).focus();\n  }\n  /**\n   * Sets the exact match value. Must be overriden.\n   */\n  _setExactMatch() {\n    const clock = this._clockComponent(this._activeIndex);\n    clock && this._exactMatch !== undefined && clock._setSelectedValue(this._exactMatch);\n  }\n  /**\n   * Creates clock and button components according to the display format pattern.\n   */\n  _createComponents() {\n    const time = {\n      hours: parseInt(this._hours),\n      minutes: parseInt(this._minutes),\n      seconds: parseInt(this._seconds)\n    };\n    this._entities = [];\n    this._periods = [];\n    this._componentMap = {\n      hours: -1,\n      minutes: -1,\n      seconds: -1\n    };\n    if (this._hasHoursComponent) {\n      // add Hours clock\n      this._componentMap.hours = this._entities.length;\n      this._entities.push({\n        \"label\": this.hoursLabel,\n        \"entity\": \"hours\",\n        \"itemMin\": 1,\n        \"itemMax\": 12,\n        \"value\": time.hours,\n        \"stringValue\": this._hours,\n        \"textValue\": `${time.hours} ${this.hoursLabel}`,\n        \"displayStep\": 1,\n        \"lastItemReplacement\": this._hoursConfiguration.isTwelveHoursFormat ? -1 : 0,\n        \"showInnerCircle\": !this._hoursConfiguration.isTwelveHoursFormat,\n        \"prependZero\": this._zeroPaddedHours,\n        \"hasSeparator\": this._entities.length > 0,\n        \"active\": false,\n        \"attributes\": {\n          \"min\": this._hoursConfiguration.minHour,\n          \"max\": this._hoursConfiguration.maxHour,\n          \"step\": 1\n        }\n      });\n    }\n    if (this._hasMinutesComponent) {\n      // add Minutes clock\n      this._componentMap.minutes = this._entities.length;\n      this._entities.push({\n        \"label\": this.minutesLabel,\n        \"entity\": \"minutes\",\n        \"itemMin\": 1,\n        \"itemMax\": 60,\n        \"value\": time.minutes,\n        \"stringValue\": this._minutes,\n        \"textValue\": `${time.minutes} ${this.minutesLabel}`,\n        \"displayStep\": 5,\n        \"lastItemReplacement\": 0,\n        \"showInnerCircle\": false,\n        \"prependZero\": false,\n        \"hasSeparator\": this._entities.length > 0,\n        \"active\": false,\n        \"attributes\": {\n          \"min\": 0,\n          \"max\": 59,\n          \"step\": 1\n        }\n      });\n    }\n    if (this._hasSecondsComponent) {\n      // add Seconds clock\n      this._componentMap.seconds = this._entities.length;\n      this._entities.push({\n        \"label\": this.secondsLabel,\n        \"entity\": \"seconds\",\n        \"itemMin\": 1,\n        \"itemMax\": 60,\n        \"value\": time.seconds,\n        \"stringValue\": this._seconds,\n        \"textValue\": `${time.seconds} ${this.secondsLabel}`,\n        \"displayStep\": 5,\n        \"lastItemReplacement\": 0,\n        \"showInnerCircle\": false,\n        \"prependZero\": false,\n        \"hasSeparator\": this._entities.length > 0,\n        \"active\": false,\n        \"attributes\": {\n          \"min\": 0,\n          \"max\": 59,\n          \"step\": 1\n        }\n      });\n    }\n    this._entities[this._activeIndex].active = true;\n    this._entities[this._activeIndex].focused = this._focused && !this._amPmFocused;\n    this._createPeriodComponent();\n  }\n  /**\n   * Switches to the specific clock by name.\n   * @param clockName the name of the clock\n   */\n  _switchTo(clockName) {\n    const key = this._componentKey(clockName);\n    if (this._componentMap[key] !== undefined) {\n      this._switchClock(this._componentMap[key]);\n    }\n  }\n  /**\n   * Switches to the specific clock by its index in _clocks property.\n   * @param clockIndex the index of the clock\n   */\n  _switchClock(clockIndex) {\n    const newButton = this._buttonComponent(clockIndex);\n    if (this._entities.length && clockIndex < this._entities.length && newButton) {\n      this._entities[this._activeIndex].active = false;\n      this._entities[this._activeIndex].focused = false;\n      this._activeIndex = clockIndex;\n      this._entities[this._activeIndex].active = true;\n      this._entities[this._activeIndex].focused = this._focused && !this._amPmFocused;\n      newButton.focus();\n    }\n  }\n  /**\n   * Switches to the next available clock.\n   * @param wrapAround whether to switch to the first clock if there are no next clock\n   */\n  _switchNextClock() {\n    let wrapAround = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let activeIndex = this._activeIndex;\n    const startActiveIndex = activeIndex;\n    const activeClock = this._clockComponent(activeIndex);\n    do {\n      activeIndex++;\n      if (activeIndex >= this._entities.length) {\n        activeIndex = wrapAround ? 0 : this._entities.length - 1;\n      }\n      // false-positive finding of no-unmodified-loop-condition rule\n      // eslint-disable-next-line no-unmodified-loop-condition\n    } while (activeClock && activeClock.disabled && activeIndex !== startActiveIndex && (wrapAround || activeIndex < this._entities.length - 1));\n    const newClock = this._clockComponent(activeIndex);\n    if (activeIndex !== startActiveIndex && newClock && !newClock.disabled) {\n      this._switchClock(activeIndex);\n    }\n  }\n  /**\n   * Clock 'change' event handler.\n   * @param evt Event object\n   */\n  _clockChange(evt) {\n    const index = this._getIndexFromId(evt.target.id);\n    const stringValue = evt.detail.stringValue;\n    const value = evt.detail.value;\n    const button = this._buttonComponent(index);\n    if (!button) {\n      return;\n    }\n    this._entities[index].stringValue = stringValue;\n    this._entities[index].value = value;\n    this._entities = JSON.parse(JSON.stringify(this._entities));\n    switch (index) {\n      case this._componentMap.hours:\n        this._hoursChange(value);\n        break;\n      case this._componentMap.minutes:\n        this._minutesChange(value);\n        break;\n      case this._componentMap.seconds:\n        this._secondsChange(value);\n        break;\n    }\n    if (evt.detail.finalChange) {\n      if (this._activeIndex < this._entities.length - 1) {\n        this._switchNextClock();\n      } else {\n        button.focus();\n      }\n    }\n  }\n};\n__decorate([property({\n  type: Boolean,\n  noAttribute: true\n})], TimeSelectionClocks.prototype, \"_spacePressed\", void 0);\n__decorate([property({\n  type: Boolean,\n  noAttribute: true\n})], TimeSelectionClocks.prototype, \"_focused\", void 0);\n__decorate([property({\n  type: Boolean,\n  noAttribute: true\n})], TimeSelectionClocks.prototype, \"_amPmFocused\", void 0);\nTimeSelectionClocks = __decorate([event(\"close-picker\")\n/**\n * @class\n *\n * ### Overview\n *\n * `ui5-time-selection-clocks` is component that contains all the `ui5-time-picker-clock` components\n * necessary for the `ui5-time-picker` as well as all necessary `ui5-toggle-spin-button` components\n * used for switching between different clocks.\n * `ui5-time-picker-clock` components and `ui5-toggle-spin-button` depend on the time format set to\n * `ui5-time-picker` component.\n *\n * This component should not be used separately.\n * @constructor\n * @extends TimePickerInternals\n * @since 1.15.0\n * @private\n */, customElement({\n  tag: \"ui5-time-selection-clocks\",\n  styles: TimeSelectionClocksCss,\n  template: TimeSelectionClocksTemplate,\n  dependencies: [TimePickerClock, ToggleSpinButton, SegmentedButton, SegmentedButtonItem]\n})], TimeSelectionClocks);\nTimeSelectionClocks.define();\nexport default TimeSelectionClocks;","map":{"version":3,"names":["customElement","property","event","isDown","isUp","isDownAlt","isUpAlt","isPageUp","isPageDown","isPageUpShift","isPageDownShift","isPageUpShiftCtrl","isPageDownShiftCtrl","isSpace","isEnter","isKeyA","isKeyP","isNumber","isColon","TimePickerInternals","TimePickerClock","ToggleSpinButton","SegmentedButton","SegmentedButtonItem","TimeSelectionClocksTemplate","TimeSelectionClocksCss","TimeSelectionClocks","constructor","_spacePressed","_focused","_amPmFocused","onBeforeRendering","_createComponents","_buttonComponent","indexOrName","index","_indexFromName","entity","_entities","shadowRoot","querySelector","_id","undefined","_clockComponent","_clocksFocusIn","evt","target","id","_switchClock","_activeIndex","_clocksFocusOut","_buttonFocusIn","name","_getNameFromId","_switchTo","_amPmFocusIn","_amPmFocusOut","_onkeyup","_onkeydown","clock","toggleSpinButtonTarget","tagName","toLowerCase","indexOf","fireEvent","preventDefault","_keyboardBuffer","_resetCooldown","_switchNextClock","disabled","_modifyValue","buttonAmPm","_buttonAmPm","items","selected","period","textContent","_calculatePeriodChange","_exactMatch","_numbersInput","char","key","bufferStr","bufferNum","parseInt","activeClock","attributes","max","_setSelectedValue","length","_focusFirstButton","focus","_setExactMatch","time","hours","_hours","minutes","_minutes","seconds","_seconds","_periods","_componentMap","_hasHoursComponent","push","hoursLabel","_hoursConfiguration","isTwelveHoursFormat","_zeroPaddedHours","minHour","maxHour","_hasMinutesComponent","minutesLabel","_hasSecondsComponent","secondsLabel","active","focused","_createPeriodComponent","clockName","_componentKey","clockIndex","newButton","wrapAround","arguments","activeIndex","startActiveIndex","newClock","_clockChange","_getIndexFromId","stringValue","detail","value","button","JSON","parse","stringify","_hoursChange","_minutesChange","_secondsChange","finalChange","__decorate","type","Boolean","noAttribute","tag","styles","template","dependencies","define"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents/src/TimeSelectionClocks.ts"],"sourcesContent":["import customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport event from \"@ui5/webcomponents-base/dist/decorators/event.js\";\nimport \"@ui5/webcomponents-localization/dist/features/calendar/Gregorian.js\"; // default calendar for bundling\nimport {\n\tisDown,\n\tisUp,\n\tisDownAlt,\n\tisUpAlt,\n\tisPageUp,\n\tisPageDown,\n\tisPageUpShift,\n\tisPageDownShift,\n\tisPageUpShiftCtrl,\n\tisPageDownShiftCtrl,\n\tisSpace,\n\tisEnter,\n\tisKeyA,\n\tisKeyP,\n\tisNumber,\n\tisColon,\n} from \"@ui5/webcomponents-base/dist/Keys.js\";\nimport TimePickerInternals from \"./TimePickerInternals.js\";\nimport TimePickerClock from \"./TimePickerClock.js\";\nimport ToggleSpinButton from \"./ToggleSpinButton.js\";\nimport SegmentedButton from \"./SegmentedButton.js\";\nimport SegmentedButtonItem from \"./SegmentedButtonItem.js\";\nimport type { TimePickerClockChangeEventDetail } from \"./TimePickerClock.js\";\n\n// Template\nimport TimeSelectionClocksTemplate from \"./generated/templates/TimeSelectionClocksTemplate.lit.js\";\n\n// Styles\nimport TimeSelectionClocksCss from \"./generated/themes/TimeSelectionClocks.css.js\";\n\n/**\n * Fired when the picker is being closed.\n */\n@event(\"close-picker\")\n\n/**\n * @class\n *\n * ### Overview\n *\n * `ui5-time-selection-clocks` is component that contains all the `ui5-time-picker-clock` components\n * necessary for the `ui5-time-picker` as well as all necessary `ui5-toggle-spin-button` components\n * used for switching between different clocks.\n * `ui5-time-picker-clock` components and `ui5-toggle-spin-button` depend on the time format set to\n * `ui5-time-picker` component.\n *\n * This component should not be used separately.\n * @constructor\n * @extends TimePickerInternals\n * @since 1.15.0\n * @private\n */\n@customElement({\n\ttag: \"ui5-time-selection-clocks\",\n\tstyles: TimeSelectionClocksCss,\n\ttemplate: TimeSelectionClocksTemplate,\n\tdependencies: [\n\t\tTimePickerClock,\n\t\tToggleSpinButton,\n\t\tSegmentedButton,\n\t\tSegmentedButtonItem,\n\t],\n})\n\nclass TimeSelectionClocks extends TimePickerInternals {\n\t/**\n\t * Flag for pressed Space key\n\t */\n\t@property({ type: Boolean, noAttribute: true })\n\t_spacePressed = false;\n\n\t/**\n\t * Flag for focused state of Clocks component\n\t */\n\t@property({ type: Boolean, noAttribute: true })\n\t_focused = false;\n\n\t/**\n\t * Flag for focused state of AM/PM segmented button\n\t */\n\t@property({ type: Boolean, noAttribute: true })\n\t_amPmFocused = false;\n\n\tonBeforeRendering() {\n\t\tthis._createComponents();\n\t}\n\n\t/**\n\t * Returns ToggleSpinButton component by index or name.\n\t * @param indexOrName the index or name of the component\n\t * @returns component (if exists) or undefined\n\t */\n\t_buttonComponent(indexOrName: number | string): ToggleSpinButton | undefined | null {\n\t\tconst index = typeof indexOrName === \"string\" ? this._indexFromName(indexOrName) : indexOrName;\n\t\tconst entity = this._entities[index].entity;\n\t\treturn entity ? this.shadowRoot?.querySelector<ToggleSpinButton>(`#${this._id}_button_${entity}`) : undefined;\n\t}\n\n\t/**\n\t * Returns TimePickerClock component by index or name.\n\t * @param indexOrName the index or name of the component\n\t * @returns component (if exists) or undefined\n\t */\n\t_clockComponent(indexOrName: number | string): TimePickerClock | undefined | null {\n\t\tconst index = typeof indexOrName === \"string\" ? this._indexFromName(indexOrName) : indexOrName;\n\t\tconst entity = this._entities[index].entity;\n\t\treturn entity ? this.shadowRoot?.querySelector<TimePickerClock>(`#${this._id}_clock_${entity}`) : undefined;\n\t}\n\n\t/**\n\t * TimePickerClocks focusin event handler. Focuses the active button and switches to active clock.\n\t * @param evt Event object\n\t */\n\t_clocksFocusIn(evt: Event) {\n\t\tconst target = evt.target as HTMLElement;\n\t\tthis._focused = true;\n\t\tif (target.id === this._id) {\n\t\t\tthis._switchClock(this._activeIndex);\n\t\t}\n\t}\n\n\t_clocksFocusOut() {\n\t\tthis._focused = false;\n\t}\n\n\t/**\n\t * ToggleSpinButton focusin event handler.Switches to clock which button is being focused.\n\t * @param evt Event object\n\t */\n\t_buttonFocusIn(evt: Event) {\n\t\tconst target = evt.target as HTMLElement;\n\t\tconst name = this._getNameFromId(target.id);\n\t\tif (name) {\n\t\t\tthis._switchTo(name);\n\t\t}\n\t}\n\n\t/**\n\t * AM/PM segmented button focusin event handler.\n\t */\n\t_amPmFocusIn() {\n\t\tthis._amPmFocused = true;\n\t}\n\n\t/**\n\t * AM/PM segmented button focusout event handler.\n\t */\n\t_amPmFocusOut() {\n\t\tthis._amPmFocused = false;\n\t}\n\n\t/**\n\t * keyup event handler.\n\t * @param evt Event object\n\t */\n\t_onkeyup(evt: KeyboardEvent) {\n\t\tif (isSpace(evt)) {\n\t\t\tthis._spacePressed = false;\n\t\t}\n\t}\n\n\t/**\n\t * keydown event handler.\n\t * @param evt Event object\n\t */\n\t_onkeydown(evt: KeyboardEvent) {\n\t\tlet clock;\n\t\tconst toggleSpinButtonTarget = evt.target && (evt.target as HTMLElement).tagName.toLowerCase().indexOf(\"segmented\") === -1;\n\n\t\tif (isEnter(evt)) {\n\t\t\t// Accept the time and close the popover\n\t\t\tthis.fireEvent(\"close-picker\");\n\t\t} else if (isSpace(evt) && toggleSpinButtonTarget && !this._spacePressed) {\n\t\t\tevt.preventDefault();\n\t\t\tthis._spacePressed = true;\n\t\t\tthis._keyboardBuffer = \"\";\n\t\t\tthis._resetCooldown(true);\n\t\t\tthis._switchNextClock(true);\n\t\t} else if ((isUp(evt) || isDown(evt)) && !isUpAlt(evt) && !isDownAlt(evt)) {\n\t\t\t// Arrows up/down increase/decrease currently active clock\n\t\t\tclock = this._clockComponent(this._activeIndex);\n\t\t\tclock && !clock.disabled && !this._amPmFocused && clock._modifyValue(isUp(evt));\n\t\t\tevt.preventDefault();\n\t\t} else if (isPageUp(evt) || isPageDown(evt)) {\n\t\t\t// PageUp/PageDown increase/decrease hours clock\n\t\t\tclock = this._clockComponent(\"hours\");\n\t\t\tif (clock && !clock.disabled) {\n\t\t\t\tthis._switchTo(\"hours\");\n\t\t\t\tclock._modifyValue(isPageUp(evt));\n\t\t\t}\n\t\t\tevt.preventDefault();\n\t\t} else if (isPageUpShift(evt) || isPageDownShift(evt)) {\n\t\t\t// Shift+PageUp/Shift+PageDown increase/decrease minutes clock\n\t\t\tclock = this._clockComponent(\"minutes\");\n\t\t\tif (clock && !clock.disabled) {\n\t\t\t\tthis._switchTo(\"minutes\");\n\t\t\t\tclock._modifyValue(isPageUpShift(evt));\n\t\t\t}\n\t\t\tevt.preventDefault();\n\t\t} else if (isPageUpShiftCtrl(evt) || isPageDownShiftCtrl(evt)) {\n\t\t\t// Ctrl+Shift+PageUp/Ctrl+Shift+PageDown increase/decrease seconds clock\n\t\t\tclock = this._clockComponent(\"seconds\");\n\t\t\tif (clock && !clock.disabled) {\n\t\t\t\tthis._switchTo(\"seconds\");\n\t\t\t\tclock._modifyValue(isPageUpShiftCtrl(evt));\n\t\t\t}\n\t\t\tevt.preventDefault();\n\t\t} else if (isKeyA(evt) || isKeyP(evt)) {\n\t\t\t// A/P selects AM/PM segmented button item\n\t\t\tconst buttonAmPm = this._buttonAmPm();\n\t\t\tif (buttonAmPm) {\n\t\t\t\tbuttonAmPm.items[0].selected = isKeyA(evt);\n\t\t\t\tbuttonAmPm.items[1].selected = isKeyP(evt);\n\t\t\t\tconst period = isKeyA(evt) ? buttonAmPm.items[0].textContent : buttonAmPm.items[1].textContent;\n\t\t\t\tperiod && this._calculatePeriodChange(period);\n\t\t\t}\n\t\t\tevt.preventDefault();\n\t\t} else if (isColon(evt)) {\n\t\t\t// Colon (:) - Switch to next clock\n\t\t\tthis._keyboardBuffer = \"\";\n\t\t\tthis._exactMatch = undefined;\n\t\t\tthis._resetCooldown(true);\n\t\t\tthis._switchNextClock(true);\n\t\t} else if (isNumber(evt) && this._entities[this._activeIndex]) {\n\t\t\t// Direct number entry\n\t\t\tthis._exactMatch = undefined;\n\t\t\tthis._resetCooldown(true);\n\t\t\tthis._numbersInput(evt);\n\t\t}\n\t}\n\n\t/**\n\t * Handles direct numbers entry.\n\t * @param evt Event object\n\t */\n\t_numbersInput(evt: KeyboardEvent) {\n\t\tconst char = evt.key;\n\t\tconst bufferStr = this._keyboardBuffer + char;\n\t\tconst bufferNum = parseInt(bufferStr);\n\t\tconst entity = this._entities[this._activeIndex];\n\t\tlet activeClock = this._clockComponent(this._activeIndex);\n\n\t\tif (!entity || !entity.attributes) {\n\t\t\treturn;\n\t\t}\n\t\tif (bufferNum > entity.attributes.max) {\n\t\t\t// value accumulated in the buffer (old entry + new entry) is greater than the clock maximum value,\n\t\t\t// so assign old entry to the current clock and then switch to the next clock, and add new entry as an old value\n\t\t\tactiveClock && activeClock._setSelectedValue(parseInt(this._keyboardBuffer));\n\t\t\tthis._switchNextClock();\n\t\t\tthis._keyboardBuffer = char;\n\t\t\tactiveClock = this._clockComponent(this._activeIndex);\n\t\t\tactiveClock && activeClock._setSelectedValue(parseInt(char));\n\t\t\tthis._resetCooldown(true);\n\t\t} else {\n\t\t\t// value is less than clock's max value, so add new entry to the buffer\n\t\t\tthis._keyboardBuffer = bufferStr;\n\t\t\tactiveClock && activeClock._setSelectedValue(parseInt(this._keyboardBuffer));\n\t\t\tif (this._keyboardBuffer.length === 2 || parseInt(`${this._keyboardBuffer}0`) > entity.attributes.max) {\n\t\t\t\t// if buffer length is 2, or buffer value + one more (any) number is greater than clock's max value\n\t\t\t\t// there is no place for more entry - just set buffer as a value, and switch to the next clock\n\t\t\t\tthis._resetCooldown(this._keyboardBuffer.length !== 2);\n\t\t\t\tthis._keyboardBuffer = \"\";\n\t\t\t\tthis._switchNextClock();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Focuses the first available button.\n\t */\n\t_focusFirstButton() {\n\t\tthis._activeIndex = 0;\n\t\tthis._buttonComponent(0)!.focus();\n\t}\n\n\t/**\n\t * Sets the exact match value. Must be overriden.\n\t */\n\t_setExactMatch() {\n\t\tconst clock = this._clockComponent(this._activeIndex);\n\t\tclock && this._exactMatch !== undefined && clock._setSelectedValue(this._exactMatch);\n\t}\n\n\t/**\n\t * Creates clock and button components according to the display format pattern.\n\t */\n\t_createComponents() {\n\t\tconst time = {\n\t\t\thours: parseInt(this._hours),\n\t\t\tminutes: parseInt(this._minutes),\n\t\t\tseconds: parseInt(this._seconds),\n\t\t};\n\n\t\tthis._entities = [];\n\t\tthis._periods = [];\n\t\tthis._componentMap = {\n\t\t\thours: -1,\n\t\t\tminutes: -1,\n\t\t\tseconds: -1,\n\t\t};\n\t\tif (this._hasHoursComponent) {\n\t\t\t// add Hours clock\n\t\t\tthis._componentMap.hours = this._entities.length;\n\t\t\tthis._entities.push({\n\t\t\t\t\"label\": this.hoursLabel,\n\t\t\t\t\"entity\": \"hours\",\n\t\t\t\t\"itemMin\": 1,\n\t\t\t\t\"itemMax\": 12,\n\t\t\t\t\"value\": time.hours,\n\t\t\t\t\"stringValue\": this._hours,\n\t\t\t\t\"textValue\": `${time.hours} ${this.hoursLabel}`,\n\t\t\t\t\"displayStep\": 1,\n\t\t\t\t\"lastItemReplacement\": this._hoursConfiguration.isTwelveHoursFormat ? -1 : 0,\n\t\t\t\t\"showInnerCircle\": !this._hoursConfiguration.isTwelveHoursFormat,\n\t\t\t\t\"prependZero\": this._zeroPaddedHours,\n\t\t\t\t\"hasSeparator\": this._entities.length > 0,\n\t\t\t\t\"active\": false,\n\t\t\t\t\"attributes\": {\n\t\t\t\t\t\"min\": this._hoursConfiguration.minHour,\n\t\t\t\t\t\"max\": this._hoursConfiguration.maxHour,\n\t\t\t\t\t\"step\": 1,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tif (this._hasMinutesComponent) {\n\t\t\t// add Minutes clock\n\t\t\tthis._componentMap.minutes = this._entities.length;\n\t\t\tthis._entities.push({\n\t\t\t\t\"label\": this.minutesLabel,\n\t\t\t\t\"entity\": \"minutes\",\n\t\t\t\t\"itemMin\": 1,\n\t\t\t\t\"itemMax\": 60,\n\t\t\t\t\"value\": time.minutes,\n\t\t\t\t\"stringValue\": this._minutes,\n\t\t\t\t\"textValue\": `${time.minutes} ${this.minutesLabel}`, // possible concatenation\n\t\t\t\t\"displayStep\": 5,\n\t\t\t\t\"lastItemReplacement\": 0,\n\t\t\t\t\"showInnerCircle\": false,\n\t\t\t\t\"prependZero\": false,\n\t\t\t\t\"hasSeparator\": this._entities.length > 0,\n\t\t\t\t\"active\": false,\n\t\t\t\t\"attributes\": {\n\t\t\t\t\t\"min\": 0,\n\t\t\t\t\t\"max\": 59,\n\t\t\t\t\t\"step\": 1,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tif (this._hasSecondsComponent) {\n\t\t\t// add Seconds clock\n\t\t\tthis._componentMap.seconds = this._entities.length;\n\t\t\tthis._entities.push({\n\t\t\t\t\"label\": this.secondsLabel,\n\t\t\t\t\"entity\": \"seconds\",\n\t\t\t\t\"itemMin\": 1,\n\t\t\t\t\"itemMax\": 60,\n\t\t\t\t\"value\": time.seconds,\n\t\t\t\t\"stringValue\": this._seconds,\n\t\t\t\t\"textValue\": `${time.seconds} ${this.secondsLabel}`, // possible concatenation\n\t\t\t\t\"displayStep\": 5,\n\t\t\t\t\"lastItemReplacement\": 0,\n\t\t\t\t\"showInnerCircle\": false,\n\t\t\t\t\"prependZero\": false,\n\t\t\t\t\"hasSeparator\": this._entities.length > 0,\n\t\t\t\t\"active\": false,\n\t\t\t\t\"attributes\": {\n\t\t\t\t\t\"min\": 0,\n\t\t\t\t\t\"max\": 59,\n\t\t\t\t\t\"step\": 1,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tthis._entities[this._activeIndex].active = true;\n\t\tthis._entities[this._activeIndex].focused = this._focused && !this._amPmFocused;\n\t\tthis._createPeriodComponent();\n\t}\n\n\t/**\n\t * Switches to the specific clock by name.\n\t * @param clockName the name of the clock\n\t */\n\t_switchTo(clockName: string) {\n\t\tconst key = this._componentKey(clockName);\n\t\tif (this._componentMap[key] !== undefined) {\n\t\t\tthis._switchClock(this._componentMap[key]);\n\t\t}\n\t}\n\n\t/**\n\t * Switches to the specific clock by its index in _clocks property.\n\t * @param clockIndex the index of the clock\n\t */\n\t_switchClock(clockIndex: number) {\n\t\tconst newButton = this._buttonComponent(clockIndex);\n\n\t\tif (this._entities.length && clockIndex < this._entities.length && newButton) {\n\t\t\tthis._entities[this._activeIndex].active = false;\n\t\t\tthis._entities[this._activeIndex].focused = false;\n\t\t\tthis._activeIndex = clockIndex;\n\t\t\tthis._entities[this._activeIndex].active = true;\n\t\t\tthis._entities[this._activeIndex].focused = this._focused && !this._amPmFocused;\n\t\t\tnewButton.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Switches to the next available clock.\n\t * @param wrapAround whether to switch to the first clock if there are no next clock\n\t */\n\t_switchNextClock(wrapAround = false) {\n\t\tlet activeIndex = this._activeIndex;\n\t\tconst startActiveIndex = activeIndex;\n\t\tconst activeClock = this._clockComponent(activeIndex);\n\n\t\tdo {\n\t\t\tactiveIndex++;\n\t\t\tif (activeIndex >= this._entities.length) {\n\t\t\t\tactiveIndex = wrapAround ? 0 : this._entities.length - 1;\n\t\t\t}\n\t\t// false-positive finding of no-unmodified-loop-condition rule\n\t\t// eslint-disable-next-line no-unmodified-loop-condition\n\t\t} while (activeClock && activeClock.disabled && activeIndex !== startActiveIndex && (wrapAround || activeIndex < this._entities.length - 1));\n\n\t\tconst newClock = this._clockComponent(activeIndex);\n\n\t\tif (activeIndex !== startActiveIndex && newClock && !newClock.disabled) {\n\t\t\tthis._switchClock(activeIndex);\n\t\t}\n\t}\n\n\t/**\n\t * Clock 'change' event handler.\n\t * @param evt Event object\n\t */\n\t_clockChange(evt: CustomEvent<TimePickerClockChangeEventDetail>) {\n\t\tconst index = this._getIndexFromId((evt.target as HTMLElement).id);\n\t\tconst stringValue = evt.detail.stringValue;\n\t\tconst value = evt.detail.value;\n\t\tconst button = this._buttonComponent(index);\n\n\t\tif (!button) {\n\t\t\treturn;\n\t\t}\n\t\tthis._entities[index].stringValue = stringValue;\n\t\tthis._entities[index].value = value;\n\t\tthis._entities = JSON.parse(JSON.stringify(this._entities));\n\t\tswitch (index) {\n\t\tcase this._componentMap.hours:\n\t\t\tthis._hoursChange(value);\n\t\t\tbreak;\n\t\tcase this._componentMap.minutes:\n\t\t\tthis._minutesChange(value);\n\t\t\tbreak;\n\t\tcase this._componentMap.seconds:\n\t\t\tthis._secondsChange(value);\n\t\t\tbreak;\n\t\t}\n\t\tif (evt.detail.finalChange) {\n\t\t\tif (this._activeIndex < this._entities.length - 1) {\n\t\t\t\tthis._switchNextClock();\n\t\t\t} else {\n\t\t\t\tbutton.focus();\n\t\t\t}\n\t\t}\n\t}\n}\n\nTimeSelectionClocks.define();\n\nexport default TimeSelectionClocks;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}