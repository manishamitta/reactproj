{"ast":null,"code":"\"use strict\";\n\nimport { camelToKebabCase as s, kebabToCamelCase as l } from \"./util/StringHelper.js\";\nimport { getSlottedNodes as d } from \"./util/SlotsHelper.js\";\nimport { getEffectiveScopingSuffixForTag as p } from \"./CustomElementsScopeUtils.js\";\nclass u {\n  constructor(t) {\n    this.metadata = t;\n  }\n  getInitialState() {\n    if (Object.prototype.hasOwnProperty.call(this, \"_initialState\")) return this._initialState;\n    const t = {};\n    if (this.slotsAreManaged()) {\n      const o = this.getSlots();\n      for (const [e, i] of Object.entries(o)) {\n        const n = i.propertyName || e;\n        t[n] = [], t[l(n)] = t[n];\n      }\n    }\n    return this._initialState = t, t;\n  }\n  static validateSlotValue(t, r) {\n    return g(t, r);\n  }\n  getPureTag() {\n    return this.metadata.tag || \"\";\n  }\n  getFeatures() {\n    return this.metadata.features || [];\n  }\n  getTag() {\n    const t = this.metadata.tag;\n    if (!t) return \"\";\n    const r = p(t);\n    return r ? `${t}-${r}` : t;\n  }\n  hasAttribute(t) {\n    const r = this.getProperties()[t];\n    return r.type !== Object && r.type !== Array && !r.noAttribute;\n  }\n  getPropertiesList() {\n    return Object.keys(this.getProperties());\n  }\n  getAttributesList() {\n    return this.getPropertiesList().filter(this.hasAttribute.bind(this)).map(s);\n  }\n  canSlotText() {\n    return this.getSlots().default?.type === Node;\n  }\n  hasSlots() {\n    return !!Object.entries(this.getSlots()).length;\n  }\n  hasIndividualSlots() {\n    return this.slotsAreManaged() && Object.values(this.getSlots()).some(t => t.individualSlots);\n  }\n  slotsAreManaged() {\n    return !!this.metadata.managedSlots;\n  }\n  supportsF6FastNavigation() {\n    return !!this.metadata.fastNavigation;\n  }\n  getProperties() {\n    return this.metadata.properties || (this.metadata.properties = {}), this.metadata.properties;\n  }\n  getEvents() {\n    return this.metadata.events || (this.metadata.events = {}), this.metadata.events;\n  }\n  getSlots() {\n    return this.metadata.slots || (this.metadata.slots = {}), this.metadata.slots;\n  }\n  isLanguageAware() {\n    return !!this.metadata.languageAware;\n  }\n  isThemeAware() {\n    return !!this.metadata.themeAware;\n  }\n  getShadowRootOptions() {\n    return this.metadata.shadowRootOptions || {};\n  }\n  isFormAssociated() {\n    return !!this.metadata.formAssociated;\n  }\n  shouldInvalidateOnChildChange(t, r, o) {\n    const e = this.getSlots()[t].invalidateOnChildChange;\n    if (e === void 0) return !1;\n    if (typeof e == \"boolean\") return e;\n    if (typeof e == \"object\") {\n      if (r === \"property\") {\n        if (e.properties === void 0) return !1;\n        if (typeof e.properties == \"boolean\") return e.properties;\n        if (Array.isArray(e.properties)) return e.properties.includes(o);\n        throw new Error(\"Wrong format for invalidateOnChildChange.properties: boolean or array is expected\");\n      }\n      if (r === \"slot\") {\n        if (e.slots === void 0) return !1;\n        if (typeof e.slots == \"boolean\") return e.slots;\n        if (Array.isArray(e.slots)) return e.slots.includes(o);\n        throw new Error(\"Wrong format for invalidateOnChildChange.slots: boolean or array is expected\");\n      }\n    }\n    throw new Error(\"Wrong format for invalidateOnChildChange: boolean or object is expected\");\n  }\n}\nconst g = (a, t) => (a && d(a).forEach(r => {\n  if (!(r instanceof t.type)) throw new Error(`The element is not of type ${t.type.toString()}`);\n}), a);\nexport default u;","map":{"version":3,"names":["camelToKebabCase","s","kebabToCamelCase","l","getSlottedNodes","d","getEffectiveScopingSuffixForTag","p","u","constructor","t","metadata","getInitialState","Object","prototype","hasOwnProperty","call","_initialState","slotsAreManaged","o","getSlots","e","i","entries","n","propertyName","validateSlotValue","r","g","getPureTag","tag","getFeatures","features","getTag","hasAttribute","getProperties","type","Array","noAttribute","getPropertiesList","keys","getAttributesList","filter","bind","map","canSlotText","default","Node","hasSlots","length","hasIndividualSlots","values","some","individualSlots","managedSlots","supportsF6FastNavigation","fastNavigation","properties","getEvents","events","slots","isLanguageAware","languageAware","isThemeAware","themeAware","getShadowRootOptions","shadowRootOptions","isFormAssociated","formAssociated","shouldInvalidateOnChildChange","invalidateOnChildChange","isArray","includes","Error","validateSingleSlot","a","forEach","toString"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-base/src/UI5ElementMetadata.ts"],"sourcesContent":["import { camelToKebabCase, kebabToCamelCase } from \"./util/StringHelper.js\";\nimport { getSlottedNodes } from \"./util/SlotsHelper.js\";\nimport { getEffectiveScopingSuffixForTag } from \"./CustomElementsScopeUtils.js\";\n\ntype SlotInvalidation = {\n\tproperties: boolean | Array<string>,\n\tslots: boolean | Array<string>,\n}\n\ntype Slot = {\n\ttype: typeof Node | typeof HTMLElement,\n\tdefault?: boolean,\n\tpropertyName?: string,\n\tindividualSlots?: boolean,\n\tinvalidateOnChildChange?: boolean | SlotInvalidation,\n};\n\ntype SlotValue = Node;\n\ntype Property = {\n\ttype?: BooleanConstructor | StringConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor,\n\tnoAttribute?: boolean,\n\tconverter?: {\n\t\tfromAttribute(value: string | null, type: unknown): string | number | boolean | null | undefined,\n\t\ttoAttribute(value: unknown, type: unknown): string | null,\n\t}\n}\n\ntype PropertyValue = boolean | number | string | object | undefined | null;\n\ntype EventData = Record<string, object>;\n\ntype Metadata = {\n\ttag?: string,\n\tmanagedSlots?: boolean,\n\tproperties?: Record<string, Property>,\n\tslots?: Record<string, Slot>,\n\tevents?: EventData,\n\tfastNavigation?: boolean,\n\tthemeAware?: boolean,\n\tlanguageAware?: boolean,\n\tformAssociated?: boolean,\n\tshadowRootOptions?: Partial<ShadowRootInit>\n\tfeatures?: Array<string>\n};\n\ntype State = Record<string, PropertyValue | Array<SlotValue>>;\n\n/**\n * @class\n * @public\n */\nclass UI5ElementMetadata {\n\tmetadata: Metadata;\n\t_initialState: State | undefined;\n\n\tconstructor(metadata: Metadata) {\n\t\tthis.metadata = metadata;\n\t}\n\n\tgetInitialState() {\n\t\tif (Object.prototype.hasOwnProperty.call(this, \"_initialState\")) {\n\t\t\treturn this._initialState!;\n\t\t}\n\t\tconst initialState: State = {};\n\t\tconst slotsAreManaged = this.slotsAreManaged();\n\n\t\t// Initialize slots\n\t\tif (slotsAreManaged) {\n\t\t\tconst slots = this.getSlots();\n\t\t\tfor (const [slotName, slotData] of Object.entries<Slot>(slots)) { // eslint-disable-line\n\t\t\t\tconst propertyName = slotData.propertyName || slotName;\n\t\t\t\tinitialState[propertyName] = [];\n\t\t\t\tinitialState[kebabToCamelCase(propertyName)] = initialState[propertyName];\n\t\t\t}\n\t\t}\n\n\t\tthis._initialState = initialState;\n\t\treturn initialState;\n\t}\n\n\t/**\n\t * Validates the slot's value and returns it if correct\n\t * or throws an exception if not.\n\t * **Note:** Only intended for use by UI5Element.js\n\t * @public\n\t */\n\tstatic validateSlotValue(value: Node, slotData: Slot): Node {\n\t\treturn validateSingleSlot(value, slotData);\n\t}\n\n\t/**\n\t * Returns the tag of the UI5 Element without the scope\n\t * @public\n\t */\n\tgetPureTag(): string {\n\t\treturn this.metadata.tag || \"\";\n\t}\n\n\t/**\n\t * Returns the tag of the UI5 Element without the scope\n\t * @private\n\t */\n\tgetFeatures(): Array<string> {\n\t\treturn this.metadata.features || [];\n\t}\n\n\t/**\n\t * Returns the tag of the UI5 Element\n\t * @public\n\t */\n\tgetTag(): string {\n\t\tconst pureTag = this.metadata.tag;\n\n\t\tif (!pureTag) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tconst suffix = getEffectiveScopingSuffixForTag(pureTag);\n\t\tif (!suffix) {\n\t\t\treturn pureTag;\n\t\t}\n\n\t\treturn `${pureTag}-${suffix}`;\n\t}\n\n\t/**\n\t * Determines whether a property should have an attribute counterpart\n\t * @public\n\t * @param propName\n\t */\n\thasAttribute(propName: string): boolean {\n\t\tconst propData = this.getProperties()[propName];\n\t\treturn propData.type !== Object && propData.type !== Array && !propData.noAttribute;\n\t}\n\n\t/**\n\t * Returns an array with the properties of the UI5 Element (in camelCase)\n\t * @public\n\t */\n\tgetPropertiesList(): Array<string> {\n\t\treturn Object.keys(this.getProperties());\n\t}\n\n\t/**\n\t * Returns an array with the attributes of the UI5 Element (in kebab-case)\n\t * @public\n\t */\n\tgetAttributesList(): Array<string> {\n\t\treturn this.getPropertiesList().filter(this.hasAttribute.bind(this)).map(camelToKebabCase);\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element has a default slot of type Node, therefore can slot text\n\t */\n\tcanSlotText() {\n\t\treturn (this.getSlots().default)?.type === Node;\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element supports any slots\n\t * @public\n\t */\n\thasSlots(): boolean {\n\t\treturn !!Object.entries(this.getSlots()).length;\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element supports any slots with \"individualSlots: true\"\n\t * @public\n\t */\n\thasIndividualSlots(): boolean {\n\t\treturn this.slotsAreManaged() && Object.values(this.getSlots()).some(slotData => slotData.individualSlots);\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element needs to invalidate if children are added/removed/changed\n\t * @public\n\t */\n\tslotsAreManaged(): boolean {\n\t\treturn !!this.metadata.managedSlots;\n\t}\n\n\t/**\n\t * Determines whether this control supports F6 fast navigation\n\t * @public\n\t */\n\tsupportsF6FastNavigation(): boolean {\n\t\treturn !!this.metadata.fastNavigation;\n\t}\n\n\t/**\n\t * Returns an object with key-value pairs of properties and their metadata definitions\n\t * @public\n\t */\n\tgetProperties(): Record<string, Property> {\n\t\tif (!this.metadata.properties) {\n\t\t\tthis.metadata.properties = {};\n\t\t}\n\t\treturn this.metadata.properties;\n\t}\n\n\t/**\n\t * Returns an object with key-value pairs of events and their metadata definitions\n\t * @public\n\t */\n\tgetEvents(): EventData {\n\t\tif (!this.metadata.events) {\n\t\t\tthis.metadata.events = {};\n\t\t}\n\t\treturn this.metadata.events;\n\t}\n\n\t/**\n\t * Returns an object with key-value pairs of slots and their metadata definitions\n\t * @public\n\t */\n\t getSlots(): Record<string, Slot> {\n\t\tif (!this.metadata.slots) {\n\t\t\tthis.metadata.slots = {};\n\t\t}\n\t\treturn this.metadata.slots;\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element has any translatable texts (needs to be invalidated upon language change)\n\t */\n\tisLanguageAware(): boolean {\n\t\treturn !!this.metadata.languageAware;\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element has any theme dependant carachteristics.\n\t */\n\t isThemeAware(): boolean {\n\t\treturn !!this.metadata.themeAware;\n\t}\n\n\tgetShadowRootOptions(): Partial<ShadowRootInit> {\n\t\treturn this.metadata.shadowRootOptions || {};\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element has any theme dependant carachteristics.\n\t */\n\t isFormAssociated(): boolean {\n\t\treturn !!this.metadata.formAssociated;\n\t}\n\n\t/**\n\t * Matches a changed entity (property/slot) with the given name against the \"invalidateOnChildChange\" configuration\n\t * and determines whether this should cause and invalidation\n\t *\n\t * @param slotName the name of the slot in which a child was changed\n\t * @param type the type of change in the child: \"property\" or \"slot\"\n\t * @param name the name of the property/slot that changed\n\t */\n\tshouldInvalidateOnChildChange(slotName: string, type: \"property\" | \"slot\", name: string): boolean {\n\t\tconst config = this.getSlots()[slotName].invalidateOnChildChange;\n\n\t\t// invalidateOnChildChange was not set in the slot metadata - by default child changes do not affect the component\n\t\tif (config === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// The simple format was used: invalidateOnChildChange: true/false;\n\t\tif (typeof config === \"boolean\") {\n\t\t\treturn config;\n\t\t}\n\n\t\t// The complex format was used: invalidateOnChildChange: { properties, slots }\n\t\tif (typeof config === \"object\") {\n\t\t\t// A property was changed\n\t\t\tif (type === \"property\") {\n\t\t\t\t// The config object does not have a properties field\n\t\t\t\tif (config.properties === undefined) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// The config object has the short format: properties: true/false\n\t\t\t\tif (typeof config.properties === \"boolean\") {\n\t\t\t\t\treturn config.properties;\n\t\t\t\t}\n\n\t\t\t\t// The config object has the complex format: properties: [...]\n\t\t\t\tif (Array.isArray(config.properties)) {\n\t\t\t\t\treturn config.properties.includes(name);\n\t\t\t\t}\n\n\t\t\t\tthrow new Error(\"Wrong format for invalidateOnChildChange.properties: boolean or array is expected\");\n\t\t\t}\n\n\t\t\t// A slot was changed\n\t\t\tif (type === \"slot\") {\n\t\t\t\t// The config object does not have a slots field\n\t\t\t\tif (config.slots === undefined) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// The config object has the short format: slots: true/false\n\t\t\t\tif (typeof config.slots === \"boolean\") {\n\t\t\t\t\treturn config.slots;\n\t\t\t\t}\n\n\t\t\t\t// The config object has the complex format: slots: [...]\n\t\t\t\tif (Array.isArray(config.slots)) {\n\t\t\t\t\treturn config.slots.includes(name);\n\t\t\t\t}\n\n\t\t\t\tthrow new Error(\"Wrong format for invalidateOnChildChange.slots: boolean or array is expected\");\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(\"Wrong format for invalidateOnChildChange: boolean or object is expected\");\n\t}\n}\n\nconst validateSingleSlot = (value: Node, slotData: Slot) => {\n\tvalue && getSlottedNodes(value).forEach(el => {\n\t\tif (!(el instanceof slotData.type)) {\n\t\t\tthrow new Error(`The element is not of type ${slotData.type.toString()}`);\n\t\t}\n\t});\n\n\treturn value;\n};\n\nexport default UI5ElementMetadata;\nexport type {\n\tProperty,\n\tPropertyValue,\n\tSlot,\n\tSlotValue,\n\tEventData,\n\tState,\n\tMetadata,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}