{"ast":null,"code":"/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\nimport toHex from \"../strings/toHex.js\";\n/* eslint-disable no-control-regex -- special characters are really needed here! */\n/**\n * RegExp and escape function for HTML escaping\n */\nvar rHtml = /[\\x00-\\x2b\\x2f\\x3a-\\x40\\x5b-\\x5e\\x60\\x7b-\\xff\\u2028\\u2029]/g,\n  rHtmlReplace = /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f-\\x9f]/,\n  mHtmlLookup = {\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    \"&\": \"&amp;\",\n    \"\\\"\": \"&quot;\"\n  };\n/* eslint-enable no-control-regex */\n\nvar fnHtml = function (sChar) {\n  var sEncoded = mHtmlLookup[sChar];\n  if (!sEncoded) {\n    if (rHtmlReplace.test(sChar)) {\n      sEncoded = \"&#xfffd;\";\n    } else {\n      sEncoded = \"&#x\" + toHex(sChar.charCodeAt(0)) + \";\";\n    }\n    mHtmlLookup[sChar] = sEncoded;\n  }\n  return sEncoded;\n};\n\n/*\n * Encoding according to the Secure Programming Guide\n * <SAPWIKI>/wiki/display/NWCUIAMSIM/XSS+Secure+Programming+Guide\n */\n\n/**\n * Encode the string for inclusion into XML content/attribute.\n *\n * @function\n * @since 1.58\n * @alias module:sap/base/security/encodeXML\n * @param {string} sString The string to be escaped\n * @returns {string} The encoded string\n * @SecValidate {0|return|XSS} validates the given string for XML contexts\n * @public\n */\nvar fnEncodeXML = function (sString) {\n  return sString.replace(rHtml, fnHtml);\n};\nexport default fnEncodeXML;","map":{"version":3,"names":["toHex","rHtml","rHtmlReplace","mHtmlLookup","fnHtml","sChar","sEncoded","test","charCodeAt","fnEncodeXML","sString","replace"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-base/dist/prod/sap/base/security/encodeXML.js"],"sourcesContent":["/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\nimport toHex from \"../strings/toHex.js\";\n/* eslint-disable no-control-regex -- special characters are really needed here! */\n/**\n * RegExp and escape function for HTML escaping\n */\nvar rHtml = /[\\x00-\\x2b\\x2f\\x3a-\\x40\\x5b-\\x5e\\x60\\x7b-\\xff\\u2028\\u2029]/g,\n  rHtmlReplace = /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f-\\x9f]/,\n  mHtmlLookup = {\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    \"&\": \"&amp;\",\n    \"\\\"\": \"&quot;\"\n  };\n/* eslint-enable no-control-regex */\n\nvar fnHtml = function (sChar) {\n  var sEncoded = mHtmlLookup[sChar];\n  if (!sEncoded) {\n    if (rHtmlReplace.test(sChar)) {\n      sEncoded = \"&#xfffd;\";\n    } else {\n      sEncoded = \"&#x\" + toHex(sChar.charCodeAt(0)) + \";\";\n    }\n    mHtmlLookup[sChar] = sEncoded;\n  }\n  return sEncoded;\n};\n\n/*\n * Encoding according to the Secure Programming Guide\n * <SAPWIKI>/wiki/display/NWCUIAMSIM/XSS+Secure+Programming+Guide\n */\n\n/**\n * Encode the string for inclusion into XML content/attribute.\n *\n * @function\n * @since 1.58\n * @alias module:sap/base/security/encodeXML\n * @param {string} sString The string to be escaped\n * @returns {string} The encoded string\n * @SecValidate {0|return|XSS} validates the given string for XML contexts\n * @public\n */\nvar fnEncodeXML = function (sString) {\n  return sString.replace(rHtml, fnHtml);\n};\nexport default fnEncodeXML;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,qBAAqB;AACvC;AACA;AACA;AACA;AACA,IAAIC,KAAK,GAAG,6DAA6D;EACvEC,YAAY,GAAG,uCAAuC;EACtDC,WAAW,GAAG;IACZ,GAAG,EAAE,MAAM;IACX,GAAG,EAAE,MAAM;IACX,GAAG,EAAE,OAAO;IACZ,IAAI,EAAE;EACR,CAAC;AACH;;AAEA,IAAIC,MAAM,GAAG,SAAAA,CAAUC,KAAK,EAAE;EAC5B,IAAIC,QAAQ,GAAGH,WAAW,CAACE,KAAK,CAAC;EACjC,IAAI,CAACC,QAAQ,EAAE;IACb,IAAIJ,YAAY,CAACK,IAAI,CAACF,KAAK,CAAC,EAAE;MAC5BC,QAAQ,GAAG,UAAU;IACvB,CAAC,MAAM;MACLA,QAAQ,GAAG,KAAK,GAAGN,KAAK,CAACK,KAAK,CAACG,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG;IACrD;IACAL,WAAW,CAACE,KAAK,CAAC,GAAGC,QAAQ;EAC/B;EACA,OAAOA,QAAQ;AACjB,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIG,WAAW,GAAG,SAAAA,CAAUC,OAAO,EAAE;EACnC,OAAOA,OAAO,CAACC,OAAO,CAACV,KAAK,EAAEG,MAAM,CAAC;AACvC,CAAC;AACD,eAAeK,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}