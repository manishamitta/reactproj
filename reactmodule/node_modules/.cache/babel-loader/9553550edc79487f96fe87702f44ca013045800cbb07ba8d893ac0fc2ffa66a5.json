{"ast":null,"code":"'use client';\n\nimport '@ui5/webcomponents/dist/BusyIndicator.js';\nimport { withWebComponent } from '../../internal/withWebComponent.js';\n/**\n * The `BusyIndicator` signals that some operation is going on and that the\n * user must wait. It does not block the current UI screen so other operations could be triggered in parallel.\n * It displays 3 dots and each dot expands and shrinks at a different rate, resulting in a cascading flow of animation.\n *\n * ### Usage\n * For the `BusyIndicator` you can define the size, the text and whether it is shown or hidden.\n * In order to hide it, use the \"active\" property.\n *\n * In order to show busy state over an HTML element, simply nest the HTML element in a `BusyIndicator` instance.\n *\n * **Note:** Since `BusyIndicator` has `display: inline-block;` by default and no width of its own,\n * whenever you need to wrap a block-level element, you should set `display: block` to the busy indicator as well.\n *\n * #### When to use:\n *\n * - The user needs to be able to cancel the operation.\n * - Only part of the application or a particular component is affected.\n *\n * #### When not to use:\n *\n * - The operation takes less than one second.\n * - You need to block the screen and prevent the user from starting another activity.\n * - Do not show multiple busy indicators at once.\n *\n *\n *\n * __Note__: This is a UI5 Web Component! [Repository](https://github.com/SAP/ui5-webcomponents) | [Documentation](https://sap.github.io/ui5-webcomponents/)\n */\nconst BusyIndicator = withWebComponent('ui5-busy-indicator', ['delay', 'size', 'text', 'textPlacement'], ['active'], [], []);\nBusyIndicator.displayName = 'BusyIndicator';\nexport { BusyIndicator };","map":{"version":3,"names":["withWebComponent","BusyIndicator","displayName"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-react/dist/webComponents/BusyIndicator/index.js"],"sourcesContent":["'use client';\n\nimport '@ui5/webcomponents/dist/BusyIndicator.js';\nimport { withWebComponent } from '../../internal/withWebComponent.js';\n/**\n * The `BusyIndicator` signals that some operation is going on and that the\n * user must wait. It does not block the current UI screen so other operations could be triggered in parallel.\n * It displays 3 dots and each dot expands and shrinks at a different rate, resulting in a cascading flow of animation.\n *\n * ### Usage\n * For the `BusyIndicator` you can define the size, the text and whether it is shown or hidden.\n * In order to hide it, use the \"active\" property.\n *\n * In order to show busy state over an HTML element, simply nest the HTML element in a `BusyIndicator` instance.\n *\n * **Note:** Since `BusyIndicator` has `display: inline-block;` by default and no width of its own,\n * whenever you need to wrap a block-level element, you should set `display: block` to the busy indicator as well.\n *\n * #### When to use:\n *\n * - The user needs to be able to cancel the operation.\n * - Only part of the application or a particular component is affected.\n *\n * #### When not to use:\n *\n * - The operation takes less than one second.\n * - You need to block the screen and prevent the user from starting another activity.\n * - Do not show multiple busy indicators at once.\n *\n *\n *\n * __Note__: This is a UI5 Web Component! [Repository](https://github.com/SAP/ui5-webcomponents) | [Documentation](https://sap.github.io/ui5-webcomponents/)\n */\nconst BusyIndicator = withWebComponent('ui5-busy-indicator', ['delay', 'size', 'text', 'textPlacement'], ['active'], [], []);\nBusyIndicator.displayName = 'BusyIndicator';\nexport { BusyIndicator };"],"mappings":"AAAA,YAAY;;AAEZ,OAAO,0CAA0C;AACjD,SAASA,gBAAgB,QAAQ,oCAAoC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAGD,gBAAgB,CAAC,oBAAoB,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,eAAe,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;AAC5HC,aAAa,CAACC,WAAW,GAAG,eAAe;AAC3C,SAASD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}