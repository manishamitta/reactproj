{"ast":null,"code":"import Core from \"../Core.js\"; /*!\n                               * OpenUI5\n                               * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n                               * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n                               */\n// Provides class sap.ui.core.date.UniversalDate\nimport BaseObject from \"../../base/Object.js\";\nimport Configuration from \"../Configuration.js\";\nimport LocaleData from \"../LocaleData.js\";\nimport _Calendars from \"./_Calendars.js\";\nimport CalendarUtils from \"./CalendarUtils.js\";\nimport CalendarWeekNumbering from \"./CalendarWeekNumbering.js\";\nimport UI5Date from \"./UI5Date.js\";\n/**\n * Constructor for UniversalDate.\n *\n * @class\n * The UniversalDate is the base class of calendar date instances. It contains the static methods to create calendar\n * specific instances.\n *\n * The member variable <code>this.oDate</code> contains a date instance\n * (either JavaScript Date or <code>module:sap/ui/core/date/UI5Date</code>) which considers the\n * configured time zone wherever JavaScript Date uses the local browser time zone; see\n * {@link module:sap/ui/core/date/UI5Date#getInstance}. This is the source value of the date\n * information. The prototype contains getters and setters of the Date and is delegating them\n * to the internal date object. Implementations for specific calendars may override methods\n * needed for their specific calendar (e.g. getYear and getEra for Japanese emperor calendar).\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @alias sap.ui.core.date.UniversalDate\n */\nvar UniversalDate = BaseObject.extend(\"sap.ui.core.date.UniversalDate\", /** @lends sap.ui.core.date.UniversalDate.prototype */{\n  constructor: function () {\n    var clDate = UniversalDate.getClass();\n    return this.createDate(clDate, arguments);\n  }\n});\n\n/**\n * Delegates this method to the calender specific implementation.\n *\n * @returns {int}\n *   The number of milliseconds since January 1, 1970, 00:00:00 UTC based on the Gregorian\n *   calendar, for the given calendar specific arguments\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.UTC = function () {\n  var clDate = UniversalDate.getClass();\n  return clDate.UTC.apply(clDate, arguments);\n};\n\n/**\n * Returns a number representing the millisecond since January 1, 1970, 00:00:00 to the current date,\n * see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now Date.now}.\n *\n * @returns {int} A number representing the millisecond since January 1, 1970, 00:00:00 to the current date\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.now = function () {\n  return Date.now();\n};\n\n/**\n * Creates an object of the provided date class and with the given arguments.\n *\n * @param {function} clDate\n *   The constructor function for either <code>Date</code> or an implementation of\n *   <code>sap.ui.core.date.UniversalDate</code>\n * @param {object} aArgs\n *   The <code>arguments</code> object which is given to the constructor of the given date class\n *   to create the date object\n * @returns {sap.ui.core.date.UniversalDate|module:sap/ui/core/date/UI5Date}\n *   The created date, either an UI5Date or UniversalDate instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.createDate = function (clDate, aArgs) {\n  if (clDate === Date) {\n    return UI5Date.getInstance.apply(null, aArgs);\n  }\n  switch (aArgs.length) {\n    case 0:\n      return new clDate();\n    // new Date(new Date()) is officially not supported\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date\n    case 1:\n      return new clDate(aArgs[0] instanceof Date ? aArgs[0].getTime() : aArgs[0]);\n    case 2:\n      return new clDate(aArgs[0], aArgs[1]);\n    case 3:\n      return new clDate(aArgs[0], aArgs[1], aArgs[2]);\n    case 4:\n      return new clDate(aArgs[0], aArgs[1], aArgs[2], aArgs[3]);\n    case 5:\n      return new clDate(aArgs[0], aArgs[1], aArgs[2], aArgs[3], aArgs[4]);\n    case 6:\n      return new clDate(aArgs[0], aArgs[1], aArgs[2], aArgs[3], aArgs[4], aArgs[5]);\n    case 7:\n      return new clDate(aArgs[0], aArgs[1], aArgs[2], aArgs[3], aArgs[4], aArgs[5], aArgs[6]);\n  }\n};\n\n/**\n * Returns an instance of UniversalDate, based on the calendar type from the configuration, or as explicitly\n * defined by parameter. The object contains getters and setters of the JavaScript Date and is delegating them\n * to an internal date object.\n *\n * Note: Prefer this method over calling <code>new UniversalDate</code> with an instance of <code>Date</code>.\n *\n * @param {Date|module:sap/ui/core/date/UI5Date|sap.ui.core.date.UniversalDate} [oDate]\n *   The date object, defaults to <code>UI5Date.getInstance()</code>\n * @param {sap.ui.core.CalendarType} [sCalendarType]\n *   The calendar type, defaults to <code>Core.getConfiguration().getCalendarType()</code>\n * @returns {sap.ui.core.date.UniversalDate}\n *   An instance of <code>UniversalDate</code>\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.getInstance = function (oDate, sCalendarType) {\n  var clDate, oInstance;\n  if (oDate instanceof UniversalDate) {\n    oDate = oDate.getJSDate();\n  }\n  if (oDate && isNaN(oDate.getTime())) {\n    throw new Error(\"The given date object is invalid\");\n  }\n  if (!sCalendarType) {\n    sCalendarType = Configuration.getCalendarType();\n  }\n  clDate = UniversalDate.getClass(sCalendarType);\n  oInstance = Object.create(clDate.prototype);\n  oInstance.oDate = oDate ? UI5Date.getInstance(oDate) : UI5Date.getInstance();\n  oInstance.sCalendarType = sCalendarType;\n  return oInstance;\n};\n\n/**\n * Returns the constructor function of a subclass of <code>UniversalDate</code> for the given calendar type.\n * If no calendar type is given the globally configured calendar type is used.\n *\n * @param {sap.ui.core.CalendarType} sCalendarType the type of the used calendar\n *\n * @returns {function}\n *   The class of the given <code>sCalenderType</code>. If <code>sCalenderType</code> is not\n *   provided, the class of the configured calendar type is returned.\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.getClass = function (sCalendarType) {\n  if (!sCalendarType) {\n    sCalendarType = Configuration.getCalendarType();\n  }\n  return _Calendars.get(sCalendarType);\n};\n\n/**\n * Returns the day of the month of the embedded date instance according to the configured time\n * zone and selected calender.\n *\n * @returns {int}\n *   A number representing the day of the month of the embedded date instance according\n *   to the configured time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getDate\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the day of the week of the embedded date instance according to the configured time zone and\n * selected calender.\n *\n * @returns {int}\n *   A number representing the day of the week of the embedded date instance according to the configured\n *   time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getDay\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the year of the embedded date instance according to the configured time zone and selected calender.\n *\n * @returns {int}\n *   The year of the embedded date instance according to the configured time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getFullYear\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the hours of the embedded date instance according to the configured time zone and selected\n * calender.\n *\n * @returns {int}\n *   A number representing the hours of the embedded date instance according to the configured time zone\n *   and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getHours\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the milliseconds of the embedded date instance according to the configured time zone\n * and selected calender.\n *\n * @returns {int}\n *   A number between 0 and 999 representing the milliseconds of the embedded date instance according to\n *   the configured time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getMilliseconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the minutes of the embedded date instance according to the configured time zone and selected calender.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the minutes of the embedded date instance according to the\n *   configured time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getMinutes\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the month index of the embedded date instance according to the configured time zone\n * and selected calender.\n *\n * @returns {int}\n *   The month index of the embedded date instance according to the configured time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getMonth\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the seconds of the embedded date instance according to the configured time zone and selected calender.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the seconds of the embedded date instance according to the\n *   configured time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getSeconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the difference in minutes between the UTC and the configured time zone for the embedded date.\n *\n * @returns {int}\n *   The difference in minutes between the UTC and the configured time zone for the embedded date\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getTimezoneOffset\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the year of the embedded date instance minus 1900 according to the configured time zone and\n * selected calender. In case of the Gregorian calendar the 1900 is subtracted from the year value.\n *\n * @returns {int}\n *   The year of the embedded date instance (minus 1900 if the Gregorian calendar is selected)\n *   according to the configured time zone and selected calender\n *\n * @deprecated for the Gregorian calendar since version 1.111.0 as it is deprecated in\n *   JavaScript Date, it can be used with other calendars. It still is recommended to use\n *   {@link #getFullYear} instead, independent on the selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getYear\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the timestamp in milliseconds of the embedded date based on the UNIX epoch.\n *\n * @returns {int}\n *   The timestamp in milliseconds of the embedded date based on the UNIX epoch, or <code>NaN</code> if\n *   the embedded date is an invalid date\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getTime\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the day of the month of the embedded date instance according to universal time and\n * selected calender.\n *\n * @returns {int}\n *   A number representing the day of the month of the embedded date instance according\n *   to universal time and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCDate\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n *\n * Returns the day of the week of the embedded date instance according to universal time and\n * selected calender.\n *\n * @returns {int}\n *   A number representing the day of the week of the embedded date instance according to universal\n *   time and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCDay\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the year of the embedded date instance according to universal time and selected calender.\n *\n * @returns {int}\n *   The year of the embedded date instance according to universal time and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCFullYear\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the hours of the embedded date instance according to universal time.\n *\n * @returns {int}\n *   A number representing the hours of the embedded date instance according to universal time\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCHours\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the milliseconds of the embedded date instance according to universal time.\n *\n * @returns {int}\n *   A number between 0 and 999 representing the milliseconds of the embedded date instance\n *   according to universal time\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCMilliseconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the minutes of the embedded date instance according to universal time.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the minutes of the embedded date instance according\n *   to universal time\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCMinutes\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the month index of the embedded date instance according to universal time and\n * selected calender.\n *\n * @returns {int}\n *   The month index of the embedded date instance according to universal time and selected\n *   calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCMonth\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the seconds of the embedded date instance according to universal time.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the seconds of the embedded date instance according\n *   to universal time\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCSeconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the day of the month for the embedded date instance considering the configured time zone\n * and selected calender.\n *\n * @param {int} iDay\n *   An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setDate\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the year, month and day for the embedded date instance considering the configured time\n * zone and selected calender.\n *\n * @param {int} yearValue An integer representing the new year value\n * @param {int} [monthValue] An integer representing the new month index\n * @param {int} [dateValue] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setFullYear\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the hours, minutes, seconds and milliseconds for the embedded date instance considering\n * the configured time zone.\n *\n * @param {int} hoursValue An integer representing the new hours value\n * @param {int} [minutesValue] An integer representing the new minutes value\n * @param {int} [secondsValue] An integer representing the new seconds value\n * @param {int} [msValue] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setHours\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the milliseconds for the embedded date instance considering the configured time zone.\n *\n * @param {int} millisecondsValue An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setMilliseconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the minutes, seconds and milliseconds for the embedded date instance considering the configured\n * time zone.\n *\n * @param {int} minutesValue An integer representing the new minutes value\n * @param {int} [secondsValue] An integer representing the new seconds value\n * @param {int} [msValue] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setMinutes\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the month and day for the embedded date instance considering the configured time zone and\n * selected calender.\n *\n * @param {int} monthValue An integer representing the new month index\n * @param {int} [dayValue] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setMonth\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the seconds and milliseconds for the embedded date instance considering the configured time zone.\n *\n * @param {int} secondsValue An integer representing the new seconds value\n * @param {int} [msValue] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setSeconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the day of the month for the embedded date instance according to universal time and\n * selected calender.\n *\n * @param {int} dayValue\n *   An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCDate\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the year, month and day for the embedded date instance according to universal time and\n * selected calender.\n *\n * @param {int} yearValue An integer representing the new year value\n * @param {int} [monthValue] An integer representing the new month index\n * @param {int} [dateValue] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCFullYear\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the hours, minutes, seconds and milliseconds for the embedded date instance according to\n * universal time.\n *\n * @param {int} hoursValue An integer representing the new hours value\n * @param {int} [minutesValue] An integer representing the new minutes value\n * @param {int} [secondsValue] An integer representing the new seconds value\n * @param {int} [msValue] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCHours\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the milliseconds for the embedded date instance according to universal time.\n *\n * @param {int} msValue An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCMilliseconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the minutes, seconds and milliseconds for the embedded date instance according to universal\n * time.\n *\n * @param {int} minutesValue An integer representing the new minutes value\n * @param {int} [secondsValue] An integer representing the new seconds value\n * @param {int} [msValue] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCMinutes\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the month and day for the embedded date instance according to universal time and\n * selected calender.\n *\n * @param {int} monthValue An integer representing the new month index\n * @param {int} [dateValue] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCMonth\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the seconds and milliseconds for the embedded date instance according to universal time.\n *\n * @param {int} secondsValue An integer representing the new seconds value\n * @param {int} [msValue] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCSeconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the year for the embedded date instance considering the configured time zone and the\n * selected calender. In case of the Gregorian calendar, 1900 is added to the year value\n *\n * @param {int} yearValue\n *   An integer representing the new year value (plus 1900 for the Gregorian calendar)\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @deprecated for the Gregorian calendar since version 1.111.0 as it is deprecated in\n *   JavaScript Date, it can be used with other calendars. It still is recommended to use\n *   {@link #getFullYear} instead, independent on the selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setYear\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the date portion of the embedded date object interpreted in the configured time zone,\n * independent on the selected calendar.\n *\n * @returns {string}\n *   The date portion of the embedded date object interpreted in the configured time zone\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.toDateString\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns a string representing the embedded date object interpreted in the configured time\n * zone, independent on the selected calendar.\n *\n * @returns {string}\n *   A string representing the embedded date object interpreted in the configured time zone\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.toString\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the value of the embedded date object in milliseconds based on the UNIX epoch.\n *\n * @returns {int} The primitive value of the embedded date object in milliseconds based on the UNIX epoch\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.valueOf\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n[\"getDate\", \"getMonth\", \"getFullYear\", \"getYear\", \"getDay\", \"getHours\", \"getMinutes\", \"getSeconds\", \"getMilliseconds\", \"getUTCDate\", \"getUTCMonth\", \"getUTCFullYear\", \"getUTCDay\", \"getUTCHours\", \"getUTCMinutes\", \"getUTCSeconds\", \"getUTCMilliseconds\", \"getTime\", \"valueOf\", \"getTimezoneOffset\", \"toString\", \"toDateString\", \"setDate\", \"setFullYear\", \"setYear\", \"setMonth\", \"setHours\", \"setMinutes\", \"setSeconds\", \"setMilliseconds\", \"setUTCDate\", \"setUTCFullYear\", \"setUTCMonth\", \"setUTCHours\", \"setUTCMinutes\", \"setUTCSeconds\", \"setUTCMilliseconds\"].forEach(function (sName) {\n  UniversalDate.prototype[sName] = function () {\n    return this.oDate[sName].apply(this.oDate, arguments);\n  };\n});\n\n/**\n * Returns the date object representing the current calendar date value.\n *\n * @returns {Date|module:sap/ui/core/date/UI5Date} The date object representing the current calendar date value\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getJSDate = function () {\n  return this.oDate;\n};\n\n/**\n * Returns the calendar type of the current instance of a UniversalDate.\n *\n * @returns {sap.ui.core.CalendarType} The calendar type of the date\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getCalendarType = function () {\n  return this.sCalendarType;\n};\n\n/**\n * Returns the era index of for the embedded date instance.\n *\n * @returns {int} The index of the era for the embedded date instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getEra = function () {\n  return UniversalDate.getEraByDate(this.sCalendarType, this.oDate.getFullYear(), this.oDate.getMonth(), this.oDate.getDate());\n};\n\n/**\n * Placeholder method which is overwritten by calendar specific implementations. General usage of\n * this method is to use it to set the era for the embedded date instance.\n *\n * @param {int} iEra\n *   An number representing the era index which is to be set for the embedded date instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.setEra = function (iEra) {\n  // The default implementation does not support setting the era\n};\n\n/**\n * Returns the era index of for the embedded date instance in universal time.\n *\n * @returns {int} The index of the era for the embedded date instance in universal time\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getUTCEra = function () {\n  return UniversalDate.getEraByDate(this.sCalendarType, this.oDate.getUTCFullYear(), this.oDate.getUTCMonth(), this.oDate.getUTCDate());\n};\n\n/**\n * Placeholder method which is overwritten by calendar specific implementations. General usage of\n * this method is to use it to set the era for the embedded date instance in universal time.\n *\n * @param {int} iEra\n *   An number representing the era index which is to be set for the embedded date instance\n *   in universal time\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.setUTCEra = function (iEra) {\n  // The default implementation does not support setting the era\n};\n\n/**\n * Retrieves the calendar week\n *\n * @param {sap.ui.core.Locale} [oLocale] the locale used to get the calendar week calculation properties, defaults to the formatLocale\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} [vCalendarWeekNumbering]\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   In case an object is provided, both properties <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> must be set, otherwise an error is thrown.\n *   If calendar week numbering is not determined from the locale then {@link LocaleData#firstDayStartsFirstWeek} is ignored.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @returns {{week: int, year: int}} resulting calendar week, note: week index starts with <code>0</code>\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nUniversalDate.prototype.getWeek = function (oLocale, vCalendarWeekNumbering) {\n  return UniversalDate.getWeekByDate(this.sCalendarType, this.getFullYear(), this.getMonth(), this.getDate(), oLocale, vCalendarWeekNumbering);\n};\n\n/**\n * Sets the calendar week\n *\n * @param {{week: int, year: int}} oWeek the calendar week, note: week index starts with <code>0</code>,\n *   <code>oWeek.year</code> is optional and defaults to {@link sap.ui.core.date.UniversalDate#getFullYear}\n * @param {sap.ui.core.Locale} [oLocale] the locale used to get the calendar week calculation properties, defaults to the formatLocale\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} [vCalendarWeekNumbering]\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   In case an object is provided, both properties <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> must be set, otherwise an error is thrown.\n *   If calendar week numbering is not determined from the locale then {@link LocaleData#firstDayStartsFirstWeek} is ignored.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nUniversalDate.prototype.setWeek = function (oWeek, oLocale, vCalendarWeekNumbering) {\n  var oDate = UniversalDate.getFirstDateOfWeek(this.sCalendarType, oWeek.year || this.getFullYear(), oWeek.week, oLocale, vCalendarWeekNumbering);\n  this.setFullYear(oDate.year, oDate.month, oDate.day);\n};\n\n/**\n * Retrieves the UTC calendar week\n *\n * @param {sap.ui.core.Locale} [oLocale] the locale used to get the calendar week calculation properties, defaults to the formatLocale\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} [vCalendarWeekNumbering]\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   In case an object is provided, both properties <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> must be set, otherwise an error is thrown.\n *   If calendar week numbering is not determined from the locale then {@link LocaleData#firstDayStartsFirstWeek} is ignored.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @returns {{week: int, year: int}} resulting calendar week, note: week index starts with <code>0</code>\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nUniversalDate.prototype.getUTCWeek = function (oLocale, vCalendarWeekNumbering) {\n  return UniversalDate.getWeekByDate(this.sCalendarType, this.getUTCFullYear(), this.getUTCMonth(), this.getUTCDate(), oLocale, vCalendarWeekNumbering);\n};\n\n/**\n * Sets the UTC calendar week\n *\n * @param {{week: int, year: int}} oWeek the calendar week, note: week index starts with <code>0</code>,\n *   <code>oWeek.year</code> is optional and defaults to {@link sap.ui.core.date.UniversalDate#getFullYear}\n * @param {sap.ui.core.Locale} [oLocale] the locale used to get the calendar week calculation properties, defaults to the formatLocale\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} [vCalendarWeekNumbering]\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   In case an object is provided, both properties <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> must be set, otherwise an error is thrown.\n *   If calendar week numbering is not determined from the locale then {@link LocaleData#firstDayStartsFirstWeek} is ignored.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nUniversalDate.prototype.setUTCWeek = function (oWeek, oLocale, vCalendarWeekNumbering) {\n  var oDate = UniversalDate.getFirstDateOfWeek(this.sCalendarType, oWeek.year || this.getFullYear(), oWeek.week, oLocale, vCalendarWeekNumbering);\n  this.setUTCFullYear(oDate.year, oDate.month, oDate.day);\n};\n\n/**\n * Returns the current quarter of the embedded date instance\n *\n * @returns {int} The quarter of the embedded date instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getQuarter = function () {\n  return Math.floor(this.getMonth() / 3);\n};\n\n/**\n * Returns the current quarter of the embedded date instance in universal time\n *\n * @returns {int} The quarter of the embedded date instance in universal time\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getUTCQuarter = function () {\n  return Math.floor(this.getUTCMonth() / 3);\n};\n\n/**\n * Returns an integer value depending on whether the embedded date instance time is set to the\n * afternoon or morning.\n *\n * @returns {int}\n *   An integer value which indicates which day period the embedded date instance is set to. If,\n *   date time is set in the morning time 0 (i.e. 0:00 - 11:59) or 1 if date time is set in the\n *   afternoon (i.e. 12:00 - 23:59).\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getDayPeriod = function () {\n  if (this.getHours() < 12) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * Returns an integer value depending on whether the embedded date instance time, is set to the\n * afternoon or morning, in universal time.\n *\n * @returns {int}\n *   An integer value which indicates which day period the embedded date instance is set to, in\n *   universal time. If, universal date time is set in the morning time 0 (i.e. 0:00 - 11:59) or\n *   1 if universal date time is set in the afternoon (i.e. 12:00 - 23:59).\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getUTCDayPeriod = function () {\n  if (this.getUTCHours() < 12) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n\n// TODO: These are currently needed for the DateFormat test, as the date used in the test\n// has been enhanced with these methods. Should be implemented using CLDR data.\n/**\n * Returns the short version of the time zone name of the embedded date instance.\n *\n * @returns {string} The short version of the name, of the time zone of the embedded date instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getTimezoneShort = function () {\n  if (this.oDate.getTimezoneShort) {\n    return this.oDate.getTimezoneShort();\n  }\n};\n\n/**\n * Returns the long version of the time zone name of the embedded date instance.\n *\n * @returns {string} The long version of the name, of the time zone of the embedded date instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getTimezoneLong = function () {\n  if (this.oDate.getTimezoneLong) {\n    return this.oDate.getTimezoneLong();\n  }\n};\n\n/*\n * Helper methods for week calculations\n */\nvar iMillisecondsInWeek = 7 * 24 * 60 * 60 * 1000;\n\n/**\n * Retrieves the calendar week for a given date, specified by year, month, and day.\n *\n * @param {string} sCalendarType the calendar type, e.g. <code>\"Gregorian\"</code>\n * @param {int} iYear year, e.g. <code>2016</code>\n * @param {int} iMonth the month, e.g. <code>2</code>\n * @param {int} iDay the date, e.g. <code>3</code>\n * @param {sap.ui.core.Locale} [oLocale] the locale used for the week calculation, if oWeekConfig is not provided (falls back to the formatLocale)\n *   e.g. <code>new Locale(\"de-DE\")</code>\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} [vCalendarWeekNumbering]\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   In case an object is provided, both properties <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> must be set, otherwise an error is thrown.\n *   If calendar week numbering is not determined from the locale then {@link LocaleData#firstDayStartsFirstWeek} is ignored.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @returns {{week: int, year: int}} resulting calendar week, note: week index starts with <code>0</code>, e.g. <code>{year: 2016, week: 8}</code>\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nUniversalDate.getWeekByDate = function (sCalendarType, iYear, iMonth, iDay, oLocale, vCalendarWeekNumbering) {\n  vCalendarWeekNumbering = vCalendarWeekNumbering || Configuration.getCalendarWeekNumbering();\n  checkWeekConfig(vCalendarWeekNumbering);\n  oLocale = oLocale || Configuration.getFormatSettings().getFormatLocale();\n  var clDate = this.getClass(sCalendarType);\n  var oFirstDay = getFirstDayOfFirstWeek(clDate, iYear, oLocale, vCalendarWeekNumbering);\n  var oDate = new clDate(clDate.UTC(iYear, iMonth, iDay));\n  var iWeek, iLastYear, iNextYear, oLastFirstDay, oNextFirstDay;\n  var bSplitWeek = isSplitWeek(vCalendarWeekNumbering, oLocale);\n  if (bSplitWeek) {\n    iWeek = calculateWeeks(oFirstDay, oDate);\n  } else {\n    iLastYear = iYear - 1;\n    iNextYear = iYear + 1;\n    oLastFirstDay = getFirstDayOfFirstWeek(clDate, iLastYear, oLocale, vCalendarWeekNumbering);\n    oNextFirstDay = getFirstDayOfFirstWeek(clDate, iNextYear, oLocale, vCalendarWeekNumbering);\n    if (oDate >= oNextFirstDay) {\n      iYear = iNextYear;\n      iWeek = 0;\n    } else if (oDate < oFirstDay) {\n      iYear = iLastYear;\n      iWeek = calculateWeeks(oLastFirstDay, oDate);\n    } else {\n      iWeek = calculateWeeks(oFirstDay, oDate);\n    }\n  }\n  return {\n    year: iYear,\n    week: iWeek\n  };\n};\n\n/**\n * Retrieves the first day's date of the given week in the given year.\n *\n * @param {string} sCalendarType the calendar type, e.g. <code>\"Gregorian\"</code>\n * @param {int} iYear year, e.g. <code>2016</code>\n * @param {int} iWeek the calendar week index, e.g. <code>8</code>\n * @param {sap.ui.core.Locale} [oLocale] the locale used for the week calculation, if oWeekConfig is not provided (falls back to the formatLocale)\n *   e.g. <code>new Locale(\"de-DE\")</code>\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} [vCalendarWeekNumbering]\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   In case an object is provided, both properties <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> must be set, otherwise an error is thrown.\n *   If calendar week numbering is not determined from the locale then {@link LocaleData#firstDayStartsFirstWeek} is ignored.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @returns {{month: int, year: int, day: int}} the resulting date, e.g. <code>{year: 2016, month: 1, day: 29}</code>\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nUniversalDate.getFirstDateOfWeek = function (sCalendarType, iYear, iWeek, oLocale, vCalendarWeekNumbering) {\n  vCalendarWeekNumbering = vCalendarWeekNumbering || Configuration.getCalendarWeekNumbering();\n  checkWeekConfig(vCalendarWeekNumbering);\n  oLocale = oLocale || Configuration.getFormatSettings().getFormatLocale();\n  var clDate = this.getClass(sCalendarType);\n  var oFirstDay = getFirstDayOfFirstWeek(clDate, iYear, oLocale, vCalendarWeekNumbering);\n  var oDate = new clDate(oFirstDay.valueOf() + iWeek * iMillisecondsInWeek);\n  var bSplitWeek = isSplitWeek(vCalendarWeekNumbering, oLocale);\n  if (bSplitWeek && iWeek === 0 && oFirstDay.getUTCFullYear() < iYear) {\n    return {\n      year: iYear,\n      month: 0,\n      day: 1\n    };\n  }\n  return {\n    year: oDate.getUTCFullYear(),\n    month: oDate.getUTCMonth(),\n    day: oDate.getUTCDate()\n  };\n};\n\n/**\n * Determines if the split week algorithm should be applied (the first day of the first calendar\n * week of the year is January 1st).\n *\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} vCalendarWeekNumbering\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and\n *   <code>minimalDaysInFirstWeek</code>\n * @param {sap.ui.core.Locale} oLocale the locale used for the week calculation\n * @returns {boolean} if the split week should be applied\n */\nfunction isSplitWeek(vCalendarWeekNumbering, oLocale) {\n  var oLocaleData = LocaleData.getInstance(oLocale);\n\n  // only applies for en_US with default CalendarWeekNumbering (WesternTraditional is default in en_US)\n  return (vCalendarWeekNumbering === CalendarWeekNumbering.Default || vCalendarWeekNumbering === CalendarWeekNumbering.WesternTraditional) && oLocaleData.firstDayStartsFirstWeek();\n}\n\n/**\n * Checks the calendar week configuration\n *\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} vCalendarWeekNumbering\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nfunction checkWeekConfig(vCalendarWeekNumbering) {\n  if (typeof vCalendarWeekNumbering === \"object\") {\n    if (typeof vCalendarWeekNumbering.firstDayOfWeek !== \"number\" || typeof vCalendarWeekNumbering.minimalDaysInFirstWeek !== \"number\") {\n      throw new TypeError(\"Week config requires firstDayOfWeek and minimalDaysInFirstWeek to be set\");\n    }\n  } else if (!Object.values(CalendarWeekNumbering).includes(vCalendarWeekNumbering)) {\n    throw new TypeError(\"Illegal format option calendarWeekNumbering: '\" + vCalendarWeekNumbering + \"'\");\n  }\n}\n\n/**\n * Resolves the calendar week configuration\n *\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} vCalendarWeekNumbering\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>\n * @param {sap.ui.core.Locale} [oLocale] locale to be used\n * @returns {{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} calendar week calculation configuration\n */\nfunction resolveCalendarWeekConfiguration(vCalendarWeekNumbering, oLocale) {\n  // be backward compatible\n  if (typeof vCalendarWeekNumbering === \"object\" && typeof vCalendarWeekNumbering.firstDayOfWeek === \"number\" && typeof vCalendarWeekNumbering.minimalDaysInFirstWeek === \"number\") {\n    return vCalendarWeekNumbering;\n  }\n  return CalendarUtils.getWeekConfigurationValues(vCalendarWeekNumbering, oLocale);\n}\n\n/**\n * Returns the first day of the first week in the given year.\n *\n * @param {UniversalDate} clDate the date class\n * @param {int} iYear year, e.g. <code>2016</code>\n * @param {sap.ui.core.Locale} [oLocale] the locale used for the week calculation, if oWeekConfig is not provided (falls back to the formatLocale)\n *   e.g. <code>new Locale(\"de-DE\")</code>\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} vCalendarWeekNumbering\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @returns {Date} first day of the first week in the given year, e.g. <code>Mon Jan 04 2016 01:00:00 GMT+0100</code>\n */\nfunction getFirstDayOfFirstWeek(clDate, iYear, oLocale, vCalendarWeekNumbering) {\n  oLocale = oLocale || Configuration.getFormatSettings().getFormatLocale();\n  var oWeekConfig = resolveCalendarWeekConfiguration(vCalendarWeekNumbering, oLocale);\n  var iMinDays = oWeekConfig.minimalDaysInFirstWeek;\n  var iFirstDayOfWeek = oWeekConfig.firstDayOfWeek;\n  var oFirstDay = new clDate(clDate.UTC(iYear, 0, 1));\n  var iDayCount = 7;\n  if (isNaN(oFirstDay.getTime())) {\n    throw new Error(\"Could not determine the first day of the week, because the date \" + \"object is invalid\");\n  }\n  // Find the first day of the first week of the year\n  while (oFirstDay.getUTCDay() !== iFirstDayOfWeek) {\n    oFirstDay.setUTCDate(oFirstDay.getUTCDate() - 1);\n    iDayCount--;\n  }\n  // If less than min days are left, first week is one week later\n  if (iDayCount < iMinDays) {\n    oFirstDay.setUTCDate(oFirstDay.getUTCDate() + 7);\n  }\n  return oFirstDay;\n}\n\n/**\n * Returns the rounded amount of weeks a given time frame.\n *\n * @param {Date} oFromDate The beginning date of the time interval\n * @param {Date} oToDate The end date of the time interval\n * @returns {int} A rounded number which represents the amount of weeks in the given timer interval\n */\nfunction calculateWeeks(oFromDate, oToDate) {\n  return Math.floor((oToDate.valueOf() - oFromDate.valueOf()) / iMillisecondsInWeek);\n}\n\n/*\n * Helper methods for era calculations\n */\nvar mEras = {};\n\n/**\n * Returns an index of the era for the given date values in the given calender. For\n * an index to be returned the date value has to be within the era time period, i.e. the\n * timestamp value of the date has to be bigger or equal than the start timestamp of the era\n * or smaller than the end of the end period.\n *\n * @param {string} sCalendarType The given calender type which the eras available for selection\n * @param {int} iYear The year value for which the era is looked for\n * @param {int} iMonth The month value for which the era is looked for\n * @param {int} iDay The date value for which the era is looked for\n * @returns {int} The index of the found era for the given date values in the given calender\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.getEraByDate = function (sCalendarType, iYear, iMonth, iDay) {\n  var aEras = getEras(sCalendarType),\n    // no need to use UI5Date.getInstance as only the UTC timestamp is used\n    iTimestamp = new Date(0).setUTCFullYear(iYear, iMonth, iDay),\n    oEra;\n  for (var i = aEras.length - 1; i >= 0; i--) {\n    oEra = aEras[i];\n    if (!oEra) {\n      continue;\n    }\n    if (oEra._start && iTimestamp >= oEra._startInfo.timestamp) {\n      return i;\n    }\n    if (oEra._end && iTimestamp < oEra._endInfo.timestamp) {\n      return i;\n    }\n  }\n};\n\n/**\n * Returns an index of the current era for the embedded date instance.\n *\n * @param {string} sCalendarType The calender type which defines the available eras to select from\n * @returns {int} The index of the current era of the embedded date instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.getCurrentEra = function (sCalendarType) {\n  var oNow = UI5Date.getInstance();\n  return this.getEraByDate(sCalendarType, oNow.getFullYear(), oNow.getMonth(), oNow.getDate());\n};\n\n/**\n * Returns the start date of the selected era from the given era index, in the given calender type.\n *\n * @param {string} sCalendarType The calender type from which the era is to be picked\n * @param {int} iEra The given era index of the to be selected era\n * @returns {object|null}\n *   The start date object of the selected era. If no era can be found for the given index the first\n *   era of the selected calender is chosen. If the chosen era does not have a start date defined\n *   <code>null</code>\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.getEraStartDate = function (sCalendarType, iEra) {\n  var aEras = getEras(sCalendarType),\n    oEra = aEras[iEra] || aEras[0];\n  if (oEra._start) {\n    return oEra._startInfo;\n  }\n};\n\n/**\n * Returns an array of era for the given calender.\n *\n * @param {string} sCalendarType\n *   The calender type from which the the locale era data is taken from and the era array is\n *   generated\n * @returns {array} An array of all available era in the given calender\n */\nfunction getEras(sCalendarType) {\n  var oLocale = Configuration.getFormatSettings().getFormatLocale(),\n    oLocaleData = LocaleData.getInstance(oLocale),\n    aEras = mEras[sCalendarType];\n  if (!aEras) {\n    // Get eras from localedata, parse it and add it to the array\n    var aEras = oLocaleData.getEraDates(sCalendarType);\n    if (!aEras[0]) {\n      aEras[0] = {\n        _start: \"1-1-1\"\n      };\n    }\n    for (var i = 0; i < aEras.length; i++) {\n      var oEra = aEras[i];\n      if (!oEra) {\n        continue;\n      }\n      if (oEra._start) {\n        oEra._startInfo = parseDateString(oEra._start);\n      }\n      if (oEra._end) {\n        oEra._endInfo = parseDateString(oEra._end);\n      }\n    }\n    mEras[sCalendarType] = aEras;\n  }\n  return aEras;\n}\n\n/**\n * Returns an object containing the date parts year, month, day of month and the date timestamp value\n * of the given date string.\n *\n * @param {string} sDateString The date string which is to be parsed\n * @returns {object}\n *   An object containing the year, month, day of month and date timestamp values of the given\n *   date string\n */\nfunction parseDateString(sDateString) {\n  var aParts = sDateString.split(\"-\"),\n    iYear,\n    iMonth,\n    iDay;\n  if (aParts[0] == \"\") {\n    // negative year\n    iYear = -parseInt(aParts[1]);\n    iMonth = parseInt(aParts[2]) - 1;\n    iDay = parseInt(aParts[3]);\n  } else {\n    iYear = parseInt(aParts[0]);\n    iMonth = parseInt(aParts[1]) - 1;\n    iDay = parseInt(aParts[2]);\n  }\n  return {\n    // no need to use UI5Date.getInstance as only the UTC timestamp is used\n    timestamp: new Date(0).setUTCFullYear(iYear, iMonth, iDay),\n    year: iYear,\n    month: iMonth,\n    day: iDay\n  };\n}\nexport default UniversalDate;","map":{"version":3,"names":["Core","BaseObject","Configuration","LocaleData","_Calendars","CalendarUtils","CalendarWeekNumbering","UI5Date","UniversalDate","extend","constructor","clDate","getClass","createDate","arguments","UTC","apply","now","Date","prototype","aArgs","getInstance","length","getTime","oDate","sCalendarType","oInstance","getJSDate","isNaN","Error","getCalendarType","Object","create","get","forEach","sName","getEra","getEraByDate","getFullYear","getMonth","getDate","setEra","iEra","getUTCEra","getUTCFullYear","getUTCMonth","getUTCDate","setUTCEra","getWeek","oLocale","vCalendarWeekNumbering","getWeekByDate","setWeek","oWeek","getFirstDateOfWeek","year","week","setFullYear","month","day","getUTCWeek","setUTCWeek","setUTCFullYear","getQuarter","Math","floor","getUTCQuarter","getDayPeriod","getHours","getUTCDayPeriod","getUTCHours","getTimezoneShort","getTimezoneLong","iMillisecondsInWeek","iYear","iMonth","iDay","getCalendarWeekNumbering","checkWeekConfig","getFormatSettings","getFormatLocale","oFirstDay","getFirstDayOfFirstWeek","iWeek","iLastYear","iNextYear","oLastFirstDay","oNextFirstDay","bSplitWeek","isSplitWeek","calculateWeeks","valueOf","oLocaleData","Default","WesternTraditional","firstDayStartsFirstWeek","firstDayOfWeek","minimalDaysInFirstWeek","TypeError","values","includes","resolveCalendarWeekConfiguration","getWeekConfigurationValues","oWeekConfig","iMinDays","iFirstDayOfWeek","iDayCount","getUTCDay","setUTCDate","oFromDate","oToDate","mEras","aEras","getEras","iTimestamp","oEra","i","_start","_startInfo","timestamp","_end","_endInfo","getCurrentEra","oNow","getEraStartDate","getEraDates","parseDateString","sDateString","aParts","split","parseInt"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-localization/dist/sap/ui/core/date/UniversalDate.js"],"sourcesContent":["import Core from \"../Core.js\"; /*!\n                               * OpenUI5\n                               * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n                               * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n                               */\n// Provides class sap.ui.core.date.UniversalDate\nimport BaseObject from \"../../base/Object.js\";\nimport Configuration from \"../Configuration.js\";\nimport LocaleData from \"../LocaleData.js\";\nimport _Calendars from \"./_Calendars.js\";\nimport CalendarUtils from \"./CalendarUtils.js\";\nimport CalendarWeekNumbering from \"./CalendarWeekNumbering.js\";\nimport UI5Date from \"./UI5Date.js\";\n/**\n * Constructor for UniversalDate.\n *\n * @class\n * The UniversalDate is the base class of calendar date instances. It contains the static methods to create calendar\n * specific instances.\n *\n * The member variable <code>this.oDate</code> contains a date instance\n * (either JavaScript Date or <code>module:sap/ui/core/date/UI5Date</code>) which considers the\n * configured time zone wherever JavaScript Date uses the local browser time zone; see\n * {@link module:sap/ui/core/date/UI5Date#getInstance}. This is the source value of the date\n * information. The prototype contains getters and setters of the Date and is delegating them\n * to the internal date object. Implementations for specific calendars may override methods\n * needed for their specific calendar (e.g. getYear and getEra for Japanese emperor calendar).\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @alias sap.ui.core.date.UniversalDate\n */\nvar UniversalDate = BaseObject.extend(\"sap.ui.core.date.UniversalDate\", /** @lends sap.ui.core.date.UniversalDate.prototype */{\n  constructor: function () {\n    var clDate = UniversalDate.getClass();\n    return this.createDate(clDate, arguments);\n  }\n});\n\n/**\n * Delegates this method to the calender specific implementation.\n *\n * @returns {int}\n *   The number of milliseconds since January 1, 1970, 00:00:00 UTC based on the Gregorian\n *   calendar, for the given calendar specific arguments\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.UTC = function () {\n  var clDate = UniversalDate.getClass();\n  return clDate.UTC.apply(clDate, arguments);\n};\n\n/**\n * Returns a number representing the millisecond since January 1, 1970, 00:00:00 to the current date,\n * see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now Date.now}.\n *\n * @returns {int} A number representing the millisecond since January 1, 1970, 00:00:00 to the current date\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.now = function () {\n  return Date.now();\n};\n\n/**\n * Creates an object of the provided date class and with the given arguments.\n *\n * @param {function} clDate\n *   The constructor function for either <code>Date</code> or an implementation of\n *   <code>sap.ui.core.date.UniversalDate</code>\n * @param {object} aArgs\n *   The <code>arguments</code> object which is given to the constructor of the given date class\n *   to create the date object\n * @returns {sap.ui.core.date.UniversalDate|module:sap/ui/core/date/UI5Date}\n *   The created date, either an UI5Date or UniversalDate instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.createDate = function (clDate, aArgs) {\n  if (clDate === Date) {\n    return UI5Date.getInstance.apply(null, aArgs);\n  }\n  switch (aArgs.length) {\n    case 0:\n      return new clDate();\n    // new Date(new Date()) is officially not supported\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date\n    case 1:\n      return new clDate(aArgs[0] instanceof Date ? aArgs[0].getTime() : aArgs[0]);\n    case 2:\n      return new clDate(aArgs[0], aArgs[1]);\n    case 3:\n      return new clDate(aArgs[0], aArgs[1], aArgs[2]);\n    case 4:\n      return new clDate(aArgs[0], aArgs[1], aArgs[2], aArgs[3]);\n    case 5:\n      return new clDate(aArgs[0], aArgs[1], aArgs[2], aArgs[3], aArgs[4]);\n    case 6:\n      return new clDate(aArgs[0], aArgs[1], aArgs[2], aArgs[3], aArgs[4], aArgs[5]);\n    case 7:\n      return new clDate(aArgs[0], aArgs[1], aArgs[2], aArgs[3], aArgs[4], aArgs[5], aArgs[6]);\n  }\n};\n\n/**\n * Returns an instance of UniversalDate, based on the calendar type from the configuration, or as explicitly\n * defined by parameter. The object contains getters and setters of the JavaScript Date and is delegating them\n * to an internal date object.\n *\n * Note: Prefer this method over calling <code>new UniversalDate</code> with an instance of <code>Date</code>.\n *\n * @param {Date|module:sap/ui/core/date/UI5Date|sap.ui.core.date.UniversalDate} [oDate]\n *   The date object, defaults to <code>UI5Date.getInstance()</code>\n * @param {sap.ui.core.CalendarType} [sCalendarType]\n *   The calendar type, defaults to <code>Core.getConfiguration().getCalendarType()</code>\n * @returns {sap.ui.core.date.UniversalDate}\n *   An instance of <code>UniversalDate</code>\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.getInstance = function (oDate, sCalendarType) {\n  var clDate, oInstance;\n  if (oDate instanceof UniversalDate) {\n    oDate = oDate.getJSDate();\n  }\n  if (oDate && isNaN(oDate.getTime())) {\n    throw new Error(\"The given date object is invalid\");\n  }\n  if (!sCalendarType) {\n    sCalendarType = Configuration.getCalendarType();\n  }\n  clDate = UniversalDate.getClass(sCalendarType);\n  oInstance = Object.create(clDate.prototype);\n  oInstance.oDate = oDate ? UI5Date.getInstance(oDate) : UI5Date.getInstance();\n  oInstance.sCalendarType = sCalendarType;\n  return oInstance;\n};\n\n/**\n * Returns the constructor function of a subclass of <code>UniversalDate</code> for the given calendar type.\n * If no calendar type is given the globally configured calendar type is used.\n *\n * @param {sap.ui.core.CalendarType} sCalendarType the type of the used calendar\n *\n * @returns {function}\n *   The class of the given <code>sCalenderType</code>. If <code>sCalenderType</code> is not\n *   provided, the class of the configured calendar type is returned.\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.getClass = function (sCalendarType) {\n  if (!sCalendarType) {\n    sCalendarType = Configuration.getCalendarType();\n  }\n  return _Calendars.get(sCalendarType);\n};\n\n/**\n * Returns the day of the month of the embedded date instance according to the configured time\n * zone and selected calender.\n *\n * @returns {int}\n *   A number representing the day of the month of the embedded date instance according\n *   to the configured time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getDate\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the day of the week of the embedded date instance according to the configured time zone and\n * selected calender.\n *\n * @returns {int}\n *   A number representing the day of the week of the embedded date instance according to the configured\n *   time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getDay\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the year of the embedded date instance according to the configured time zone and selected calender.\n *\n * @returns {int}\n *   The year of the embedded date instance according to the configured time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getFullYear\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the hours of the embedded date instance according to the configured time zone and selected\n * calender.\n *\n * @returns {int}\n *   A number representing the hours of the embedded date instance according to the configured time zone\n *   and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getHours\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the milliseconds of the embedded date instance according to the configured time zone\n * and selected calender.\n *\n * @returns {int}\n *   A number between 0 and 999 representing the milliseconds of the embedded date instance according to\n *   the configured time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getMilliseconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the minutes of the embedded date instance according to the configured time zone and selected calender.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the minutes of the embedded date instance according to the\n *   configured time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getMinutes\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the month index of the embedded date instance according to the configured time zone\n * and selected calender.\n *\n * @returns {int}\n *   The month index of the embedded date instance according to the configured time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getMonth\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the seconds of the embedded date instance according to the configured time zone and selected calender.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the seconds of the embedded date instance according to the\n *   configured time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getSeconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the difference in minutes between the UTC and the configured time zone for the embedded date.\n *\n * @returns {int}\n *   The difference in minutes between the UTC and the configured time zone for the embedded date\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getTimezoneOffset\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the year of the embedded date instance minus 1900 according to the configured time zone and\n * selected calender. In case of the Gregorian calendar the 1900 is subtracted from the year value.\n *\n * @returns {int}\n *   The year of the embedded date instance (minus 1900 if the Gregorian calendar is selected)\n *   according to the configured time zone and selected calender\n *\n * @deprecated for the Gregorian calendar since version 1.111.0 as it is deprecated in\n *   JavaScript Date, it can be used with other calendars. It still is recommended to use\n *   {@link #getFullYear} instead, independent on the selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getYear\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the timestamp in milliseconds of the embedded date based on the UNIX epoch.\n *\n * @returns {int}\n *   The timestamp in milliseconds of the embedded date based on the UNIX epoch, or <code>NaN</code> if\n *   the embedded date is an invalid date\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getTime\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the day of the month of the embedded date instance according to universal time and\n * selected calender.\n *\n * @returns {int}\n *   A number representing the day of the month of the embedded date instance according\n *   to universal time and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCDate\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n *\n * Returns the day of the week of the embedded date instance according to universal time and\n * selected calender.\n *\n * @returns {int}\n *   A number representing the day of the week of the embedded date instance according to universal\n *   time and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCDay\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the year of the embedded date instance according to universal time and selected calender.\n *\n * @returns {int}\n *   The year of the embedded date instance according to universal time and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCFullYear\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the hours of the embedded date instance according to universal time.\n *\n * @returns {int}\n *   A number representing the hours of the embedded date instance according to universal time\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCHours\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the milliseconds of the embedded date instance according to universal time.\n *\n * @returns {int}\n *   A number between 0 and 999 representing the milliseconds of the embedded date instance\n *   according to universal time\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCMilliseconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the minutes of the embedded date instance according to universal time.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the minutes of the embedded date instance according\n *   to universal time\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCMinutes\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the month index of the embedded date instance according to universal time and\n * selected calender.\n *\n * @returns {int}\n *   The month index of the embedded date instance according to universal time and selected\n *   calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCMonth\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the seconds of the embedded date instance according to universal time.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the seconds of the embedded date instance according\n *   to universal time\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCSeconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the day of the month for the embedded date instance considering the configured time zone\n * and selected calender.\n *\n * @param {int} iDay\n *   An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setDate\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the year, month and day for the embedded date instance considering the configured time\n * zone and selected calender.\n *\n * @param {int} yearValue An integer representing the new year value\n * @param {int} [monthValue] An integer representing the new month index\n * @param {int} [dateValue] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setFullYear\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the hours, minutes, seconds and milliseconds for the embedded date instance considering\n * the configured time zone.\n *\n * @param {int} hoursValue An integer representing the new hours value\n * @param {int} [minutesValue] An integer representing the new minutes value\n * @param {int} [secondsValue] An integer representing the new seconds value\n * @param {int} [msValue] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setHours\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the milliseconds for the embedded date instance considering the configured time zone.\n *\n * @param {int} millisecondsValue An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setMilliseconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the minutes, seconds and milliseconds for the embedded date instance considering the configured\n * time zone.\n *\n * @param {int} minutesValue An integer representing the new minutes value\n * @param {int} [secondsValue] An integer representing the new seconds value\n * @param {int} [msValue] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setMinutes\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the month and day for the embedded date instance considering the configured time zone and\n * selected calender.\n *\n * @param {int} monthValue An integer representing the new month index\n * @param {int} [dayValue] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setMonth\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the seconds and milliseconds for the embedded date instance considering the configured time zone.\n *\n * @param {int} secondsValue An integer representing the new seconds value\n * @param {int} [msValue] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setSeconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the day of the month for the embedded date instance according to universal time and\n * selected calender.\n *\n * @param {int} dayValue\n *   An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCDate\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the year, month and day for the embedded date instance according to universal time and\n * selected calender.\n *\n * @param {int} yearValue An integer representing the new year value\n * @param {int} [monthValue] An integer representing the new month index\n * @param {int} [dateValue] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCFullYear\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the hours, minutes, seconds and milliseconds for the embedded date instance according to\n * universal time.\n *\n * @param {int} hoursValue An integer representing the new hours value\n * @param {int} [minutesValue] An integer representing the new minutes value\n * @param {int} [secondsValue] An integer representing the new seconds value\n * @param {int} [msValue] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCHours\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the milliseconds for the embedded date instance according to universal time.\n *\n * @param {int} msValue An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCMilliseconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the minutes, seconds and milliseconds for the embedded date instance according to universal\n * time.\n *\n * @param {int} minutesValue An integer representing the new minutes value\n * @param {int} [secondsValue] An integer representing the new seconds value\n * @param {int} [msValue] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCMinutes\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the month and day for the embedded date instance according to universal time and\n * selected calender.\n *\n * @param {int} monthValue An integer representing the new month index\n * @param {int} [dateValue] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCMonth\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the seconds and milliseconds for the embedded date instance according to universal time.\n *\n * @param {int} secondsValue An integer representing the new seconds value\n * @param {int} [msValue] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCSeconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the year for the embedded date instance considering the configured time zone and the\n * selected calender. In case of the Gregorian calendar, 1900 is added to the year value\n *\n * @param {int} yearValue\n *   An integer representing the new year value (plus 1900 for the Gregorian calendar)\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @deprecated for the Gregorian calendar since version 1.111.0 as it is deprecated in\n *   JavaScript Date, it can be used with other calendars. It still is recommended to use\n *   {@link #getFullYear} instead, independent on the selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setYear\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the date portion of the embedded date object interpreted in the configured time zone,\n * independent on the selected calendar.\n *\n * @returns {string}\n *   The date portion of the embedded date object interpreted in the configured time zone\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.toDateString\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns a string representing the embedded date object interpreted in the configured time\n * zone, independent on the selected calendar.\n *\n * @returns {string}\n *   A string representing the embedded date object interpreted in the configured time zone\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.toString\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the value of the embedded date object in milliseconds based on the UNIX epoch.\n *\n * @returns {int} The primitive value of the embedded date object in milliseconds based on the UNIX epoch\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.valueOf\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n[\"getDate\", \"getMonth\", \"getFullYear\", \"getYear\", \"getDay\", \"getHours\", \"getMinutes\", \"getSeconds\", \"getMilliseconds\", \"getUTCDate\", \"getUTCMonth\", \"getUTCFullYear\", \"getUTCDay\", \"getUTCHours\", \"getUTCMinutes\", \"getUTCSeconds\", \"getUTCMilliseconds\", \"getTime\", \"valueOf\", \"getTimezoneOffset\", \"toString\", \"toDateString\", \"setDate\", \"setFullYear\", \"setYear\", \"setMonth\", \"setHours\", \"setMinutes\", \"setSeconds\", \"setMilliseconds\", \"setUTCDate\", \"setUTCFullYear\", \"setUTCMonth\", \"setUTCHours\", \"setUTCMinutes\", \"setUTCSeconds\", \"setUTCMilliseconds\"].forEach(function (sName) {\n  UniversalDate.prototype[sName] = function () {\n    return this.oDate[sName].apply(this.oDate, arguments);\n  };\n});\n\n/**\n * Returns the date object representing the current calendar date value.\n *\n * @returns {Date|module:sap/ui/core/date/UI5Date} The date object representing the current calendar date value\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getJSDate = function () {\n  return this.oDate;\n};\n\n/**\n * Returns the calendar type of the current instance of a UniversalDate.\n *\n * @returns {sap.ui.core.CalendarType} The calendar type of the date\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getCalendarType = function () {\n  return this.sCalendarType;\n};\n\n/**\n * Returns the era index of for the embedded date instance.\n *\n * @returns {int} The index of the era for the embedded date instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getEra = function () {\n  return UniversalDate.getEraByDate(this.sCalendarType, this.oDate.getFullYear(), this.oDate.getMonth(), this.oDate.getDate());\n};\n\n/**\n * Placeholder method which is overwritten by calendar specific implementations. General usage of\n * this method is to use it to set the era for the embedded date instance.\n *\n * @param {int} iEra\n *   An number representing the era index which is to be set for the embedded date instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.setEra = function (iEra) {\n  // The default implementation does not support setting the era\n};\n\n/**\n * Returns the era index of for the embedded date instance in universal time.\n *\n * @returns {int} The index of the era for the embedded date instance in universal time\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getUTCEra = function () {\n  return UniversalDate.getEraByDate(this.sCalendarType, this.oDate.getUTCFullYear(), this.oDate.getUTCMonth(), this.oDate.getUTCDate());\n};\n\n/**\n * Placeholder method which is overwritten by calendar specific implementations. General usage of\n * this method is to use it to set the era for the embedded date instance in universal time.\n *\n * @param {int} iEra\n *   An number representing the era index which is to be set for the embedded date instance\n *   in universal time\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.setUTCEra = function (iEra) {\n  // The default implementation does not support setting the era\n};\n\n/**\n * Retrieves the calendar week\n *\n * @param {sap.ui.core.Locale} [oLocale] the locale used to get the calendar week calculation properties, defaults to the formatLocale\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} [vCalendarWeekNumbering]\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   In case an object is provided, both properties <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> must be set, otherwise an error is thrown.\n *   If calendar week numbering is not determined from the locale then {@link LocaleData#firstDayStartsFirstWeek} is ignored.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @returns {{week: int, year: int}} resulting calendar week, note: week index starts with <code>0</code>\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nUniversalDate.prototype.getWeek = function (oLocale, vCalendarWeekNumbering) {\n  return UniversalDate.getWeekByDate(this.sCalendarType, this.getFullYear(), this.getMonth(), this.getDate(), oLocale, vCalendarWeekNumbering);\n};\n\n/**\n * Sets the calendar week\n *\n * @param {{week: int, year: int}} oWeek the calendar week, note: week index starts with <code>0</code>,\n *   <code>oWeek.year</code> is optional and defaults to {@link sap.ui.core.date.UniversalDate#getFullYear}\n * @param {sap.ui.core.Locale} [oLocale] the locale used to get the calendar week calculation properties, defaults to the formatLocale\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} [vCalendarWeekNumbering]\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   In case an object is provided, both properties <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> must be set, otherwise an error is thrown.\n *   If calendar week numbering is not determined from the locale then {@link LocaleData#firstDayStartsFirstWeek} is ignored.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nUniversalDate.prototype.setWeek = function (oWeek, oLocale, vCalendarWeekNumbering) {\n  var oDate = UniversalDate.getFirstDateOfWeek(this.sCalendarType, oWeek.year || this.getFullYear(), oWeek.week, oLocale, vCalendarWeekNumbering);\n  this.setFullYear(oDate.year, oDate.month, oDate.day);\n};\n\n/**\n * Retrieves the UTC calendar week\n *\n * @param {sap.ui.core.Locale} [oLocale] the locale used to get the calendar week calculation properties, defaults to the formatLocale\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} [vCalendarWeekNumbering]\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   In case an object is provided, both properties <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> must be set, otherwise an error is thrown.\n *   If calendar week numbering is not determined from the locale then {@link LocaleData#firstDayStartsFirstWeek} is ignored.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @returns {{week: int, year: int}} resulting calendar week, note: week index starts with <code>0</code>\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nUniversalDate.prototype.getUTCWeek = function (oLocale, vCalendarWeekNumbering) {\n  return UniversalDate.getWeekByDate(this.sCalendarType, this.getUTCFullYear(), this.getUTCMonth(), this.getUTCDate(), oLocale, vCalendarWeekNumbering);\n};\n\n/**\n * Sets the UTC calendar week\n *\n * @param {{week: int, year: int}} oWeek the calendar week, note: week index starts with <code>0</code>,\n *   <code>oWeek.year</code> is optional and defaults to {@link sap.ui.core.date.UniversalDate#getFullYear}\n * @param {sap.ui.core.Locale} [oLocale] the locale used to get the calendar week calculation properties, defaults to the formatLocale\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} [vCalendarWeekNumbering]\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   In case an object is provided, both properties <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> must be set, otherwise an error is thrown.\n *   If calendar week numbering is not determined from the locale then {@link LocaleData#firstDayStartsFirstWeek} is ignored.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nUniversalDate.prototype.setUTCWeek = function (oWeek, oLocale, vCalendarWeekNumbering) {\n  var oDate = UniversalDate.getFirstDateOfWeek(this.sCalendarType, oWeek.year || this.getFullYear(), oWeek.week, oLocale, vCalendarWeekNumbering);\n  this.setUTCFullYear(oDate.year, oDate.month, oDate.day);\n};\n\n/**\n * Returns the current quarter of the embedded date instance\n *\n * @returns {int} The quarter of the embedded date instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getQuarter = function () {\n  return Math.floor(this.getMonth() / 3);\n};\n\n/**\n * Returns the current quarter of the embedded date instance in universal time\n *\n * @returns {int} The quarter of the embedded date instance in universal time\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getUTCQuarter = function () {\n  return Math.floor(this.getUTCMonth() / 3);\n};\n\n/**\n * Returns an integer value depending on whether the embedded date instance time is set to the\n * afternoon or morning.\n *\n * @returns {int}\n *   An integer value which indicates which day period the embedded date instance is set to. If,\n *   date time is set in the morning time 0 (i.e. 0:00 - 11:59) or 1 if date time is set in the\n *   afternoon (i.e. 12:00 - 23:59).\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getDayPeriod = function () {\n  if (this.getHours() < 12) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * Returns an integer value depending on whether the embedded date instance time, is set to the\n * afternoon or morning, in universal time.\n *\n * @returns {int}\n *   An integer value which indicates which day period the embedded date instance is set to, in\n *   universal time. If, universal date time is set in the morning time 0 (i.e. 0:00 - 11:59) or\n *   1 if universal date time is set in the afternoon (i.e. 12:00 - 23:59).\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getUTCDayPeriod = function () {\n  if (this.getUTCHours() < 12) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n\n// TODO: These are currently needed for the DateFormat test, as the date used in the test\n// has been enhanced with these methods. Should be implemented using CLDR data.\n/**\n * Returns the short version of the time zone name of the embedded date instance.\n *\n * @returns {string} The short version of the name, of the time zone of the embedded date instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getTimezoneShort = function () {\n  if (this.oDate.getTimezoneShort) {\n    return this.oDate.getTimezoneShort();\n  }\n};\n\n/**\n * Returns the long version of the time zone name of the embedded date instance.\n *\n * @returns {string} The long version of the name, of the time zone of the embedded date instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getTimezoneLong = function () {\n  if (this.oDate.getTimezoneLong) {\n    return this.oDate.getTimezoneLong();\n  }\n};\n\n/*\n * Helper methods for week calculations\n */\nvar iMillisecondsInWeek = 7 * 24 * 60 * 60 * 1000;\n\n/**\n * Retrieves the calendar week for a given date, specified by year, month, and day.\n *\n * @param {string} sCalendarType the calendar type, e.g. <code>\"Gregorian\"</code>\n * @param {int} iYear year, e.g. <code>2016</code>\n * @param {int} iMonth the month, e.g. <code>2</code>\n * @param {int} iDay the date, e.g. <code>3</code>\n * @param {sap.ui.core.Locale} [oLocale] the locale used for the week calculation, if oWeekConfig is not provided (falls back to the formatLocale)\n *   e.g. <code>new Locale(\"de-DE\")</code>\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} [vCalendarWeekNumbering]\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   In case an object is provided, both properties <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> must be set, otherwise an error is thrown.\n *   If calendar week numbering is not determined from the locale then {@link LocaleData#firstDayStartsFirstWeek} is ignored.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @returns {{week: int, year: int}} resulting calendar week, note: week index starts with <code>0</code>, e.g. <code>{year: 2016, week: 8}</code>\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nUniversalDate.getWeekByDate = function (sCalendarType, iYear, iMonth, iDay, oLocale, vCalendarWeekNumbering) {\n  vCalendarWeekNumbering = vCalendarWeekNumbering || Configuration.getCalendarWeekNumbering();\n  checkWeekConfig(vCalendarWeekNumbering);\n  oLocale = oLocale || Configuration.getFormatSettings().getFormatLocale();\n  var clDate = this.getClass(sCalendarType);\n  var oFirstDay = getFirstDayOfFirstWeek(clDate, iYear, oLocale, vCalendarWeekNumbering);\n  var oDate = new clDate(clDate.UTC(iYear, iMonth, iDay));\n  var iWeek, iLastYear, iNextYear, oLastFirstDay, oNextFirstDay;\n  var bSplitWeek = isSplitWeek(vCalendarWeekNumbering, oLocale);\n  if (bSplitWeek) {\n    iWeek = calculateWeeks(oFirstDay, oDate);\n  } else {\n    iLastYear = iYear - 1;\n    iNextYear = iYear + 1;\n    oLastFirstDay = getFirstDayOfFirstWeek(clDate, iLastYear, oLocale, vCalendarWeekNumbering);\n    oNextFirstDay = getFirstDayOfFirstWeek(clDate, iNextYear, oLocale, vCalendarWeekNumbering);\n    if (oDate >= oNextFirstDay) {\n      iYear = iNextYear;\n      iWeek = 0;\n    } else if (oDate < oFirstDay) {\n      iYear = iLastYear;\n      iWeek = calculateWeeks(oLastFirstDay, oDate);\n    } else {\n      iWeek = calculateWeeks(oFirstDay, oDate);\n    }\n  }\n  return {\n    year: iYear,\n    week: iWeek\n  };\n};\n\n/**\n * Retrieves the first day's date of the given week in the given year.\n *\n * @param {string} sCalendarType the calendar type, e.g. <code>\"Gregorian\"</code>\n * @param {int} iYear year, e.g. <code>2016</code>\n * @param {int} iWeek the calendar week index, e.g. <code>8</code>\n * @param {sap.ui.core.Locale} [oLocale] the locale used for the week calculation, if oWeekConfig is not provided (falls back to the formatLocale)\n *   e.g. <code>new Locale(\"de-DE\")</code>\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} [vCalendarWeekNumbering]\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   In case an object is provided, both properties <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> must be set, otherwise an error is thrown.\n *   If calendar week numbering is not determined from the locale then {@link LocaleData#firstDayStartsFirstWeek} is ignored.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @returns {{month: int, year: int, day: int}} the resulting date, e.g. <code>{year: 2016, month: 1, day: 29}</code>\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nUniversalDate.getFirstDateOfWeek = function (sCalendarType, iYear, iWeek, oLocale, vCalendarWeekNumbering) {\n  vCalendarWeekNumbering = vCalendarWeekNumbering || Configuration.getCalendarWeekNumbering();\n  checkWeekConfig(vCalendarWeekNumbering);\n  oLocale = oLocale || Configuration.getFormatSettings().getFormatLocale();\n  var clDate = this.getClass(sCalendarType);\n  var oFirstDay = getFirstDayOfFirstWeek(clDate, iYear, oLocale, vCalendarWeekNumbering);\n  var oDate = new clDate(oFirstDay.valueOf() + iWeek * iMillisecondsInWeek);\n  var bSplitWeek = isSplitWeek(vCalendarWeekNumbering, oLocale);\n  if (bSplitWeek && iWeek === 0 && oFirstDay.getUTCFullYear() < iYear) {\n    return {\n      year: iYear,\n      month: 0,\n      day: 1\n    };\n  }\n  return {\n    year: oDate.getUTCFullYear(),\n    month: oDate.getUTCMonth(),\n    day: oDate.getUTCDate()\n  };\n};\n\n/**\n * Determines if the split week algorithm should be applied (the first day of the first calendar\n * week of the year is January 1st).\n *\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} vCalendarWeekNumbering\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and\n *   <code>minimalDaysInFirstWeek</code>\n * @param {sap.ui.core.Locale} oLocale the locale used for the week calculation\n * @returns {boolean} if the split week should be applied\n */\nfunction isSplitWeek(vCalendarWeekNumbering, oLocale) {\n  var oLocaleData = LocaleData.getInstance(oLocale);\n\n  // only applies for en_US with default CalendarWeekNumbering (WesternTraditional is default in en_US)\n  return (vCalendarWeekNumbering === CalendarWeekNumbering.Default || vCalendarWeekNumbering === CalendarWeekNumbering.WesternTraditional) && oLocaleData.firstDayStartsFirstWeek();\n}\n\n/**\n * Checks the calendar week configuration\n *\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} vCalendarWeekNumbering\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nfunction checkWeekConfig(vCalendarWeekNumbering) {\n  if (typeof vCalendarWeekNumbering === \"object\") {\n    if (typeof vCalendarWeekNumbering.firstDayOfWeek !== \"number\" || typeof vCalendarWeekNumbering.minimalDaysInFirstWeek !== \"number\") {\n      throw new TypeError(\"Week config requires firstDayOfWeek and minimalDaysInFirstWeek to be set\");\n    }\n  } else if (!Object.values(CalendarWeekNumbering).includes(vCalendarWeekNumbering)) {\n    throw new TypeError(\"Illegal format option calendarWeekNumbering: '\" + vCalendarWeekNumbering + \"'\");\n  }\n}\n\n/**\n * Resolves the calendar week configuration\n *\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} vCalendarWeekNumbering\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>\n * @param {sap.ui.core.Locale} [oLocale] locale to be used\n * @returns {{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} calendar week calculation configuration\n */\nfunction resolveCalendarWeekConfiguration(vCalendarWeekNumbering, oLocale) {\n  // be backward compatible\n  if (typeof vCalendarWeekNumbering === \"object\" && typeof vCalendarWeekNumbering.firstDayOfWeek === \"number\" && typeof vCalendarWeekNumbering.minimalDaysInFirstWeek === \"number\") {\n    return vCalendarWeekNumbering;\n  }\n  return CalendarUtils.getWeekConfigurationValues(vCalendarWeekNumbering, oLocale);\n}\n\n/**\n * Returns the first day of the first week in the given year.\n *\n * @param {UniversalDate} clDate the date class\n * @param {int} iYear year, e.g. <code>2016</code>\n * @param {sap.ui.core.Locale} [oLocale] the locale used for the week calculation, if oWeekConfig is not provided (falls back to the formatLocale)\n *   e.g. <code>new Locale(\"de-DE\")</code>\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} vCalendarWeekNumbering\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @returns {Date} first day of the first week in the given year, e.g. <code>Mon Jan 04 2016 01:00:00 GMT+0100</code>\n */\nfunction getFirstDayOfFirstWeek(clDate, iYear, oLocale, vCalendarWeekNumbering) {\n  oLocale = oLocale || Configuration.getFormatSettings().getFormatLocale();\n  var oWeekConfig = resolveCalendarWeekConfiguration(vCalendarWeekNumbering, oLocale);\n  var iMinDays = oWeekConfig.minimalDaysInFirstWeek;\n  var iFirstDayOfWeek = oWeekConfig.firstDayOfWeek;\n  var oFirstDay = new clDate(clDate.UTC(iYear, 0, 1));\n  var iDayCount = 7;\n  if (isNaN(oFirstDay.getTime())) {\n    throw new Error(\"Could not determine the first day of the week, because the date \" + \"object is invalid\");\n  }\n  // Find the first day of the first week of the year\n  while (oFirstDay.getUTCDay() !== iFirstDayOfWeek) {\n    oFirstDay.setUTCDate(oFirstDay.getUTCDate() - 1);\n    iDayCount--;\n  }\n  // If less than min days are left, first week is one week later\n  if (iDayCount < iMinDays) {\n    oFirstDay.setUTCDate(oFirstDay.getUTCDate() + 7);\n  }\n  return oFirstDay;\n}\n\n/**\n * Returns the rounded amount of weeks a given time frame.\n *\n * @param {Date} oFromDate The beginning date of the time interval\n * @param {Date} oToDate The end date of the time interval\n * @returns {int} A rounded number which represents the amount of weeks in the given timer interval\n */\nfunction calculateWeeks(oFromDate, oToDate) {\n  return Math.floor((oToDate.valueOf() - oFromDate.valueOf()) / iMillisecondsInWeek);\n}\n\n/*\n * Helper methods for era calculations\n */\nvar mEras = {};\n\n/**\n * Returns an index of the era for the given date values in the given calender. For\n * an index to be returned the date value has to be within the era time period, i.e. the\n * timestamp value of the date has to be bigger or equal than the start timestamp of the era\n * or smaller than the end of the end period.\n *\n * @param {string} sCalendarType The given calender type which the eras available for selection\n * @param {int} iYear The year value for which the era is looked for\n * @param {int} iMonth The month value for which the era is looked for\n * @param {int} iDay The date value for which the era is looked for\n * @returns {int} The index of the found era for the given date values in the given calender\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.getEraByDate = function (sCalendarType, iYear, iMonth, iDay) {\n  var aEras = getEras(sCalendarType),\n    // no need to use UI5Date.getInstance as only the UTC timestamp is used\n    iTimestamp = new Date(0).setUTCFullYear(iYear, iMonth, iDay),\n    oEra;\n  for (var i = aEras.length - 1; i >= 0; i--) {\n    oEra = aEras[i];\n    if (!oEra) {\n      continue;\n    }\n    if (oEra._start && iTimestamp >= oEra._startInfo.timestamp) {\n      return i;\n    }\n    if (oEra._end && iTimestamp < oEra._endInfo.timestamp) {\n      return i;\n    }\n  }\n};\n\n/**\n * Returns an index of the current era for the embedded date instance.\n *\n * @param {string} sCalendarType The calender type which defines the available eras to select from\n * @returns {int} The index of the current era of the embedded date instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.getCurrentEra = function (sCalendarType) {\n  var oNow = UI5Date.getInstance();\n  return this.getEraByDate(sCalendarType, oNow.getFullYear(), oNow.getMonth(), oNow.getDate());\n};\n\n/**\n * Returns the start date of the selected era from the given era index, in the given calender type.\n *\n * @param {string} sCalendarType The calender type from which the era is to be picked\n * @param {int} iEra The given era index of the to be selected era\n * @returns {object|null}\n *   The start date object of the selected era. If no era can be found for the given index the first\n *   era of the selected calender is chosen. If the chosen era does not have a start date defined\n *   <code>null</code>\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.getEraStartDate = function (sCalendarType, iEra) {\n  var aEras = getEras(sCalendarType),\n    oEra = aEras[iEra] || aEras[0];\n  if (oEra._start) {\n    return oEra._startInfo;\n  }\n};\n\n/**\n * Returns an array of era for the given calender.\n *\n * @param {string} sCalendarType\n *   The calender type from which the the locale era data is taken from and the era array is\n *   generated\n * @returns {array} An array of all available era in the given calender\n */\nfunction getEras(sCalendarType) {\n  var oLocale = Configuration.getFormatSettings().getFormatLocale(),\n    oLocaleData = LocaleData.getInstance(oLocale),\n    aEras = mEras[sCalendarType];\n  if (!aEras) {\n    // Get eras from localedata, parse it and add it to the array\n    var aEras = oLocaleData.getEraDates(sCalendarType);\n    if (!aEras[0]) {\n      aEras[0] = {\n        _start: \"1-1-1\"\n      };\n    }\n    for (var i = 0; i < aEras.length; i++) {\n      var oEra = aEras[i];\n      if (!oEra) {\n        continue;\n      }\n      if (oEra._start) {\n        oEra._startInfo = parseDateString(oEra._start);\n      }\n      if (oEra._end) {\n        oEra._endInfo = parseDateString(oEra._end);\n      }\n    }\n    mEras[sCalendarType] = aEras;\n  }\n  return aEras;\n}\n\n/**\n * Returns an object containing the date parts year, month, day of month and the date timestamp value\n * of the given date string.\n *\n * @param {string} sDateString The date string which is to be parsed\n * @returns {object}\n *   An object containing the year, month, day of month and date timestamp values of the given\n *   date string\n */\nfunction parseDateString(sDateString) {\n  var aParts = sDateString.split(\"-\"),\n    iYear,\n    iMonth,\n    iDay;\n  if (aParts[0] == \"\") {\n    // negative year\n    iYear = -parseInt(aParts[1]);\n    iMonth = parseInt(aParts[2]) - 1;\n    iDay = parseInt(aParts[3]);\n  } else {\n    iYear = parseInt(aParts[0]);\n    iMonth = parseInt(aParts[1]) - 1;\n    iDay = parseInt(aParts[2]);\n  }\n  return {\n    // no need to use UI5Date.getInstance as only the UTC timestamp is used\n    timestamp: new Date(0).setUTCFullYear(iYear, iMonth, iDay),\n    year: iYear,\n    month: iMonth,\n    day: iDay\n  };\n}\nexport default UniversalDate;"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,SAAS,EAAE,UAAU,EAAE,aAAa,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,YAAY,EAAE,YAAY,EAAE,iBAAiB,EAAE,YAAY,EAAE,aAAa,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}