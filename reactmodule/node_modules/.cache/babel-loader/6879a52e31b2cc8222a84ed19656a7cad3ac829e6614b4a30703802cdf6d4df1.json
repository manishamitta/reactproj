{"ast":null,"code":"\"use strict\";\n\nimport a from \"../types/InvisibleMessageMode.js\";\nimport o from \"./getSingletonElementInstance.js\";\nimport { attachBoot as r } from \"../Boot.js\";\nlet t, n;\nconst l = e => {\n  e.style.position = \"absolute\", e.style.clip = \"rect(1px,1px,1px,1px)\", e.style.userSelect = \"none\", e.style.left = \"-1000px\", e.style.top = \"-1000px\", e.style.pointerEvents = \"none\";\n};\nr(() => {\n  t && n || (t = document.createElement(\"span\"), n = document.createElement(\"span\"), t.classList.add(\"ui5-invisiblemessage-polite\"), n.classList.add(\"ui5-invisiblemessage-assertive\"), t.setAttribute(\"aria-live\", \"polite\"), n.setAttribute(\"aria-live\", \"assertive\"), t.setAttribute(\"role\", \"alert\"), n.setAttribute(\"role\", \"alert\"), l(t), l(n), o(\"ui5-announcement-area\").appendChild(t), o(\"ui5-announcement-area\").appendChild(n));\n});\nconst p = (e, s) => {\n  const i = s === a.Assertive ? n : t;\n  i.textContent = \"\", i.textContent = e, s !== a.Assertive && s !== a.Polite && console.warn('You have entered an invalid mode. Valid values are: \"Polite\" and \"Assertive\". The framework will automatically set the mode to \"Polite\".'), setTimeout(() => {\n    i.textContent === e && (i.textContent = \"\");\n  }, 3e3);\n};\nexport default p;","map":{"version":3,"names":["a","o","attachBoot","r","t","n","l","e","style","position","clip","userSelect","left","top","pointerEvents","document","createElement","classList","add","setAttribute","appendChild","p","announce","s","i","Assertive","textContent","Polite","console","warn","setTimeout"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-base/src/util/InvisibleMessage.ts"],"sourcesContent":["import InvisibleMessageMode from \"../types/InvisibleMessageMode.js\";\nimport getSingletonElementInstance from \"./getSingletonElementInstance.js\";\nimport { attachBoot } from \"../Boot.js\";\n\nlet politeSpan: HTMLElement;\nlet assertiveSpan: HTMLElement;\n\nconst setOutOfViewportStyles = (el: HTMLElement) => {\n\tel.style.position = \"absolute\";\n\tel.style.clip = \"rect(1px,1px,1px,1px)\";\n\tel.style.userSelect = \"none\";\n\tel.style.left = \"-1000px\";\n\tel.style.top = \"-1000px\";\n\tel.style.pointerEvents = \"none\";\n};\n\nattachBoot(() => {\n\tif (politeSpan && assertiveSpan) {\n\t\treturn;\n\t}\n\n\tpoliteSpan = document.createElement(\"span\");\n\tassertiveSpan = document.createElement(\"span\");\n\n\tpoliteSpan.classList.add(\"ui5-invisiblemessage-polite\");\n\tassertiveSpan.classList.add(\"ui5-invisiblemessage-assertive\");\n\n\tpoliteSpan.setAttribute(\"aria-live\", \"polite\");\n\tassertiveSpan.setAttribute(\"aria-live\", \"assertive\");\n\n\tpoliteSpan.setAttribute(\"role\", \"alert\");\n\tassertiveSpan.setAttribute(\"role\", \"alert\");\n\n\tsetOutOfViewportStyles(politeSpan);\n\tsetOutOfViewportStyles(assertiveSpan);\n\n\tgetSingletonElementInstance(\"ui5-announcement-area\").appendChild(politeSpan);\n\tgetSingletonElementInstance(\"ui5-announcement-area\").appendChild(assertiveSpan);\n});\n\n/**\n * Inserts the string into the respective span, depending on the mode provided.\n *\n * @param { string } message String to be announced by the screen reader.\n * @param { InvisibleMessageMode } mode The mode to be inserted in the aria-live attribute.\n * @public\n */\nconst announce = (message: string, mode: InvisibleMessageMode) => {\n\t// If no type is presented, fallback to polite announcement.\n\tconst span = mode === InvisibleMessageMode.Assertive ? assertiveSpan : politeSpan;\n\n\t// Set textContent to empty string in order to trigger screen reader's announcement.\n\tspan.textContent = \"\";\n\tspan.textContent = message;\n\n\tif (mode !== InvisibleMessageMode.Assertive && mode !== InvisibleMessageMode.Polite) {\n\t\tconsole.warn(`You have entered an invalid mode. Valid values are: \"Polite\" and \"Assertive\". The framework will automatically set the mode to \"Polite\".`); // eslint-disable-line\n\t}\n\n\t// clear the span in order to avoid reading it out while in JAWS reading node\n\tsetTimeout(() => {\n\t\t// ensure that we clear the text node only if no announce is made in the meantime\n\t\tif (span.textContent === message) {\n\t\t\tspan.textContent = \"\";\n\t\t}\n\t}, 3000);\n};\n\nexport default announce;\n"],"mappings":";;AAAA,OAAOA,CAAA,MAA0B;AACjC,OAAOC,CAAA,MAAiC;AACxC,SAASC,UAAA,IAAAC,CAAA,QAAkB;AAE3B,IAAIC,CAAA,EACAC,CAAA;AAEJ,MAAMC,CAAA,GAA0BC,CAAA,IAAoB;EACnDA,CAAA,CAAGC,KAAA,CAAMC,QAAA,GAAW,YACpBF,CAAA,CAAGC,KAAA,CAAME,IAAA,GAAO,yBAChBH,CAAA,CAAGC,KAAA,CAAMG,UAAA,GAAa,QACtBJ,CAAA,CAAGC,KAAA,CAAMI,IAAA,GAAO,WAChBL,CAAA,CAAGC,KAAA,CAAMK,GAAA,GAAM,WACfN,CAAA,CAAGC,KAAA,CAAMM,aAAA,GAAgB,MAC1B;AAAA;AAEAX,CAAA,CAAW,MAAM;EACZC,CAAA,IAAcC,CAAA,KAIlBD,CAAA,GAAaW,QAAA,CAASC,aAAA,CAAc,MAAM,GAC1CX,CAAA,GAAgBU,QAAA,CAASC,aAAA,CAAc,MAAM,GAE7CZ,CAAA,CAAWa,SAAA,CAAUC,GAAA,CAAI,6BAA6B,GACtDb,CAAA,CAAcY,SAAA,CAAUC,GAAA,CAAI,gCAAgC,GAE5Dd,CAAA,CAAWe,YAAA,CAAa,aAAa,QAAQ,GAC7Cd,CAAA,CAAcc,YAAA,CAAa,aAAa,WAAW,GAEnDf,CAAA,CAAWe,YAAA,CAAa,QAAQ,OAAO,GACvCd,CAAA,CAAcc,YAAA,CAAa,QAAQ,OAAO,GAE1Cb,CAAA,CAAuBF,CAAU,GACjCE,CAAA,CAAuBD,CAAa,GAEpCJ,CAAA,CAA4B,uBAAuB,EAAEmB,WAAA,CAAYhB,CAAU,GAC3EH,CAAA,CAA4B,uBAAuB,EAAEmB,WAAA,CAAYf,CAAa,EAC/E;AAAA,CAAC;AASD,MAAMgB,CAAA,GAAWC,CAACf,CAAA,EAAiBgB,CAAA,KAA+B;EAEjE,MAAMC,CAAA,GAAOD,CAAA,KAASvB,CAAA,CAAqByB,SAAA,GAAYpB,CAAA,GAAgBD,CAAA;EAGvEoB,CAAA,CAAKE,WAAA,GAAc,IACnBF,CAAA,CAAKE,WAAA,GAAcnB,CAAA,EAEfgB,CAAA,KAASvB,CAAA,CAAqByB,SAAA,IAAaF,CAAA,KAASvB,CAAA,CAAqB2B,MAAA,IAC5EC,OAAA,CAAQC,IAAA,CAAK,0IAA0I,GAIxJC,UAAA,CAAW,MAAM;IAEZN,CAAA,CAAKE,WAAA,KAAgBnB,CAAA,KACxBiB,CAAA,CAAKE,WAAA,GAAc,GAErB;EAAA,GAAG,GAAI,CACR;AAAA;AAEA,eAAeL,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}