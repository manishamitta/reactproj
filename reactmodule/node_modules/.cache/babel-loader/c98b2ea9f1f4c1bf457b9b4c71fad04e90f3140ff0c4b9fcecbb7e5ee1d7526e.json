{"ast":null,"code":"import { useMemo } from 'react';\nimport { AnalyticalTableScaleWidthMode } from '../../../enums/index.js';\nimport { DEFAULT_COLUMN_WIDTH } from '../defaults/Column/index.js';\nconst ROW_SAMPLE_SIZE = 20;\nconst MAX_WIDTH = 700;\nexport const CELL_PADDING_PX = 18; /* padding left and right 0.5rem each (16px) + borders (1px) + buffer (1px) */\n\nfunction findLongestString(str1, str2) {\n  if (typeof str1 !== 'string' || typeof str2 !== 'string') {\n    return str1 || str2 || undefined;\n  }\n  return str1.length > str2.length ? str1 : str2;\n}\nfunction getContentPxAvg(rowSample, columnIdOrAccessor, uniqueId) {\n  return rowSample.reduce((acc, item) => {\n    const dataPoint = item.values?.[columnIdOrAccessor];\n    let val = 0;\n    if (dataPoint) {\n      val = stringToPx(dataPoint, uniqueId) + CELL_PADDING_PX;\n    }\n    return acc + val;\n  }, 0) / (rowSample.length || 1);\n}\nfunction stringToPx(dataPoint, id) {\n  let isHeader = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const elementId = isHeader ? 'scaleModeHelperHeader' : 'scaleModeHelper';\n  const ruler = document.getElementById(`${elementId}-${id}`);\n  if (ruler) {\n    ruler.textContent = `${dataPoint}`;\n    return ruler.scrollWidth;\n  }\n  return 0;\n}\nconst columnsDeps = (deps, _ref) => {\n  let {\n    instance: {\n      state,\n      webComponentsReactProperties,\n      visibleColumns,\n      data,\n      rows,\n      columns\n    }\n  } = _ref;\n  const isLoadingPlaceholder = !data?.length && webComponentsReactProperties.loading;\n  const hasRows = rows?.length > 0;\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const colsEqual = useMemo(() => {\n    return visibleColumns?.filter(col => col.id !== '__ui5wcr__internal_selection_column' && col.id !== '__ui5wcr__internal_highlight_column' && col.id !== '__ui5wcr__internal_navigation_column').every(visCol => {\n      const id = visCol.id ?? visCol.accessor;\n      return columns.some(item => {\n        return item.accessor === id || item.id === id;\n      });\n    });\n  }, [visibleColumns, columns]);\n  return [...deps, hasRows, colsEqual, visibleColumns?.length, !state.tableColResized && state.tableClientWidth, state.hiddenColumns.length, webComponentsReactProperties.scaleWidthMode, isLoadingPlaceholder];\n};\nconst smartColumns = (columns, instance, hiddenColumns) => {\n  const {\n    rows,\n    state,\n    webComponentsReactProperties\n  } = instance;\n  const rowSample = rows.slice(0, ROW_SAMPLE_SIZE);\n  const {\n    tableClientWidth: totalWidth\n  } = state;\n  const visibleColumns = columns.filter(column => (column.isVisible ?? true) && !hiddenColumns.includes(column.id ?? column.accessor));\n  const columnMeta = visibleColumns.reduce((metadata, column) => {\n    const columnIdOrAccessor = column.id ?? column.accessor;\n    if (column.id === '__ui5wcr__internal_selection_column' || column.id === '__ui5wcr__internal_highlight_column' || column.id === '__ui5wcr__internal_navigation_column') {\n      metadata[columnIdOrAccessor] = {\n        headerPx: column.width || column.minWidth || 60,\n        contentPxAvg: 0\n      };\n      return metadata;\n    }\n    let headerPx, contentPxAvg;\n    if (column.scaleWidthModeOptions?.cellString) {\n      contentPxAvg = stringToPx(column.scaleWidthModeOptions.cellString, webComponentsReactProperties.uniqueId) + CELL_PADDING_PX;\n    } else {\n      contentPxAvg = getContentPxAvg(rowSample, columnIdOrAccessor, webComponentsReactProperties.uniqueId);\n    }\n    if (column.scaleWidthModeOptions?.headerString) {\n      headerPx = Math.max(stringToPx(column.scaleWidthModeOptions.headerString, webComponentsReactProperties.uniqueId, true) + CELL_PADDING_PX, 60);\n    } else {\n      headerPx = typeof column.Header === 'string' ? Math.max(stringToPx(column.Header, webComponentsReactProperties.uniqueId, true) + CELL_PADDING_PX, 60) : 60;\n    }\n    metadata[columnIdOrAccessor] = {\n      headerPx,\n      contentPxAvg\n    };\n    return metadata;\n  }, {});\n  let totalContentPxAvgPrio1 = 0;\n  let totalNumberColPrio2 = 0;\n\n  // width reserved by predefined widths or columns defined by header\n  const reservedWidth = visibleColumns.reduce((acc, column) => {\n    const columnIdOrAccessor = column.id ?? column.accessor;\n    const {\n      contentPxAvg,\n      headerPx\n    } = columnMeta[columnIdOrAccessor];\n    if (contentPxAvg > headerPx) {\n      if (!column.minWidth && !column.width) {\n        totalContentPxAvgPrio1 += columnMeta[columnIdOrAccessor].contentPxAvg;\n        totalNumberColPrio2++;\n        return acc;\n      } else {\n        return acc + Math.max(column.minWidth || 0, column.width || 0);\n      }\n    } else {\n      if (!column.minWidth && !column.width) {\n        totalNumberColPrio2++;\n      }\n      const max = Math.max(column.minWidth || 0, column.width || 0, headerPx);\n      columnMeta[columnIdOrAccessor].headerDefinesWidth = true;\n      return acc + max;\n    }\n  }, 0);\n  const availableWidthPrio1 = totalWidth - reservedWidth;\n  let availableWidthPrio2 = availableWidthPrio1;\n\n  // Step 1: Give columns defined by content more space (priority 1)\n  const visibleColumnsAdaptedPrio1 = visibleColumns.map(column => {\n    const columnIdOrAccessor = column.id ?? column.accessor;\n    const meta = columnMeta[columnIdOrAccessor];\n    if (meta && !column.minWidth && !column.width && !meta.headerDefinesWidth) {\n      let targetWidth;\n      const {\n        contentPxAvg,\n        headerPx\n      } = meta;\n      if (availableWidthPrio1 > 0) {\n        const factor = contentPxAvg / totalContentPxAvgPrio1;\n        targetWidth = Math.max(Math.min(availableWidthPrio1 * factor, contentPxAvg), headerPx);\n        availableWidthPrio2 -= targetWidth;\n      }\n      return {\n        ...column,\n        nextWidth: targetWidth || headerPx\n      };\n    }\n    return column;\n  });\n  // Step 2: Give all columns more space (priority 2)\n  return visibleColumnsAdaptedPrio1.map(column => {\n    const columnIdOrAccessor = column.id ?? column.accessor;\n    const meta = columnMeta[columnIdOrAccessor];\n    const {\n      headerPx\n    } = meta;\n    if (meta && !column.minWidth && !column.width) {\n      let targetWidth = column.nextWidth || headerPx;\n      if (availableWidthPrio2 > 0) {\n        targetWidth = targetWidth + availableWidthPrio2 * (1 / totalNumberColPrio2);\n      }\n      return {\n        ...column,\n        width: targetWidth\n      };\n    } else {\n      return {\n        ...column,\n        width: Math.max(column.width || 0, 60, headerPx)\n      };\n    }\n  });\n};\nconst columns = (columns, _ref2) => {\n  let {\n    instance\n  } = _ref2;\n  if (!instance.state || !instance.rows) {\n    return columns;\n  }\n  const {\n    rows,\n    state\n  } = instance;\n  const {\n    hiddenColumns,\n    tableClientWidth: totalWidth\n  } = state;\n  const {\n    scaleWidthMode,\n    loading,\n    uniqueId\n  } = instance.webComponentsReactProperties;\n  if (columns.length === 0 || !totalWidth || !AnalyticalTableScaleWidthMode[scaleWidthMode]) {\n    return columns;\n  }\n\n  // map columns to visibleColumns\n  const visibleColumns = instance.visibleColumns.map(visCol => {\n    const column = columns.find(col => {\n      return col.id === visCol.id || col.accessor !== undefined && visCol.id !== undefined && col.accessor === visCol.id;\n    });\n    if (column) {\n      return column;\n    }\n    return column ?? false;\n  }).filter(Boolean);\n  if (scaleWidthMode === AnalyticalTableScaleWidthMode.Smart) {\n    return smartColumns(columns, instance, hiddenColumns);\n  }\n  const calculateDefaultTableWidth = () => {\n    const columnsWithWidthProperties = visibleColumns.filter(column => column.width ?? column.minWidth ?? column.maxWidth ?? false).map(column => ({\n      accessor: column.id ?? column.accessor,\n      minWidth: column.minWidth,\n      width: column.width,\n      maxWidth: column.maxWidth\n    }));\n    let availableWidth = totalWidth;\n    let defaultColumnsCount = visibleColumns.length;\n    const columnsWithFixedWidth = columnsWithWidthProperties.map(column => {\n      const {\n        width,\n        minWidth,\n        maxWidth,\n        accessor\n      } = column;\n      if (width) {\n        // necessary because of default minWidth\n        const acceptedWidth = accessor !== '__ui5wcr__internal_highlight_column' && accessor !== '__ui5wcr__internal_selection_column' && accessor !== '__ui5wcr__internal_navigation_column' && width < 60 ? 60 : width;\n        availableWidth -= acceptedWidth;\n        defaultColumnsCount--;\n        return acceptedWidth;\n      }\n      const columnsWithMaxWidth = columnsWithWidthProperties.filter(item => item.maxWidth);\n      const aggregatedColumnsMaxWidth = columnsWithMaxWidth.reduce((acc, cur) => acc + cur.maxWidth, 0);\n      const aggregatedColumnsMinWidth = columnsWithWidthProperties.filter(item => item.minWidth && !item.maxWidth).reduce((acc, cur) => acc + cur.minWidth, 0);\n      if (minWidth > availableWidth / defaultColumnsCount) {\n        // don't apply minWidth if enough space is available because of maxWidth properties\n        if (availableWidth - aggregatedColumnsMaxWidth > aggregatedColumnsMinWidth + (visibleColumns.length - columnsWithWidthProperties.length) * 60) {\n          // apply minWidth only if it's larger than the calculated available width\n          if (minWidth > (availableWidth - aggregatedColumnsMaxWidth) / columnsWithMaxWidth.length) {\n            availableWidth -= minWidth;\n            defaultColumnsCount--;\n            return minWidth;\n          }\n          return false;\n        }\n        availableWidth -= minWidth;\n        defaultColumnsCount--;\n        return minWidth;\n      }\n      if (maxWidth < availableWidth / defaultColumnsCount) {\n        availableWidth -= maxWidth;\n        defaultColumnsCount--;\n        return maxWidth;\n      }\n      return false;\n    }).filter(Boolean);\n    const fixedWidth = columnsWithFixedWidth.reduce((acc, val) => acc + val, 0);\n    // check if columns are visible and table has width\n    if (visibleColumns.length > 0 && totalWidth > 0) {\n      // set fixedWidth as defaultWidth if all visible columns have fixed value\n      if (visibleColumns.length === columnsWithFixedWidth.length) {\n        return fixedWidth / visibleColumns.length;\n      }\n      // spread default columns\n      if (totalWidth >= fixedWidth + defaultColumnsCount * DEFAULT_COLUMN_WIDTH) {\n        return (totalWidth - fixedWidth) / defaultColumnsCount;\n      }\n    }\n    return DEFAULT_COLUMN_WIDTH;\n  };\n  const hasData = instance.data.length > 0;\n  if (scaleWidthMode === AnalyticalTableScaleWidthMode.Default || !hasData && loading) {\n    const defaultWidth = calculateDefaultTableWidth();\n    return columns.map(column => ({\n      ...column,\n      width: column.width ?? defaultWidth\n    }));\n  }\n\n  // AnalyticalTableScaleWidthMode.Grow\n\n  const rowSample = rows.slice(0, ROW_SAMPLE_SIZE);\n  const columnMeta = visibleColumns.reduce((acc, column) => {\n    const columnIdOrAccessor = column.id ?? column.accessor;\n    if (column.id === '__ui5wcr__internal_selection_column' || column.id === '__ui5wcr__internal_highlight_column' || column.id === '__ui5wcr__internal_navigation_column') {\n      acc[columnIdOrAccessor] = {\n        minHeaderWidth: column.width,\n        fullWidth: column.width\n      };\n      return acc;\n    }\n    const smartWidth = findLongestString(column.scaleWidthModeOptions?.headerString, column.scaleWidthModeOptions?.cellString);\n    if (smartWidth) {\n      const width = Math.max(stringToPx(smartWidth, uniqueId) + CELL_PADDING_PX, 60);\n      acc[columnIdOrAccessor] = {\n        minHeaderWidth: width,\n        fullWidth: width\n      };\n      return acc;\n    }\n    const minHeaderWidth = typeof column.Header === 'string' ? stringToPx(column.Header, uniqueId, true) + CELL_PADDING_PX : DEFAULT_COLUMN_WIDTH;\n    acc[columnIdOrAccessor] = {\n      minHeaderWidth,\n      fullWidth: Math.max(minHeaderWidth, getContentPxAvg(rowSample, columnIdOrAccessor, uniqueId))\n    };\n    return acc;\n  }, {});\n  let reservedWidth = visibleColumns.reduce((acc, column) => {\n    const {\n      minHeaderWidth,\n      fullWidth\n    } = columnMeta[column.id ?? column.accessor];\n    return acc + Math.max(column.minWidth || 0, column.width || 0, minHeaderWidth || 0, fullWidth) || 0;\n  }, 0);\n  let availableWidth = totalWidth - reservedWidth;\n  if (availableWidth > 0) {\n    let notReservedCount = 0;\n    reservedWidth = visibleColumns.reduce((acc, column) => {\n      const reserved = Math.max(column.minWidth || 0, column.width || 0) || 0;\n      if (!reserved) {\n        notReservedCount++;\n      }\n      return acc + reserved;\n    }, 0);\n    availableWidth = totalWidth - reservedWidth;\n    return columns.map(column => {\n      const isColumnVisible = (column.isVisible ?? true) && !hiddenColumns.includes(column.id ?? column.accessor);\n      const meta = columnMeta[column.id ?? column.accessor];\n      if (isColumnVisible && meta) {\n        const {\n          minHeaderWidth\n        } = meta;\n        const targetWidth = availableWidth / notReservedCount;\n        return {\n          ...column,\n          width: column.width ?? Math.min(targetWidth, MAX_WIDTH),\n          minWidth: column.minWidth ?? minHeaderWidth\n        };\n      }\n      return column;\n    });\n  }\n  return columns.map(column => {\n    const isColumnVisible = (column.isVisible ?? true) && !hiddenColumns.includes(column.id ?? column.accessor);\n    const meta = columnMeta[column.id ?? column.accessor];\n    if (isColumnVisible && meta) {\n      const {\n        fullWidth\n      } = meta;\n      return {\n        ...column,\n        width: column.width ?? fullWidth,\n        maxWidth: column.maxWidth ?? MAX_WIDTH\n      };\n    }\n    return column;\n  });\n};\nexport const useDynamicColumnWidths = hooks => {\n  hooks.columns.push(columns);\n  hooks.columnsDeps.push(columnsDeps);\n};","map":{"version":3,"names":["useMemo","AnalyticalTableScaleWidthMode","DEFAULT_COLUMN_WIDTH","ROW_SAMPLE_SIZE","MAX_WIDTH","CELL_PADDING_PX","findLongestString","str1","str2","undefined","length","getContentPxAvg","rowSample","columnIdOrAccessor","uniqueId","reduce","acc","item","dataPoint","values","val","stringToPx","id","isHeader","arguments","elementId","ruler","document","getElementById","textContent","scrollWidth","columnsDeps","deps","_ref","instance","state","webComponentsReactProperties","visibleColumns","data","rows","columns","isLoadingPlaceholder","loading","hasRows","colsEqual","filter","col","every","visCol","accessor","some","tableColResized","tableClientWidth","hiddenColumns","scaleWidthMode","smartColumns","slice","totalWidth","column","isVisible","includes","columnMeta","metadata","headerPx","width","minWidth","contentPxAvg","scaleWidthModeOptions","cellString","headerString","Math","max","Header","totalContentPxAvgPrio1","totalNumberColPrio2","reservedWidth","headerDefinesWidth","availableWidthPrio1","availableWidthPrio2","visibleColumnsAdaptedPrio1","map","meta","targetWidth","factor","min","nextWidth","_ref2","find","Boolean","Smart","calculateDefaultTableWidth","columnsWithWidthProperties","maxWidth","availableWidth","defaultColumnsCount","columnsWithFixedWidth","acceptedWidth","columnsWithMaxWidth","aggregatedColumnsMaxWidth","cur","aggregatedColumnsMinWidth","fixedWidth","hasData","Default","defaultWidth","minHeaderWidth","fullWidth","smartWidth","notReservedCount","reserved","isColumnVisible","useDynamicColumnWidths","hooks","push"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-react/dist/components/AnalyticalTable/hooks/useDynamicColumnWidths.js"],"sourcesContent":["import { useMemo } from 'react';\nimport { AnalyticalTableScaleWidthMode } from '../../../enums/index.js';\nimport { DEFAULT_COLUMN_WIDTH } from '../defaults/Column/index.js';\nconst ROW_SAMPLE_SIZE = 20;\nconst MAX_WIDTH = 700;\nexport const CELL_PADDING_PX = 18; /* padding left and right 0.5rem each (16px) + borders (1px) + buffer (1px) */\n\nfunction findLongestString(str1, str2) {\n  if (typeof str1 !== 'string' || typeof str2 !== 'string') {\n    return str1 || str2 || undefined;\n  }\n  return str1.length > str2.length ? str1 : str2;\n}\nfunction getContentPxAvg(rowSample, columnIdOrAccessor, uniqueId) {\n  return rowSample.reduce((acc, item) => {\n    const dataPoint = item.values?.[columnIdOrAccessor];\n    let val = 0;\n    if (dataPoint) {\n      val = stringToPx(dataPoint, uniqueId) + CELL_PADDING_PX;\n    }\n    return acc + val;\n  }, 0) / (rowSample.length || 1);\n}\nfunction stringToPx(dataPoint, id, isHeader = false) {\n  const elementId = isHeader ? 'scaleModeHelperHeader' : 'scaleModeHelper';\n  const ruler = document.getElementById(`${elementId}-${id}`);\n  if (ruler) {\n    ruler.textContent = `${dataPoint}`;\n    return ruler.scrollWidth;\n  }\n  return 0;\n}\nconst columnsDeps = (deps, {\n  instance: {\n    state,\n    webComponentsReactProperties,\n    visibleColumns,\n    data,\n    rows,\n    columns\n  }\n}) => {\n  const isLoadingPlaceholder = !data?.length && webComponentsReactProperties.loading;\n  const hasRows = rows?.length > 0;\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const colsEqual = useMemo(() => {\n    return visibleColumns?.filter(col => col.id !== '__ui5wcr__internal_selection_column' && col.id !== '__ui5wcr__internal_highlight_column' && col.id !== '__ui5wcr__internal_navigation_column').every(visCol => {\n      const id = visCol.id ?? visCol.accessor;\n      return columns.some(item => {\n        return item.accessor === id || item.id === id;\n      });\n    });\n  }, [visibleColumns, columns]);\n  return [...deps, hasRows, colsEqual, visibleColumns?.length, !state.tableColResized && state.tableClientWidth, state.hiddenColumns.length, webComponentsReactProperties.scaleWidthMode, isLoadingPlaceholder];\n};\nconst smartColumns = (columns, instance, hiddenColumns) => {\n  const {\n    rows,\n    state,\n    webComponentsReactProperties\n  } = instance;\n  const rowSample = rows.slice(0, ROW_SAMPLE_SIZE);\n  const {\n    tableClientWidth: totalWidth\n  } = state;\n  const visibleColumns = columns.filter(column => (column.isVisible ?? true) && !hiddenColumns.includes(column.id ?? column.accessor));\n  const columnMeta = visibleColumns.reduce((metadata, column) => {\n    const columnIdOrAccessor = column.id ?? column.accessor;\n    if (column.id === '__ui5wcr__internal_selection_column' || column.id === '__ui5wcr__internal_highlight_column' || column.id === '__ui5wcr__internal_navigation_column') {\n      metadata[columnIdOrAccessor] = {\n        headerPx: column.width || column.minWidth || 60,\n        contentPxAvg: 0\n      };\n      return metadata;\n    }\n    let headerPx, contentPxAvg;\n    if (column.scaleWidthModeOptions?.cellString) {\n      contentPxAvg = stringToPx(column.scaleWidthModeOptions.cellString, webComponentsReactProperties.uniqueId) + CELL_PADDING_PX;\n    } else {\n      contentPxAvg = getContentPxAvg(rowSample, columnIdOrAccessor, webComponentsReactProperties.uniqueId);\n    }\n    if (column.scaleWidthModeOptions?.headerString) {\n      headerPx = Math.max(stringToPx(column.scaleWidthModeOptions.headerString, webComponentsReactProperties.uniqueId, true) + CELL_PADDING_PX, 60);\n    } else {\n      headerPx = typeof column.Header === 'string' ? Math.max(stringToPx(column.Header, webComponentsReactProperties.uniqueId, true) + CELL_PADDING_PX, 60) : 60;\n    }\n    metadata[columnIdOrAccessor] = {\n      headerPx,\n      contentPxAvg\n    };\n    return metadata;\n  }, {});\n  let totalContentPxAvgPrio1 = 0;\n  let totalNumberColPrio2 = 0;\n\n  // width reserved by predefined widths or columns defined by header\n  const reservedWidth = visibleColumns.reduce((acc, column) => {\n    const columnIdOrAccessor = column.id ?? column.accessor;\n    const {\n      contentPxAvg,\n      headerPx\n    } = columnMeta[columnIdOrAccessor];\n    if (contentPxAvg > headerPx) {\n      if (!column.minWidth && !column.width) {\n        totalContentPxAvgPrio1 += columnMeta[columnIdOrAccessor].contentPxAvg;\n        totalNumberColPrio2++;\n        return acc;\n      } else {\n        return acc + Math.max(column.minWidth || 0, column.width || 0);\n      }\n    } else {\n      if (!column.minWidth && !column.width) {\n        totalNumberColPrio2++;\n      }\n      const max = Math.max(column.minWidth || 0, column.width || 0, headerPx);\n      columnMeta[columnIdOrAccessor].headerDefinesWidth = true;\n      return acc + max;\n    }\n  }, 0);\n  const availableWidthPrio1 = totalWidth - reservedWidth;\n  let availableWidthPrio2 = availableWidthPrio1;\n\n  // Step 1: Give columns defined by content more space (priority 1)\n  const visibleColumnsAdaptedPrio1 = visibleColumns.map(column => {\n    const columnIdOrAccessor = column.id ?? column.accessor;\n    const meta = columnMeta[columnIdOrAccessor];\n    if (meta && !column.minWidth && !column.width && !meta.headerDefinesWidth) {\n      let targetWidth;\n      const {\n        contentPxAvg,\n        headerPx\n      } = meta;\n      if (availableWidthPrio1 > 0) {\n        const factor = contentPxAvg / totalContentPxAvgPrio1;\n        targetWidth = Math.max(Math.min(availableWidthPrio1 * factor, contentPxAvg), headerPx);\n        availableWidthPrio2 -= targetWidth;\n      }\n      return {\n        ...column,\n        nextWidth: targetWidth || headerPx\n      };\n    }\n    return column;\n  });\n  // Step 2: Give all columns more space (priority 2)\n  return visibleColumnsAdaptedPrio1.map(column => {\n    const columnIdOrAccessor = column.id ?? column.accessor;\n    const meta = columnMeta[columnIdOrAccessor];\n    const {\n      headerPx\n    } = meta;\n    if (meta && !column.minWidth && !column.width) {\n      let targetWidth = column.nextWidth || headerPx;\n      if (availableWidthPrio2 > 0) {\n        targetWidth = targetWidth + availableWidthPrio2 * (1 / totalNumberColPrio2);\n      }\n      return {\n        ...column,\n        width: targetWidth\n      };\n    } else {\n      return {\n        ...column,\n        width: Math.max(column.width || 0, 60, headerPx)\n      };\n    }\n  });\n};\nconst columns = (columns, {\n  instance\n}) => {\n  if (!instance.state || !instance.rows) {\n    return columns;\n  }\n  const {\n    rows,\n    state\n  } = instance;\n  const {\n    hiddenColumns,\n    tableClientWidth: totalWidth\n  } = state;\n  const {\n    scaleWidthMode,\n    loading,\n    uniqueId\n  } = instance.webComponentsReactProperties;\n  if (columns.length === 0 || !totalWidth || !AnalyticalTableScaleWidthMode[scaleWidthMode]) {\n    return columns;\n  }\n\n  // map columns to visibleColumns\n  const visibleColumns = instance.visibleColumns.map(visCol => {\n    const column = columns.find(col => {\n      return col.id === visCol.id || col.accessor !== undefined && visCol.id !== undefined && col.accessor === visCol.id;\n    });\n    if (column) {\n      return column;\n    }\n    return column ?? false;\n  }).filter(Boolean);\n  if (scaleWidthMode === AnalyticalTableScaleWidthMode.Smart) {\n    return smartColumns(columns, instance, hiddenColumns);\n  }\n  const calculateDefaultTableWidth = () => {\n    const columnsWithWidthProperties = visibleColumns.filter(column => column.width ?? column.minWidth ?? column.maxWidth ?? false).map(column => ({\n      accessor: column.id ?? column.accessor,\n      minWidth: column.minWidth,\n      width: column.width,\n      maxWidth: column.maxWidth\n    }));\n    let availableWidth = totalWidth;\n    let defaultColumnsCount = visibleColumns.length;\n    const columnsWithFixedWidth = columnsWithWidthProperties.map(column => {\n      const {\n        width,\n        minWidth,\n        maxWidth,\n        accessor\n      } = column;\n      if (width) {\n        // necessary because of default minWidth\n        const acceptedWidth = accessor !== '__ui5wcr__internal_highlight_column' && accessor !== '__ui5wcr__internal_selection_column' && accessor !== '__ui5wcr__internal_navigation_column' && width < 60 ? 60 : width;\n        availableWidth -= acceptedWidth;\n        defaultColumnsCount--;\n        return acceptedWidth;\n      }\n      const columnsWithMaxWidth = columnsWithWidthProperties.filter(item => item.maxWidth);\n      const aggregatedColumnsMaxWidth = columnsWithMaxWidth.reduce((acc, cur) => acc + cur.maxWidth, 0);\n      const aggregatedColumnsMinWidth = columnsWithWidthProperties.filter(item => item.minWidth && !item.maxWidth).reduce((acc, cur) => acc + cur.minWidth, 0);\n      if (minWidth > availableWidth / defaultColumnsCount) {\n        // don't apply minWidth if enough space is available because of maxWidth properties\n        if (availableWidth - aggregatedColumnsMaxWidth > aggregatedColumnsMinWidth + (visibleColumns.length - columnsWithWidthProperties.length) * 60) {\n          // apply minWidth only if it's larger than the calculated available width\n          if (minWidth > (availableWidth - aggregatedColumnsMaxWidth) / columnsWithMaxWidth.length) {\n            availableWidth -= minWidth;\n            defaultColumnsCount--;\n            return minWidth;\n          }\n          return false;\n        }\n        availableWidth -= minWidth;\n        defaultColumnsCount--;\n        return minWidth;\n      }\n      if (maxWidth < availableWidth / defaultColumnsCount) {\n        availableWidth -= maxWidth;\n        defaultColumnsCount--;\n        return maxWidth;\n      }\n      return false;\n    }).filter(Boolean);\n    const fixedWidth = columnsWithFixedWidth.reduce((acc, val) => acc + val, 0);\n    // check if columns are visible and table has width\n    if (visibleColumns.length > 0 && totalWidth > 0) {\n      // set fixedWidth as defaultWidth if all visible columns have fixed value\n      if (visibleColumns.length === columnsWithFixedWidth.length) {\n        return fixedWidth / visibleColumns.length;\n      }\n      // spread default columns\n      if (totalWidth >= fixedWidth + defaultColumnsCount * DEFAULT_COLUMN_WIDTH) {\n        return (totalWidth - fixedWidth) / defaultColumnsCount;\n      }\n    }\n    return DEFAULT_COLUMN_WIDTH;\n  };\n  const hasData = instance.data.length > 0;\n  if (scaleWidthMode === AnalyticalTableScaleWidthMode.Default || !hasData && loading) {\n    const defaultWidth = calculateDefaultTableWidth();\n    return columns.map(column => ({\n      ...column,\n      width: column.width ?? defaultWidth\n    }));\n  }\n\n  // AnalyticalTableScaleWidthMode.Grow\n\n  const rowSample = rows.slice(0, ROW_SAMPLE_SIZE);\n  const columnMeta = visibleColumns.reduce((acc, column) => {\n    const columnIdOrAccessor = column.id ?? column.accessor;\n    if (column.id === '__ui5wcr__internal_selection_column' || column.id === '__ui5wcr__internal_highlight_column' || column.id === '__ui5wcr__internal_navigation_column') {\n      acc[columnIdOrAccessor] = {\n        minHeaderWidth: column.width,\n        fullWidth: column.width\n      };\n      return acc;\n    }\n    const smartWidth = findLongestString(column.scaleWidthModeOptions?.headerString, column.scaleWidthModeOptions?.cellString);\n    if (smartWidth) {\n      const width = Math.max(stringToPx(smartWidth, uniqueId) + CELL_PADDING_PX, 60);\n      acc[columnIdOrAccessor] = {\n        minHeaderWidth: width,\n        fullWidth: width\n      };\n      return acc;\n    }\n    const minHeaderWidth = typeof column.Header === 'string' ? stringToPx(column.Header, uniqueId, true) + CELL_PADDING_PX : DEFAULT_COLUMN_WIDTH;\n    acc[columnIdOrAccessor] = {\n      minHeaderWidth,\n      fullWidth: Math.max(minHeaderWidth, getContentPxAvg(rowSample, columnIdOrAccessor, uniqueId))\n    };\n    return acc;\n  }, {});\n  let reservedWidth = visibleColumns.reduce((acc, column) => {\n    const {\n      minHeaderWidth,\n      fullWidth\n    } = columnMeta[column.id ?? column.accessor];\n    return acc + Math.max(column.minWidth || 0, column.width || 0, minHeaderWidth || 0, fullWidth) || 0;\n  }, 0);\n  let availableWidth = totalWidth - reservedWidth;\n  if (availableWidth > 0) {\n    let notReservedCount = 0;\n    reservedWidth = visibleColumns.reduce((acc, column) => {\n      const reserved = Math.max(column.minWidth || 0, column.width || 0) || 0;\n      if (!reserved) {\n        notReservedCount++;\n      }\n      return acc + reserved;\n    }, 0);\n    availableWidth = totalWidth - reservedWidth;\n    return columns.map(column => {\n      const isColumnVisible = (column.isVisible ?? true) && !hiddenColumns.includes(column.id ?? column.accessor);\n      const meta = columnMeta[column.id ?? column.accessor];\n      if (isColumnVisible && meta) {\n        const {\n          minHeaderWidth\n        } = meta;\n        const targetWidth = availableWidth / notReservedCount;\n        return {\n          ...column,\n          width: column.width ?? Math.min(targetWidth, MAX_WIDTH),\n          minWidth: column.minWidth ?? minHeaderWidth\n        };\n      }\n      return column;\n    });\n  }\n  return columns.map(column => {\n    const isColumnVisible = (column.isVisible ?? true) && !hiddenColumns.includes(column.id ?? column.accessor);\n    const meta = columnMeta[column.id ?? column.accessor];\n    if (isColumnVisible && meta) {\n      const {\n        fullWidth\n      } = meta;\n      return {\n        ...column,\n        width: column.width ?? fullWidth,\n        maxWidth: column.maxWidth ?? MAX_WIDTH\n      };\n    }\n    return column;\n  });\n};\nexport const useDynamicColumnWidths = hooks => {\n  hooks.columns.push(columns);\n  hooks.columnsDeps.push(columnsDeps);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}