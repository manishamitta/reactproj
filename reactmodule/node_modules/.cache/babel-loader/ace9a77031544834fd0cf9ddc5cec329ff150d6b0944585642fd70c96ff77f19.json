{"ast":null,"code":"\"use strict\";\n\nconst n = /^(?:a|area)$/i,\n  a = /^(?:input|select|textarea|button)$/i,\n  r = e => {\n    if (e.disabled) return !1;\n    const t = e.getAttribute(\"tabindex\");\n    return t != null ? parseInt(t) >= 0 : a.test(e.nodeName) || n.test(e.nodeName) && !!e.href;\n  };\nexport default r;","map":{"version":3,"names":["n","a","r","e","disabled","t","getAttribute","parseInt","test","nodeName","href"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-base/src/util/isElementClickable.ts"],"sourcesContent":["const rClickable = /^(?:a|area)$/i;\nconst rFocusable = /^(?:input|select|textarea|button)$/i;\n\nconst isElementClickable = (el: HTMLElement): boolean => {\n\tif ((el as HTMLButtonElement).disabled) {\n\t\treturn false;\n\t}\n\n\tconst tabIndex = el.getAttribute(\"tabindex\");\n\tif (tabIndex !== null && tabIndex !== undefined) {\n\t\treturn parseInt(tabIndex) >= 0;\n\t}\n\n\treturn rFocusable.test(el.nodeName)\n\t\t|| (rClickable.test(el.nodeName)\n\t\t&& !!(el as HTMLLinkElement).href);\n};\n\nexport default isElementClickable;\n"],"mappings":";;AAAA,MAAMA,CAAA,GAAa;EACbC,CAAA,GAAa;EAEbC,CAAA,GAAsBC,CAAA,IAA6B;IACxD,IAAKA,CAAA,CAAyBC,QAAA,EAC7B,OAAO;IAGR,MAAMC,CAAA,GAAWF,CAAA,CAAGG,YAAA,CAAa,UAAU;IAC3C,OAAID,CAAA,IAAa,OACTE,QAAA,CAASF,CAAQ,KAAK,IAGvBJ,CAAA,CAAWO,IAAA,CAAKL,CAAA,CAAGM,QAAQ,KAC7BT,CAAA,CAAWQ,IAAA,CAAKL,CAAA,CAAGM,QAAQ,KAC5B,CAAC,CAAEN,CAAA,CAAuBO,IAC/B;EAAA;AAEA,eAAeR,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}