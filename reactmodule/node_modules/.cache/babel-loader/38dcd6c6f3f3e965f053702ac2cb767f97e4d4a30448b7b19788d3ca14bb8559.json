{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar TableGrowing_1;\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport event from \"@ui5/webcomponents-base/dist/decorators/event.js\";\nimport { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport { isSpace, isEnter } from \"@ui5/webcomponents-base/dist/Keys.js\";\nimport TableGrowingMode from \"./types/TableGrowingMode.js\";\nimport TableGrowingTemplate from \"./generated/templates/TableGrowingTemplate.lit.js\";\nimport TableGrowingCss from \"./generated/themes/TableGrowing.css.js\";\nimport { TABLE_MORE, TABLE_MORE_DESCRIPTION } from \"./generated/i18n/i18n-defaults.js\";\n// The documentation should be similar to the Table.ts class documentation!\n// Please only use that style where it uses markdown and the documentation is more readable.\n/**\n * @class\n *\n * ### Overview\n *\n * The `ui5-table-growing` component is used inside the `ui5-table` to add a growing/data loading functionalities\n * to the table.\n *\n * The component offers two options:\n * * Button - a More button is displayed, clicking it will load more data.\n * * Scroll - additional data is loaded automatically when the user scrolls to the end of the table.\n *\n * ### Usage\n *\n * The `ui5-table-growing` component is only used inside the `ui5-table` component as a feature.\n * It has to be slotted inside the `ui5-table` in the `features` slot.\n * The component is not intended to be used as a standalone component.\n *\n * ```html\n * <ui5-table>\n * \t<ui5-table-growing type=\"Button\" growing-text=\"More\" slot=\"features\"></ui5-table-growing>\n * </ui5-table>\n * ```\n *\n * ### ES6 Module Import\n *\n * `import \"@ui5/webcomponents/dist/TableGrowing.js\";`\n *\n * @constructor\n * @extends UI5Element\n * @since 2.0.0\n * @public\n * @experimental This web component is available since 2.0 with an experimental flag and its API and behavior are subject to change.\n */\nlet TableGrowing = TableGrowing_1 = class TableGrowing extends UI5Element {\n  constructor() {\n    super(...arguments);\n    /**\n     * Defines the mode of the <code>ui5-table</code> growing.\n     *\n     * Available options are:\n     *\n     * Button - Shows a More button at the bottom of the table, pressing it will load more rows.\n     *\n     * Scroll - The rows are loaded automatically by scrolling to the bottom of the table. If the table is not scrollable, this option is the same as the Button.\n     * @default \"Button\"\n     * @public\n     */\n    this.type = \"Button\";\n    /**\n     * Disables the growing feature.\n     */\n    this.disabled = false;\n    /**\n     * Defines the active state of the growing button.\n     * Used for keyboard interaction.\n     * @private\n     */\n    this._activeState = false;\n    this.identifier = \"TableGrowing\";\n  }\n  static async onDefine() {\n    TableGrowing_1.i18nBundle = await getI18nBundle(\"@ui5/webcomponents\");\n  }\n  onTableActivate(table) {\n    this._table = table;\n    this._shouldFocusRow = false;\n    if (this._hasScrollToLoad()) {\n      this._observeTableEnd();\n    }\n  }\n  onTableRendered() {\n    // Focus the first row after growing, when the growing button is used\n    if (this._shouldFocusRow) {\n      this._shouldFocusRow = false;\n      let focusRow = this._currentLastRow?.nextElementSibling;\n      if (this.hasGrowingComponent()) {\n        focusRow ||= this.getFocusDomRef();\n      }\n      focusRow ||= this._table?.rows[0];\n      focusRow?.focus();\n    }\n    if (this.disabled) {\n      return;\n    }\n    if (this._hasScrollToLoad()) {\n      this._observeTableEnd();\n    }\n  }\n  onExitDOM() {\n    this._table = undefined;\n    this._observer?.disconnect();\n    this._observer = undefined;\n    this._currentLastRow = undefined;\n  }\n  onBeforeRendering() {\n    this._observer?.disconnect();\n    this._observer = undefined;\n    this._currentLastRow = undefined;\n    this._invalidateTable();\n  }\n  hasGrowingComponent() {\n    if (this._hasScrollToLoad()) {\n      return !(this._table && this._table._scrollContainer.scrollHeight > this._table._scrollContainer.clientHeight) ?? true;\n    }\n    return this.type === TableGrowingMode.Button && !this.disabled;\n  }\n  /**\n   * An event handler that can be used by the Table to notify the TableGrowing that\n   * the Table is growing either by pressing the load more button or by scrolling to the end of the table.\n   */\n  loadMore() {\n    // remembers the last row. only do this when the table has a growing component rendered.\n    if (this._table && this.hasGrowingComponent()) {\n      this._currentLastRow = this._table.rows[this._table.rows.length - 1];\n    }\n    this._shouldFocusRow = true;\n    this.fireEvent(\"load-more\");\n  }\n  _hasScrollToLoad() {\n    return this.type === TableGrowingMode.Scroll;\n  }\n  /**\n   * Observes the end of the table.\n   * @private\n   */\n  _observeTableEnd() {\n    if (!this._table) {\n      return;\n    }\n    const lastElement = this._table.shadowRoot?.querySelector(\"#table-end-row\");\n    if (lastElement) {\n      this._getIntersectionObserver().observe(lastElement);\n    }\n  }\n  /**\n   * Returns the IntersectionObserver instance. If it does not exist, it will be created.\n   * The observer will call the loadMore function when the end of the table is reached.\n   * @private\n   */\n  _getIntersectionObserver() {\n    if (!this._observer) {\n      this._observer = new IntersectionObserver(this._onIntersection.bind(this), {\n        root: document,\n        rootMargin: \"10px\",\n        threshold: 1.0\n      });\n    }\n    return this._observer;\n  }\n  _onIntersection(entries) {\n    if (entries.some(entry => entry.isIntersecting)) {\n      this.loadMore();\n    }\n  }\n  _invalidateTable() {\n    if (!this._table) {\n      return;\n    }\n    this._table._invalidate++;\n  }\n  /**\n   * Handles the keydown event on the growing button.\n   *\n   * Calls the loadMore function when the Enter and Space keys are pressed.\n   * @private\n   */\n  _onKeydown(e) {\n    if (isSpace(e)) {\n      e.preventDefault();\n      this._activeState = true;\n    }\n    if (isEnter(e)) {\n      this.loadMore();\n      this._activeState = true;\n    }\n  }\n  _onKeyup(e) {\n    if (isSpace(e)) {\n      this.loadMore();\n    }\n    this._activeState = false;\n  }\n  _onFocusout() {\n    this._activeState = false;\n  }\n  get _growingButtonText() {\n    return this.growingText || TableGrowing_1.i18nBundle.getText(TABLE_MORE);\n  }\n  get _growingButtonDescription() {\n    return TableGrowing_1.i18nBundle.getText(TABLE_MORE_DESCRIPTION);\n  }\n  get _hasGrowingButton() {\n    return this.hasGrowingComponent();\n  }\n};\n__decorate([property()], TableGrowing.prototype, \"type\", void 0);\n__decorate([property()], TableGrowing.prototype, \"growingText\", void 0);\n__decorate([property()], TableGrowing.prototype, \"growingSubText\", void 0);\n__decorate([property({\n  type: Boolean\n})], TableGrowing.prototype, \"disabled\", void 0);\n__decorate([property({\n  type: Boolean\n})], TableGrowing.prototype, \"_activeState\", void 0);\nTableGrowing = TableGrowing_1 = __decorate([customElement({\n  tag: \"ui5-table-growing\",\n  renderer: litRender,\n  template: TableGrowingTemplate,\n  styles: TableGrowingCss\n})\n/**\n * Fired when the growing button is pressed or the user scrolls to the end of the table.\n *\n * @public\n */, event(\"load-more\")], TableGrowing);\nTableGrowing.define();\nexport default TableGrowing;","map":{"version":3,"names":["UI5Element","litRender","customElement","property","event","getI18nBundle","isSpace","isEnter","TableGrowingMode","TableGrowingTemplate","TableGrowingCss","TABLE_MORE","TABLE_MORE_DESCRIPTION","TableGrowing","TableGrowing_1","constructor","type","disabled","_activeState","identifier","onDefine","i18nBundle","onTableActivate","table","_table","_shouldFocusRow","_hasScrollToLoad","_observeTableEnd","onTableRendered","focusRow","_currentLastRow","nextElementSibling","hasGrowingComponent","getFocusDomRef","rows","focus","onExitDOM","undefined","_observer","disconnect","onBeforeRendering","_invalidateTable","_scrollContainer","scrollHeight","clientHeight","Button","loadMore","length","fireEvent","Scroll","lastElement","shadowRoot","querySelector","_getIntersectionObserver","observe","IntersectionObserver","_onIntersection","bind","root","document","rootMargin","threshold","entries","some","entry","isIntersecting","_invalidate","_onKeydown","e","preventDefault","_onKeyup","_onFocusout","_growingButtonText","growingText","getText","_growingButtonDescription","_hasGrowingButton","__decorate","Boolean","tag","renderer","template","styles","define"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents/src/TableGrowing.ts"],"sourcesContent":["import UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport event from \"@ui5/webcomponents-base/dist/decorators/event.js\";\n\nimport type I18nBundle from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport {\n\tisSpace,\n\tisEnter,\n} from \"@ui5/webcomponents-base/dist/Keys.js\";\n\nimport type Table from \"./Table.js\";\nimport type { ITableGrowing } from \"./Table.js\";\nimport TableGrowingMode from \"./types/TableGrowingMode.js\";\nimport TableGrowingTemplate from \"./generated/templates/TableGrowingTemplate.lit.js\";\nimport TableGrowingCss from \"./generated/themes/TableGrowing.css.js\";\nimport {\n\tTABLE_MORE,\n\tTABLE_MORE_DESCRIPTION,\n} from \"./generated/i18n/i18n-defaults.js\";\n\n// The documentation should be similar to the Table.ts class documentation!\n// Please only use that style where it uses markdown and the documentation is more readable.\n\n/**\n * @class\n *\n * ### Overview\n *\n * The `ui5-table-growing` component is used inside the `ui5-table` to add a growing/data loading functionalities\n * to the table.\n *\n * The component offers two options:\n * * Button - a More button is displayed, clicking it will load more data.\n * * Scroll - additional data is loaded automatically when the user scrolls to the end of the table.\n *\n * ### Usage\n *\n * The `ui5-table-growing` component is only used inside the `ui5-table` component as a feature.\n * It has to be slotted inside the `ui5-table` in the `features` slot.\n * The component is not intended to be used as a standalone component.\n *\n * ```html\n * <ui5-table>\n * \t<ui5-table-growing type=\"Button\" growing-text=\"More\" slot=\"features\"></ui5-table-growing>\n * </ui5-table>\n * ```\n *\n * ### ES6 Module Import\n *\n * `import \"@ui5/webcomponents/dist/TableGrowing.js\";`\n *\n * @constructor\n * @extends UI5Element\n * @since 2.0.0\n * @public\n * @experimental This web component is available since 2.0 with an experimental flag and its API and behavior are subject to change.\n */\n@customElement({\n\ttag: \"ui5-table-growing\",\n\trenderer: litRender,\n\ttemplate: TableGrowingTemplate,\n\tstyles: TableGrowingCss,\n})\n\n/**\n * Fired when the growing button is pressed or the user scrolls to the end of the table.\n *\n * @public\n */\n@event(\"load-more\")\n\nclass TableGrowing extends UI5Element implements ITableGrowing {\n\t/**\n\t * Defines the mode of the <code>ui5-table</code> growing.\n\t *\n\t * Available options are:\n\t *\n\t * Button - Shows a More button at the bottom of the table, pressing it will load more rows.\n\t *\n\t * Scroll - The rows are loaded automatically by scrolling to the bottom of the table. If the table is not scrollable, this option is the same as the Button.\n\t * @default \"Button\"\n\t * @public\n\t */\n\t@property()\n\ttype: `${TableGrowingMode}` = \"Button\";\n\n\t/**\n\t * Defines the text that will be displayed inside the growing button.\n\t * Has no effect when type is set to `Scroll`.\n\t *\n\t * **Note:** When not provided and the type is set to Button, a default text is displayed, corresponding to the\n\t * current language.\n\t *\n\t * @default undefined\n\t * @public\n\t */\n\t@property()\n\tgrowingText?: string;\n\n\t/**\n\t * Defines the text that will be displayed below the `growingText` inside the growing button.\n\t * Has no effect when type is set to Scroll.\n\t *\n\t * @default undefined\n\t * @public\n\t */\n\t@property()\n\tgrowingSubText?: string;\n\n\t/**\n\t * Disables the growing feature.\n\t */\n\t@property({ type: Boolean })\n\tdisabled = false;\n\n\t/**\n\t * Defines the active state of the growing button.\n\t * Used for keyboard interaction.\n\t * @private\n\t */\n\t@property({ type: Boolean })\n\t_activeState = false;\n\n\treadonly identifier = \"TableGrowing\";\n\t_table?: Table;\n\t_observer?: IntersectionObserver;\n\t_individualSlot?: string;\n\t_currentLastRow?: HTMLElement;\n\t_shouldFocusRow?: boolean;\n\n\tstatic i18nBundle: I18nBundle;\n\n\tstatic async onDefine() {\n\t\tTableGrowing.i18nBundle = await getI18nBundle(\"@ui5/webcomponents\");\n\t}\n\n\tonTableActivate(table: Table): void {\n\t\tthis._table = table;\n\t\tthis._shouldFocusRow = false;\n\t\tif (this._hasScrollToLoad()) {\n\t\t\tthis._observeTableEnd();\n\t\t}\n\t}\n\n\tonTableRendered(): void {\n\t\t// Focus the first row after growing, when the growing button is used\n\t\tif (this._shouldFocusRow) {\n\t\t\tthis._shouldFocusRow = false;\n\t\t\tlet focusRow = this._currentLastRow?.nextElementSibling as HTMLElement;\n\n\t\t\tif (this.hasGrowingComponent()) {\n\t\t\t\tfocusRow ||= this.getFocusDomRef() as HTMLElement;\n\t\t\t}\n\n\t\t\tfocusRow ||= this._table?.rows[0] as HTMLElement;\n\n\t\t\tfocusRow?.focus();\n\t\t}\n\n\t\tif (this.disabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._hasScrollToLoad()) {\n\t\t\tthis._observeTableEnd();\n\t\t}\n\t}\n\n\tonExitDOM(): void {\n\t\tthis._table = undefined;\n\t\tthis._observer?.disconnect();\n\t\tthis._observer = undefined;\n\t\tthis._currentLastRow = undefined;\n\t}\n\n\tonBeforeRendering(): void {\n\t\tthis._observer?.disconnect();\n\t\tthis._observer = undefined;\n\t\tthis._currentLastRow = undefined;\n\t\tthis._invalidateTable();\n\t}\n\n\thasGrowingComponent(): boolean {\n\t\tif (this._hasScrollToLoad()) {\n\t\t\treturn !(this._table && this._table._scrollContainer.scrollHeight > this._table._scrollContainer.clientHeight) ?? true;\n\t\t}\n\n\t\treturn this.type === TableGrowingMode.Button && !this.disabled;\n\t}\n\n\t/**\n\t * An event handler that can be used by the Table to notify the TableGrowing that\n\t * the Table is growing either by pressing the load more button or by scrolling to the end of the table.\n\t */\n\tloadMore(): void {\n\t\t// remembers the last row. only do this when the table has a growing component rendered.\n\t\tif (this._table && this.hasGrowingComponent()) {\n\t\t\tthis._currentLastRow = this._table.rows[this._table.rows.length - 1];\n\t\t}\n\t\tthis._shouldFocusRow = true;\n\n\t\tthis.fireEvent(\"load-more\");\n\t}\n\n\t_hasScrollToLoad() {\n\t\treturn this.type === TableGrowingMode.Scroll;\n\t}\n\n\t/**\n\t * Observes the end of the table.\n\t * @private\n\t */\n\t_observeTableEnd(): void {\n\t\tif (!this._table) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lastElement = this._table.shadowRoot?.querySelector(\"#table-end-row\");\n\t\tif (lastElement) {\n\t\t\tthis._getIntersectionObserver().observe(lastElement);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the IntersectionObserver instance. If it does not exist, it will be created.\n\t * The observer will call the loadMore function when the end of the table is reached.\n\t * @private\n\t */\n\t_getIntersectionObserver(): IntersectionObserver {\n\t\tif (!this._observer) {\n\t\t\tthis._observer = new IntersectionObserver(this._onIntersection.bind(this), {\n\t\t\t\troot: document,\n\t\t\t\trootMargin: \"10px\",\n\t\t\t\tthreshold: 1.0,\n\t\t\t});\n\t\t}\n\t\treturn this._observer;\n\t}\n\n\t_onIntersection(entries: Array<IntersectionObserverEntry>) {\n\t\tif (entries.some(entry => entry.isIntersecting)) {\n\t\t\tthis.loadMore();\n\t\t}\n\t}\n\n\t_invalidateTable() {\n\t\tif (!this._table) {\n\t\t\treturn;\n\t\t}\n\t\tthis._table._invalidate++;\n\t}\n\n\t/**\n\t * Handles the keydown event on the growing button.\n\t *\n\t * Calls the loadMore function when the Enter and Space keys are pressed.\n\t * @private\n\t */\n\t_onKeydown(e: KeyboardEvent) {\n\t\tif (isSpace(e)) {\n\t\t\te.preventDefault();\n\t\t\tthis._activeState = true;\n\t\t}\n\n\t\tif (isEnter(e)) {\n\t\t\tthis.loadMore();\n\t\t\tthis._activeState = true;\n\t\t}\n\t}\n\n\t_onKeyup(e: KeyboardEvent) {\n\t\tif (isSpace(e)) {\n\t\t\tthis.loadMore();\n\t\t}\n\t\tthis._activeState = false;\n\t}\n\n\t_onFocusout() {\n\t\tthis._activeState = false;\n\t}\n\n\tget _growingButtonText() {\n\t\treturn this.growingText || TableGrowing.i18nBundle.getText(TABLE_MORE);\n\t}\n\n\tget _growingButtonDescription() {\n\t\treturn TableGrowing.i18nBundle.getText(TABLE_MORE_DESCRIPTION);\n\t}\n\n\tget _hasGrowingButton() {\n\t\treturn this.hasGrowingComponent();\n\t}\n}\n\nTableGrowing.define();\n\nexport default TableGrowing;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}