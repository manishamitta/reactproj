{"ast":null,"code":"/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n//Provides the locale object sap.ui.core.Locale\nimport assert from \"../../base/assert.js\";\nimport BaseObject from \"../base/Object.js\";\nimport Localization from \"../../base/i18n/Localization.js\";\nimport LanguageTag from \"../../base/i18n/LanguageTag.js\";\nvar mCache = Object.create(null);\n\n/**\n * Creates an instance of the Locale.\n *\n * @class Locale represents a locale setting, consisting of a language, script, region, variants, extensions and private use section.\n *\n * @param {string} sLocale the locale identifier, in format en-US or en_US.\n *\n * @extends sap.ui.base.Object\n * @author SAP SE\n * @version 1.120.17\n * @public\n * @alias sap.ui.core.Locale\n */\nvar Locale = BaseObject.extend(\"sap.ui.core.Locale\", /** @lends sap.ui.core.Locale.prototype */{\n  constructor: function (vLocale) {\n    BaseObject.apply(this);\n    if (vLocale instanceof LanguageTag) {\n      this.oLanguageTag = vLocale;\n      this.sLocaleId = this.oLanguageTag.toString();\n    } else {\n      this.oLanguageTag = new LanguageTag(vLocale);\n      this.sLocaleId = vLocale;\n    }\n    Object.assign(this, this.oLanguageTag);\n    this.sLanguage = this.language;\n  },\n  /**\n   * Get the locale language.\n   *\n   * Note that the case might differ from the original script tag\n   * (Lower case is enforced as recommended by BCP47/ISO639).\n   *\n   * @returns {string} the language code\n   * @public\n   */\n  getLanguage: function () {\n    return this.language;\n  },\n  /**\n   * Get the locale script or <code>null</code> if none was specified.\n   *\n   * Note that the case might differ from the original language tag\n   * (Upper case first letter and lower case reminder enforced as\n   * recommended by BCP47/ISO15924)\n   *\n   * @returns {string|null} the script code or <code>null</code>\n   * @public\n   */\n  getScript: function () {\n    return this.script;\n  },\n  /**\n   * Get the locale region or <code>null</code> if none was specified.\n   *\n   * Note that the case might differ from the original script tag\n   * (Upper case is enforced as recommended by BCP47/ISO3166-1).\n   *\n   * @returns {string} the ISO3166-1 region code (2-letter or 3-digits)\n   * @public\n   */\n  getRegion: function () {\n    return this.region;\n  },\n  /**\n   * Get the locale variants as a single string or <code>null</code>.\n   *\n   * Multiple variants are separated by a dash '-'.\n   *\n   * @returns {string|null} the variant or <code>null</code>\n   * @public\n   */\n  getVariant: function () {\n    return this.variant;\n  },\n  /**\n   * Get the locale variants as an array of individual variants.\n   *\n   * The separating dashes are not part of the result.\n   * If there is no variant section in the locale tag, an empty array is returned.\n   *\n   * @returns {string[]} the individual variant sections\n   * @public\n   */\n  getVariantSubtags: function () {\n    return this.variantSubtags;\n  },\n  /**\n   * Get the locale extension as a single string or <code>null</code>.\n   *\n   * The extension always consists of a singleton character (not 'x'),\n   * a dash '-' and one or more extension token, each separated\n   * again with a dash.\n   *\n   * Use {@link #getExtensions} to get the individual extension tokens as an array.\n   *\n   * @returns {string|null} the extension or <code>null</code>\n   * @public\n   */\n  getExtension: function () {\n    return this.extension;\n  },\n  /**\n   * Get the locale extensions as an array of tokens.\n   *\n   * The leading singleton and the separating dashes are not part of the result.\n   * If there is no extensions section in the locale tag, an empty array is returned.\n   *\n   * @returns {string[]} the individual extension sections\n   * @public\n   */\n  getExtensionSubtags: function () {\n    return this.extensionSubtags;\n  },\n  /**\n   * Get the locale private use section or <code>null</code>.\n   *\n   * @returns {string} the private use section\n   * @public\n   */\n  getPrivateUse: function () {\n    return this.privateUse;\n  },\n  /**\n   * Get the locale private use section as an array of tokens.\n   *\n   * The leading singleton and the separating dashes are not part of the result.\n   * If there is no private use section in the locale tag, an empty array is returned.\n   *\n   * @returns {string[]} the tokens of the private use section\n   * @public\n   */\n  getPrivateUseSubtags: function () {\n    return this.privateUseSubtags;\n  },\n  /**\n   * Check if a subtag is provided\n   *\n   * @param {string} sSubtag The subtag to check\n   * @returns {boolean} Wether the subtag is provided or not\n   */\n  hasPrivateUseSubtag: function (sSubtag) {\n    assert(sSubtag && sSubtag.match(/^[0-9A-Z]{1,8}$/i), \"subtag must be a valid BCP47 private use tag\");\n    return this.privateUseSubtags.indexOf(sSubtag) >= 0;\n  },\n  toString: function () {\n    return this.oLanguageTag.toString();\n  },\n  /**\n   * Best guess to get a proper SAP Logon Language for this locale.\n   *\n   * Conversions taken into account:\n   * <ul>\n   * <li>use the language part only</li>\n   * <li>convert old ISO639 codes to newer ones (e.g. 'iw' to 'he')</li>\n   * <li>for Chinese, map 'Traditional Chinese' or region 'TW' to SAP proprietary code 'zf'</li>\n   * <li>map private extensions x-saptrc, x-sappsd and saprigi to SAP pseudo languages '1Q', '2Q' and '3Q'</li>\n   * <li>remove ext. language sub tags</li>\n   * <li>convert to uppercase</li>\n   * </ul>\n   *\n   * Note that the conversion also returns a result for languages that are not\n   * supported by the default set of SAP languages. This method has no knowledge\n   * about the concrete languages of any given backend system.\n   *\n   * @returns {string} a language code that should\n   * @public\n   * @since 1.17.0\n   * @deprecated As of 1.44, use {@link sap.ui.core.Configuration#getSAPLogonLanguage} instead\n   *   as that class allows to configure an SAP Logon language.\n   */\n  getSAPLogonLanguage: function () {\n    return Localization._getSAPLogonLanguage(this);\n  }\n});\nLocale._getCoreLocale = function (oLocale) {\n  if (oLocale instanceof LanguageTag) {\n    oLocale = mCache[oLocale.toString()] || new Locale(oLocale);\n    mCache[oLocale.toString()] = oLocale;\n  }\n  return oLocale;\n};\nexport default Locale;","map":{"version":3,"names":["assert","BaseObject","Localization","LanguageTag","mCache","Object","create","Locale","extend","constructor","vLocale","apply","oLanguageTag","sLocaleId","toString","assign","sLanguage","language","getLanguage","getScript","script","getRegion","region","getVariant","variant","getVariantSubtags","variantSubtags","getExtension","extension","getExtensionSubtags","extensionSubtags","getPrivateUse","privateUse","getPrivateUseSubtags","privateUseSubtags","hasPrivateUseSubtag","sSubtag","match","indexOf","getSAPLogonLanguage","_getSAPLogonLanguage","_getCoreLocale","oLocale"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-localization/dist/sap/ui/core/Locale.js"],"sourcesContent":["/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n//Provides the locale object sap.ui.core.Locale\nimport assert from \"../../base/assert.js\";\nimport BaseObject from \"../base/Object.js\";\nimport Localization from \"../../base/i18n/Localization.js\";\nimport LanguageTag from \"../../base/i18n/LanguageTag.js\";\nvar mCache = Object.create(null);\n\n/**\n * Creates an instance of the Locale.\n *\n * @class Locale represents a locale setting, consisting of a language, script, region, variants, extensions and private use section.\n *\n * @param {string} sLocale the locale identifier, in format en-US or en_US.\n *\n * @extends sap.ui.base.Object\n * @author SAP SE\n * @version 1.120.17\n * @public\n * @alias sap.ui.core.Locale\n */\nvar Locale = BaseObject.extend(\"sap.ui.core.Locale\", /** @lends sap.ui.core.Locale.prototype */{\n  constructor: function (vLocale) {\n    BaseObject.apply(this);\n    if (vLocale instanceof LanguageTag) {\n      this.oLanguageTag = vLocale;\n      this.sLocaleId = this.oLanguageTag.toString();\n    } else {\n      this.oLanguageTag = new LanguageTag(vLocale);\n      this.sLocaleId = vLocale;\n    }\n    Object.assign(this, this.oLanguageTag);\n    this.sLanguage = this.language;\n  },\n  /**\n   * Get the locale language.\n   *\n   * Note that the case might differ from the original script tag\n   * (Lower case is enforced as recommended by BCP47/ISO639).\n   *\n   * @returns {string} the language code\n   * @public\n   */\n  getLanguage: function () {\n    return this.language;\n  },\n  /**\n   * Get the locale script or <code>null</code> if none was specified.\n   *\n   * Note that the case might differ from the original language tag\n   * (Upper case first letter and lower case reminder enforced as\n   * recommended by BCP47/ISO15924)\n   *\n   * @returns {string|null} the script code or <code>null</code>\n   * @public\n   */\n  getScript: function () {\n    return this.script;\n  },\n  /**\n   * Get the locale region or <code>null</code> if none was specified.\n   *\n   * Note that the case might differ from the original script tag\n   * (Upper case is enforced as recommended by BCP47/ISO3166-1).\n   *\n   * @returns {string} the ISO3166-1 region code (2-letter or 3-digits)\n   * @public\n   */\n  getRegion: function () {\n    return this.region;\n  },\n  /**\n   * Get the locale variants as a single string or <code>null</code>.\n   *\n   * Multiple variants are separated by a dash '-'.\n   *\n   * @returns {string|null} the variant or <code>null</code>\n   * @public\n   */\n  getVariant: function () {\n    return this.variant;\n  },\n  /**\n   * Get the locale variants as an array of individual variants.\n   *\n   * The separating dashes are not part of the result.\n   * If there is no variant section in the locale tag, an empty array is returned.\n   *\n   * @returns {string[]} the individual variant sections\n   * @public\n   */\n  getVariantSubtags: function () {\n    return this.variantSubtags;\n  },\n  /**\n   * Get the locale extension as a single string or <code>null</code>.\n   *\n   * The extension always consists of a singleton character (not 'x'),\n   * a dash '-' and one or more extension token, each separated\n   * again with a dash.\n   *\n   * Use {@link #getExtensions} to get the individual extension tokens as an array.\n   *\n   * @returns {string|null} the extension or <code>null</code>\n   * @public\n   */\n  getExtension: function () {\n    return this.extension;\n  },\n  /**\n   * Get the locale extensions as an array of tokens.\n   *\n   * The leading singleton and the separating dashes are not part of the result.\n   * If there is no extensions section in the locale tag, an empty array is returned.\n   *\n   * @returns {string[]} the individual extension sections\n   * @public\n   */\n  getExtensionSubtags: function () {\n    return this.extensionSubtags;\n  },\n  /**\n   * Get the locale private use section or <code>null</code>.\n   *\n   * @returns {string} the private use section\n   * @public\n   */\n  getPrivateUse: function () {\n    return this.privateUse;\n  },\n  /**\n   * Get the locale private use section as an array of tokens.\n   *\n   * The leading singleton and the separating dashes are not part of the result.\n   * If there is no private use section in the locale tag, an empty array is returned.\n   *\n   * @returns {string[]} the tokens of the private use section\n   * @public\n   */\n  getPrivateUseSubtags: function () {\n    return this.privateUseSubtags;\n  },\n  /**\n   * Check if a subtag is provided\n   *\n   * @param {string} sSubtag The subtag to check\n   * @returns {boolean} Wether the subtag is provided or not\n   */\n  hasPrivateUseSubtag: function (sSubtag) {\n    assert(sSubtag && sSubtag.match(/^[0-9A-Z]{1,8}$/i), \"subtag must be a valid BCP47 private use tag\");\n    return this.privateUseSubtags.indexOf(sSubtag) >= 0;\n  },\n  toString: function () {\n    return this.oLanguageTag.toString();\n  },\n  /**\n   * Best guess to get a proper SAP Logon Language for this locale.\n   *\n   * Conversions taken into account:\n   * <ul>\n   * <li>use the language part only</li>\n   * <li>convert old ISO639 codes to newer ones (e.g. 'iw' to 'he')</li>\n   * <li>for Chinese, map 'Traditional Chinese' or region 'TW' to SAP proprietary code 'zf'</li>\n   * <li>map private extensions x-saptrc, x-sappsd and saprigi to SAP pseudo languages '1Q', '2Q' and '3Q'</li>\n   * <li>remove ext. language sub tags</li>\n   * <li>convert to uppercase</li>\n   * </ul>\n   *\n   * Note that the conversion also returns a result for languages that are not\n   * supported by the default set of SAP languages. This method has no knowledge\n   * about the concrete languages of any given backend system.\n   *\n   * @returns {string} a language code that should\n   * @public\n   * @since 1.17.0\n   * @deprecated As of 1.44, use {@link sap.ui.core.Configuration#getSAPLogonLanguage} instead\n   *   as that class allows to configure an SAP Logon language.\n   */\n  getSAPLogonLanguage: function () {\n    return Localization._getSAPLogonLanguage(this);\n  }\n});\nLocale._getCoreLocale = function (oLocale) {\n  if (oLocale instanceof LanguageTag) {\n    oLocale = mCache[oLocale.toString()] || new Locale(oLocale);\n    mCache[oLocale.toString()] = oLocale;\n  }\n  return oLocale;\n};\nexport default Locale;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,sBAAsB;AACzC,OAAOC,UAAU,MAAM,mBAAmB;AAC1C,OAAOC,YAAY,MAAM,iCAAiC;AAC1D,OAAOC,WAAW,MAAM,gCAAgC;AACxD,IAAIC,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,MAAM,GAAGN,UAAU,CAACO,MAAM,CAAC,oBAAoB,EAAE,0CAA0C;EAC7FC,WAAW,EAAE,SAAAA,CAAUC,OAAO,EAAE;IAC9BT,UAAU,CAACU,KAAK,CAAC,IAAI,CAAC;IACtB,IAAID,OAAO,YAAYP,WAAW,EAAE;MAClC,IAAI,CAACS,YAAY,GAAGF,OAAO;MAC3B,IAAI,CAACG,SAAS,GAAG,IAAI,CAACD,YAAY,CAACE,QAAQ,CAAC,CAAC;IAC/C,CAAC,MAAM;MACL,IAAI,CAACF,YAAY,GAAG,IAAIT,WAAW,CAACO,OAAO,CAAC;MAC5C,IAAI,CAACG,SAAS,GAAGH,OAAO;IAC1B;IACAL,MAAM,CAACU,MAAM,CAAC,IAAI,EAAE,IAAI,CAACH,YAAY,CAAC;IACtC,IAAI,CAACI,SAAS,GAAG,IAAI,CAACC,QAAQ;EAChC,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,EAAE,SAAAA,CAAA,EAAY;IACvB,OAAO,IAAI,CAACD,QAAQ;EACtB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,SAAS,EAAE,SAAAA,CAAA,EAAY;IACrB,OAAO,IAAI,CAACC,MAAM;EACpB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAE,SAAAA,CAAA,EAAY;IACrB,OAAO,IAAI,CAACC,MAAM;EACpB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,UAAU,EAAE,SAAAA,CAAA,EAAY;IACtB,OAAO,IAAI,CAACC,OAAO;EACrB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,iBAAiB,EAAE,SAAAA,CAAA,EAAY;IAC7B,OAAO,IAAI,CAACC,cAAc;EAC5B,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,YAAY,EAAE,SAAAA,CAAA,EAAY;IACxB,OAAO,IAAI,CAACC,SAAS;EACvB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,mBAAmB,EAAE,SAAAA,CAAA,EAAY;IAC/B,OAAO,IAAI,CAACC,gBAAgB;EAC9B,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEC,aAAa,EAAE,SAAAA,CAAA,EAAY;IACzB,OAAO,IAAI,CAACC,UAAU;EACxB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,oBAAoB,EAAE,SAAAA,CAAA,EAAY;IAChC,OAAO,IAAI,CAACC,iBAAiB;EAC/B,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEC,mBAAmB,EAAE,SAAAA,CAAUC,OAAO,EAAE;IACtCpC,MAAM,CAACoC,OAAO,IAAIA,OAAO,CAACC,KAAK,CAAC,kBAAkB,CAAC,EAAE,8CAA8C,CAAC;IACpG,OAAO,IAAI,CAACH,iBAAiB,CAACI,OAAO,CAACF,OAAO,CAAC,IAAI,CAAC;EACrD,CAAC;EACDtB,QAAQ,EAAE,SAAAA,CAAA,EAAY;IACpB,OAAO,IAAI,CAACF,YAAY,CAACE,QAAQ,CAAC,CAAC;EACrC,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEyB,mBAAmB,EAAE,SAAAA,CAAA,EAAY;IAC/B,OAAOrC,YAAY,CAACsC,oBAAoB,CAAC,IAAI,CAAC;EAChD;AACF,CAAC,CAAC;AACFjC,MAAM,CAACkC,cAAc,GAAG,UAAUC,OAAO,EAAE;EACzC,IAAIA,OAAO,YAAYvC,WAAW,EAAE;IAClCuC,OAAO,GAAGtC,MAAM,CAACsC,OAAO,CAAC5B,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAIP,MAAM,CAACmC,OAAO,CAAC;IAC3DtC,MAAM,CAACsC,OAAO,CAAC5B,QAAQ,CAAC,CAAC,CAAC,GAAG4B,OAAO;EACtC;EACA,OAAOA,OAAO;AAChB,CAAC;AACD,eAAenC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}