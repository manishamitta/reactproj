{"ast":null,"code":"/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\nimport Configuration from \"../Configuration.js\";\nimport TimezoneUtil from \"../format/TimezoneUtil.js\";\nvar aAllParts = [\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"fractionalSecond\"],\n  // \"2023\", \"2023-01\", \"2023-01-20\", \"+002023-01-20\" are parsed by JavaScript Date as UTC\n  // timestamps, whereas \"798\", \"2023-1\", \"2023-01-5\" are parsed as local dates.\n  // If \"Z\", \"GMT\" or a time zone offset (e.g. 00:00+0530) is included in the input string,\n  // the string is parsed as a UTC related timestamp\n  rIsUTCString = /Z|GMT|:.*[\\+|\\-]|^([\\+|\\-]\\d{2})?\\d{4}(-\\d{2}){0,2}$/,\n  aWeekday = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  aMonths = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n  mWeekdayToDay = {\n    Sun: 0,\n    Mon: 1,\n    Tue: 2,\n    Wed: 3,\n    Thu: 4,\n    Fri: 5,\n    Sat: 6\n  };\n\n/**\n * Pads the start of the absolute given value with zeros up to the given length. If the given\n * value is negative the leading minus is added in front of the zeros.\n *\n * @param {int} iValue The value to be padded\n * @param {int} iLength The minimal length of the resulting string excluding the minus sign\n * @returns {string} The padded string\n */\nfunction addLeadingZeros(iValue, iLength) {\n  return (iValue < 0 ? \"-\" : \"\") + Math.abs(iValue).toString().padStart(iLength, \"0\");\n}\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * DO NOT call the constructor for UI5Date directly; use <code>UI5Date.getInstance</code>.\n *\n * @param {object} vDateParts\n *   An array like object containing the arguments as passed to\n *   <code>UI5Date.getInstance</code>\n * @param {string} sTimezoneID\n *   The time zone ID to use for local methods of <code>Date</code>\n *\n * @alias module:sap/ui/core/date/UI5Date\n * @author SAP SE\n * @extends Date\n * @class A date implementation considering the configured time zone\n *\n *   A subclass of JavaScript <code>Date</code> that considers the configured time zone, see\n *   {@link sap.ui.core.Configuration#getTimezone}. All JavaScript <code>Date</code> functions\n *   that use the local browser time zone, like <code>getDate</code>,\n *   <code>setDate</code>, and <code>toString</code>, are overwritten and use the\n *   configured time zone to compute the values.\n *\n *   Use {@link module:sap/ui/core/date/UI5Date.getInstance} to create new date instances.\n *\n *   <b>Note:</b> Adjusting the time zone in a running application can lead to unexpected data\n *   inconsistencies. For more information, see {@link sap.ui.core.Configuration#setTimezone}.\n *\n * @hideconstructor\n * @public\n * @since 1.111.0\n * @version 1.120.17\n */\nfunction UI5Date(vDateParts, sTimezoneID) {\n  var oDateInstance = UI5Date._createDateInstance(vDateParts);\n  // mark internal properties not enumerable -> deepEqual handles this as a Date instance\n  Object.defineProperties(this, {\n    sTimezoneID: {\n      value: sTimezoneID\n    },\n    oDate: {\n      value: oDateInstance,\n      writable: true\n    },\n    oDateParts: {\n      value: undefined,\n      writable: true\n    }\n  });\n  if (isNaN(oDateInstance)) {\n    return;\n  }\n  if (vDateParts.length > 1 || vDateParts.length === 1 && typeof vDateParts[0] === \"string\" && !rIsUTCString.test(vDateParts[0])) {\n    this._setParts(aAllParts,\n    // JavaScript Date parsed the arguments already in local browser time zone\n    [oDateInstance.getFullYear(), oDateInstance.getMonth(), oDateInstance.getDate(), oDateInstance.getHours(), oDateInstance.getMinutes(), oDateInstance.getSeconds(), oDateInstance.getMilliseconds()]);\n  }\n}\nUI5Date.prototype = Object.create(Date.prototype, {\n  constructor: {\n    value: Date\n  }\n});\n// QUnit uses Object.prototype.toString.call and expects \"[object Date]\" for dates; UI5Date\n// shall be treated as a JavaScript Date so Symbol.toStringTag has to be \"Date\"\nUI5Date.prototype[Symbol.toStringTag] = \"Date\";\n\n/**\n * Returns the value for the requested date part (e.g. \"month\", \"year\", \"hour\") of this date\n * according to the configured time zone.\n *\n * @param {string} sPart The date part name\n * @returns {int} The value of the date part\n *\n * @private\n */\nUI5Date.prototype._getPart = function (sPart) {\n  var iResult;\n  if (isNaN(this.oDate)) {\n    return NaN;\n  }\n  this.oDateParts = this.oDateParts || TimezoneUtil._getParts(this.oDate, this.sTimezoneID);\n  if (sPart === \"weekday\") {\n    return mWeekdayToDay[this.oDateParts.weekday];\n  }\n  iResult = parseInt(this.oDateParts[sPart]);\n  if (sPart === \"month\") {\n    iResult -= 1;\n  } else if (sPart === \"year\") {\n    if (this.oDateParts.era === \"B\") {\n      iResult = 1 - iResult;\n    }\n  }\n  return iResult;\n};\n\n/**\n * Updates this date instance by setting the given parts in the configured time zone.\n *\n * @param {string[]} aParts\n *   The names of the date parts to be updated, supported names are: \"year\", \"month\", \"day\",\n *   \"hour\", \"minute\", \"second\", \"fractionalSecond\"\n * @param {object} aValues\n *   The arguments object of the local setters\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be created\n *\n * @private\n */\nUI5Date.prototype._setParts = function (aParts, aValues) {\n  var i,\n    oCurrentDateParts,\n    oNewDateAsUTCTimestamp,\n    iNewTimestamp,\n    sPart,\n    vValue,\n    oDateParts = {},\n    iMaxLength = Math.min(aParts.length, aValues.length);\n  if (iMaxLength === 0) {\n    return this.setTime(NaN);\n  }\n  for (i = 0; i < iMaxLength; i += 1) {\n    // convert the value to number as JavaScript Date does it;\n    // +\"\" -> 0, +null -> 0, +undefined -> NaN, +\"foo\" -> NaN, +\"4\" -> 4\n    vValue = parseInt(+aValues[i]);\n    sPart = aParts[i];\n    if (isNaN(vValue)) {\n      return this.setTime(NaN);\n    }\n    if (sPart === \"month\") {\n      vValue += 1;\n    } else if (sPart === \"year\") {\n      if (vValue <= 0) {\n        vValue = 1 - vValue;\n        oDateParts.era = \"B\";\n      } else {\n        oDateParts.era = \"A\";\n      }\n    }\n    oDateParts[sPart] = vValue.toString();\n  }\n  if (this.oDateParts) {\n    oCurrentDateParts = this.oDateParts;\n  } else if (isNaN(this.oDate)) {\n    //era and year are given at least\n    oCurrentDateParts = {\n      day: \"1\",\n      fractionalSecond: \"0\",\n      hour: \"0\",\n      minute: \"0\",\n      month: \"1\",\n      second: \"0\"\n    };\n  } else {\n    oCurrentDateParts = TimezoneUtil._getParts(this.oDate, this.sTimezoneID);\n  }\n  oDateParts = Object.assign({}, oCurrentDateParts, oDateParts);\n\n  // NaN may happen if no year is given if current date is invalid\n  oNewDateAsUTCTimestamp = TimezoneUtil._getDateFromParts(oDateParts);\n  if (isNaN(oNewDateAsUTCTimestamp)) {\n    return this.setTime(NaN);\n  }\n  iNewTimestamp = oNewDateAsUTCTimestamp.getTime() + TimezoneUtil.calculateOffset(oNewDateAsUTCTimestamp, this.sTimezoneID) * 1000;\n  return this.setTime(iNewTimestamp);\n};\n\n/**\n * Clones this UI5Date instance.\n *\n * @returns {Date|module:sap/ui/core/date/UI5Date} The cloned date instance\n *\n * @private\n */\nUI5Date.prototype.clone = function () {\n  return UI5Date.getInstance(this);\n};\n\n/**\n * Returns the day of the month of this date instance according to the configured time zone,\n * see <code>Date.prototype.getDate</code>.\n *\n * @returns {int}\n *   A number between 1 and 31 representing the day of the month of this date instance according\n *   to the configured time zone\n *\n * @public\n */\nUI5Date.prototype.getDate = function () {\n  return this._getPart(\"day\");\n};\n\n/**\n * Returns the day of the week of this date instance according to the configured time zone,\n * see <code>Date.prototype.getDay</code>.\n *\n * @returns {int}\n *   A number between 0 (Sunday) and 6 (Saturday) representing the day of the week of this date\n *   instance according to the configured time zone\n *\n * @public\n */\nUI5Date.prototype.getDay = function () {\n  return this._getPart(\"weekday\");\n};\n\n/**\n * Returns the year of this date instance according to the configured time zone,\n * see <code>Date.prototype.getFullYear</code>.\n *\n * @returns {int} The year of this date instance according to the configured time zone\n *\n * @public\n */\nUI5Date.prototype.getFullYear = function () {\n  return this._getPart(\"year\");\n};\n\n/**\n * Returns the hours of this date instance according to the configured time zone, see\n * <code>Date.prototype.getHours</code>.\n *\n * @returns {int}\n *   A number between 0 and 23 representing the hours of this date instance according to the\n *   configured time zone\n *\n * @public\n */\nUI5Date.prototype.getHours = function () {\n  return this._getPart(\"hour\");\n};\n\n/**\n * Returns the milliseconds of this date instance according to the configured time zone,\n * see <code>Date.prototype.getMilliseconds</code>.\n *\n * @returns {int}\n *   A number between 0 and 999 representing the milliseconds of this date instance according to\n *   the configured time zone\n *\n * @public\n */\nUI5Date.prototype.getMilliseconds = function () {\n  return this._getPart(\"fractionalSecond\");\n};\n\n/**\n * Returns the minutes of this date instance according to the configured time zone,\n * see <code>Date.prototype.getMinutes</code>.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the minutes of this date instance according to the\n *   configured time zone\n *\n * @public\n */\nUI5Date.prototype.getMinutes = function () {\n  return this._getPart(\"minute\");\n};\n\n/**\n * Returns the month index of this date instance according to the configured time zone,\n * see <code>Date.prototype.getMonth</code>.\n *\n * @returns {int}\n *   The month index between 0 (January) and 11 (December) of this date instance according to\n *   the configured time zone\n *\n * @public\n */\nUI5Date.prototype.getMonth = function () {\n  return this._getPart(\"month\");\n};\n\n/**\n * Returns the seconds of this date instance according to the configured time zone,\n * see <code>Date.prototype.getSeconds</code>.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the seconds of this date instance according to the\n *   configured time zone\n *\n * @public\n */\nUI5Date.prototype.getSeconds = function () {\n  return this._getPart(\"second\");\n};\n\n/**\n * Returns the difference in minutes between the UTC and the configured time zone for this date,\n * see <code>Date.prototype.getTimezoneOffset</code>.\n *\n * @returns {int}\n *   The difference in minutes between the UTC and the configured time zone for this date\n *\n * @public\n */\nUI5Date.prototype.getTimezoneOffset = function () {\n  return TimezoneUtil.calculateOffset(this.oDate, this.sTimezoneID) / 60;\n};\n\n/**\n * Returns the year of this date instance minus 1900 according to the configured time zone,\n * see <code>Date.prototype.getYear</code>.\n *\n * @returns {int}\n *   The year of this date instance minus 1900 according to the configured time zone\n *\n * @deprecated As of version 1.111 as it is deprecated in the base class JavaScript Date; use\n *   {@link #getFullYear} instead\n * @public\n */\nUI5Date.prototype.getYear = function () {\n  return this._getPart(\"year\") - 1900;\n};\n\n/**\n * Sets the day of the month for this date instance considering the configured time zone,\n * see <code>Date.prototype.setDate</code>.\n *\n * @param {int} iDay\n *   An integer representing the new day value, see <code>Date.prototype.setDate</code>\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setDate = function (iDay) {\n  return this._setParts([\"day\"], arguments);\n};\n\n/**\n * Sets the year, month and day for this date instance considering the configured time zone,\n * see <code>Date.prototype.setFullYear</code>.\n *\n * @param {int} iYear An integer representing the new year value\n * @param {int} [iMonth] An integer representing the new month index\n * @param {int} [iDay] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setFullYear = function (iYear, iMonth, iDay) {\n  return this._setParts([\"year\", \"month\", \"day\"], arguments);\n};\n\n/**\n * Sets the hours, minutes, seconds and milliseconds for this date instance considering the\n * configured time zone, see <code>Date.prototype.setHours</code>.\n *\n * @param {int} iHours An integer representing the new hour value\n * @param {int} [iMinutes] An integer representing the new minutes value\n * @param {int} [iSeconds] An integer representing the new seconds value\n * @param {int} [iMilliseconds] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setHours = function (iHours, iMinutes, iSeconds, iMilliseconds) {\n  return this._setParts([\"hour\", \"minute\", \"second\", \"fractionalSecond\"], arguments);\n};\n\n/**\n * Sets the milliseconds for this date instance considering the configured time zone, see\n * <code>Date.prototype.setMilliseconds</code>.\n *\n * @param {int} iMilliseconds An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setMilliseconds = function (iMilliseconds) {\n  return this._setParts([\"fractionalSecond\"], arguments);\n};\n\n/**\n * Sets the minutes, seconds and milliseconds for this date instance considering the configured\n * time zone, see <code>Date.prototype.setMinutes</code>.\n *\n * @param {int} iMinutes An integer representing the new minutes value\n * @param {int} [iSeconds] An integer representing the new seconds value\n * @param {int} [iMilliseconds] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setMinutes = function (iMinutes, iSeconds, iMilliseconds) {\n  return this._setParts([\"minute\", \"second\", \"fractionalSecond\"], arguments);\n};\n\n/**\n * Sets the month and day for this date instance considering the configured time zone,\n * see <code>Date.prototype.setMonth</code>.\n *\n * @param {int} iMonth An integer representing the new month index\n * @param {int} [iDay] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setMonth = function (iMonth, iDay) {\n  return this._setParts([\"month\", \"day\"], arguments);\n};\n\n/**\n * Sets the seconds and milliseconds for this date instance considering the configured time zone,\n * see <code>Date.prototype.setSeconds</code>.\n *\n * @param {int} iSeconds An integer representing the new seconds value\n * @param {int} [iMilliseconds] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setSeconds = function (iSeconds, iMilliseconds) {\n  return this._setParts([\"second\", \"fractionalSecond\"], arguments);\n};\n\n/**\n * Sets this date object to the given time represented by a number of milliseconds based on the\n * UNIX epoch and resets the previously set date parts, see\n * <code>Date.prototype.setTime</code>.\n *\n * @param {int} iTime The date time in milliseconds based in the UNIX epoch\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setTime = function (iTime) {\n  this.oDateParts = undefined;\n  return this.oDate.setTime(iTime);\n};\n\n/**\n * Sets the year for this date instance plus 1900 considering the configured time zone, see\n * <code>Date.prototype.setYear</code>.\n *\n * @param {int} iYear The year which is to be set for this date. If iYear is a number between 0\n *   and 99 (inclusive), then the year for this date is set to 1900 + iYear. Otherwise, the year\n *   for this date is set to iYear.\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @deprecated As of version 1.111 as it is deprecated in the base class JavaScript Date; use\n *   {@link #setFullYear} instead\n * @public\n */\nUI5Date.prototype.setYear = function (iYear) {\n  var iValue = parseInt(iYear);\n  iValue = iValue < 0 || iValue > 99 ? iValue : iValue + 1900;\n  return this._setParts([\"year\"], [iValue]);\n};\n\n/**\n * Returns this date object to the given time represented by a number of milliseconds based on the\n * UNIX epoch, see <code>Date.prototype.getTime</code>.\n *\n * @returns {int}\n *   The timestamp in milliseconds of this date based on the UNIX epoch, or <code>NaN</code> if\n *   the date is an invalid date\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getTime\n * @public\n */\n\n/**\n * Returns the day of the month of this date instance according to universal time,\n * see <code>Date.prototype.getUTCDate</code>.\n *\n * @returns {int}\n *   A number between 1 and 31 representing the day of the month of this date instance according\n *   to universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCDate\n * @public\n */\n\n/**\n *\n * Returns the day of the week of this date instance according to universal time,\n * see <code>Date.prototype.getUTCDay</code>.\n *\n * @returns {int}\n *   A number between 0 (Sunday) and 6 (Saturday) representing the day of the week of this date\n *   instance according to universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCDay\n * @public\n */\n\n/**\n * Returns the year of this date instance according to universal time, see\n * <code>Date.prototype.getUTCFullYear</code>.\n *\n * @returns {int} The year of this date instance according to universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCFullYear\n * @public\n */\n\n/**\n * Returns the hours of this date instance according to universal time, see\n * <code>Date.prototype.getUTCHours</code>.\n *\n * @returns {int}\n *   A number between 0 and 23 representing the hours of this date instance according to\n *   universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCHours\n * @public\n */\n\n/**\n * Returns the milliseconds of this date instance according to universal time,\n * see <code>Date.prototype.getUTCMilliseconds</code>.\n *\n * @returns {int}\n *   A number between 0 and 999 representing the milliseconds of this date instance according to\n *   universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCMilliseconds\n * @public\n */\n\n/**\n * Returns the minutes of this date instance according to universal time, see\n * <code>Date.prototype.getUTCMinutes</code>.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the minutes of this date instance according to\n *   universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCMinutes\n * @public\n */\n\n/**\n * Returns the month index of this date instance according to universal time, see\n * <code>Date.prototype.getUTCMonth</code>.\n *\n * @returns {int}\n *   The month index between 0 (January) and 11 (December) of this date instance according to\n *   universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCMonth\n * @public\n */\n\n/**\n * Returns the seconds of this date instance according to universal time, see\n * <code>Date.prototype.getUTCSeconds</code>.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the seconds of this date instance according to\n *   universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCSeconds\n * @public\n */\n\n/**\n * Sets the day of the month for this date instance according to universal time,\n * see <code>Date.prototype.setUTCDate</code>.\n *\n * @param {int} iDay\n *   An integer representing the new day value, see <code>Date.prototype.setUTCDate</code>\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCDate\n * @public\n */\n\n/**\n * Sets the year, month and day for this date instance according to universal time,\n * see <code>Date.prototype.setUTCFullYear</code>.\n *\n * @param {int} iYear An integer representing the new year value\n * @param {int} [iMonth] An integer representing the new month index\n * @param {int} [iDay] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCFullYear\n * @public\n */\n\n/**\n * Sets the hours, minutes, seconds and milliseconds for this date instance according to\n * universal time, see <code>Date.prototype.setUTCHours</code>.\n *\n * @param {int} iHours An integer representing the new hour value\n * @param {int} [iMinutes] An integer representing the new minutes value\n * @param {int} [iSeconds] An integer representing the new seconds value\n * @param {int} [iMilliseconds] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCHours\n * @public\n */\n\n/**\n * Sets the milliseconds for this date instance according to universal time, see\n * <code>Date.prototype.setUTCMilliseconds</code>.\n *\n * @param {int} iMilliseconds An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCMilliseconds\n * @public\n */\n\n/**\n * Sets the minutes, seconds and milliseconds for this date instance according to universal\n * time, see <code>Date.prototype.setUTCMinutes</code>.\n *\n * @param {int} iMinutes An integer representing the new minutes value\n * @param {int} [iSeconds] An integer representing the new seconds value\n * @param {int} [iMilliseconds] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCMinutes\n * @public\n */\n\n/**\n * Sets the month and day for this date instance according to universal time,\n * see <code>Date.prototype.setUTCMonth</code>.\n *\n * @param {int} iMonth An integer representing the new month index\n * @param {int} [iDay] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCMonth\n * @public\n */\n\n/**\n * Sets the seconds and milliseconds for this date instance  according to universal time,\n * see <code>Date.prototype.setUTCSeconds</code>.\n *\n * @param {int} iSeconds An integer representing the new seconds value\n * @param {int} [iMilliseconds] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCSeconds\n * @public\n */\n\n/**\n * Converts this date to a string, interpreting it in the UTC time zone, see\n * <code>Date.prototype.toGMTString</code>.\n *\n * @returns {string} The converted date as string in the UTC time zone\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toGMTString\n * @public\n */\n\n/**\n * Converts this date to a string in ISO format in the UTC offset zero time zone, as denoted\n * by the suffix <code>Z</code>, see <code>Date.prototype.toISOString</code>.\n *\n * @returns {string}\n *   The converted date as a string in ISO format, in the UTC offset zero time zone\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toISOString\n * @public\n */\n\n/**\n * Returns a string representation of this date object, see <code>Date.prototype.toJSON</code>.\n *\n * @returns {string} The date object representation as a string\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toJSON\n * @public\n */\n\n/**\n * Returns the date portion of this date object interpreted in the configured time zone in\n * English, see <code>Date.prototype.toDateString</code>.\n *\n * @returns {string}\n *   The date portion of this date object interpreted in the configured time zone in English\n *\n * @public\n */\nUI5Date.prototype.toDateString = function () {\n  if (isNaN(this.oDate)) {\n    return this.oDate.toDateString();\n  }\n  return aWeekday[this.getDay()] + \" \" + aMonths[this.getMonth()] + \" \" + addLeadingZeros(this.getDate(), 2) + \" \" + addLeadingZeros(this.getFullYear(), 4);\n};\n\n/**\n * Returns a string with a language-dependent representation of the date part of this date\n * object interpreted by default in the configured time zone, see\n * <code>Date.prototype.toLocaleDateString</code>.\n *\n * @param {string} [sLocale=sap.ui.core.Configuration.getLanguageTag()]\n *   The locale used for formatting; the configured locale by default\n * @param {object} [oOptions]\n *   The options object used for formatting, corresponding to the options parameter of the\n *   <code>Intl.DateTimeFormat</code> constructor\n * @param {string} [oOptions.timeZone=sap.ui.core.Configuration.getTimezone()]\n *   The IANA time zone ID; the configured time zone by default\n * @returns {string}\n *   The language-dependent representation of the date part of this date object\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toLocaleDateString\n * @public\n */\n\n/**\n * Returns a string with a language-dependent representation of this date object interpreted by\n * default in the configured time zone, see <code>Date.prototype.toLocaleString</code>.\n *\n * @param {string} [sLocale=sap.ui.core.Configuration.getLanguageTag()]\n *   The locale used for formatting; the configured locale by default\n * @param {object} [oOptions]\n *   The options object used for formatting, corresponding to the options parameter of the\n *   <code>Intl.DateTimeFormat</code> constructor\n * @param {string} [oOptions.timeZone=sap.ui.core.Configuration.getTimezone()]\n *   The IANA time zone ID; the configured time zone by default\n * @returns {string}\n *   The language-dependent representation of this date object\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toLocaleString\n * @public\n */\n\n/**\n * Returns a string with a language-dependent representation of the time part of this date\n * object interpreted by default in the configured time zone, see\n * <code>Date.prototype.toLocaleTimeString</code>.\n *\n * @param {string} [sLocale=sap.ui.core.Configuration.getLanguageTag()]\n *   The locale used for formatting; the configured locale by default\n * @param {object} [oOptions]\n *   The options object used for formatting, corresponding to the options parameter of the\n *   <code>Intl.DateTimeFormat</code> constructor\n * @param {string} [oOptions.timeZone=sap.ui.core.Configuration.getTimezone()]\n *   The IANA time zone ID; the configured time zone by default\n * @returns {string}\n *   The language-dependent representation of the time part of this date object\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toLocaleTimeString\n * @public\n */\n\n/**\n * Returns a string representing this date object interpreted in the configured time zone.\n *\n * @returns {string}\n *   A string representing this date object interpreted in the configured time zone\n *\n * @public\n */\nUI5Date.prototype.toString = function () {\n  if (isNaN(this.oDate)) {\n    return this.oDate.toString();\n  }\n  return this.toDateString() + \" \" + this.toTimeString();\n};\n\n/**\n * Returns the time portion of this date object interpreted in the configured time zone in English.\n *\n * @returns {string}\n *   The time portion of this date object interpreted in the configured time zone in English\n *\n * @public\n */\nUI5Date.prototype.toTimeString = function () {\n  var iHours, iMinutes, sSign, iTimeZoneOffset;\n  if (isNaN(this.oDate)) {\n    return this.oDate.toTimeString();\n  }\n  iTimeZoneOffset = this.getTimezoneOffset();\n  sSign = iTimeZoneOffset > 0 ? \"-\" : \"+\";\n  iHours = Math.floor(Math.abs(iTimeZoneOffset) / 60);\n  iMinutes = Math.abs(iTimeZoneOffset) % 60;\n\n  // ommit the optional, implementation dependent time zone name\n  return addLeadingZeros(this.getHours(), 2) + \":\" + addLeadingZeros(this.getMinutes(), 2) + \":\" + addLeadingZeros(this.getSeconds(), 2) + \" GMT\" + sSign + addLeadingZeros(iHours, 2) + addLeadingZeros(iMinutes, 2);\n};\n\n/**\n * Converts this date to a string, interpreting it in the UTC time zone, see\n * <code>Date.prototype.toUTCString</code>.\n *\n * @returns {string} The converted date as a string in the UTC time zone\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toUTCString\n * @public\n */\n\n/**\n * Returns the value of this date object in milliseconds based on the UNIX epoch, see\n * <code>Date.prototype.valueOf</code>.\n *\n * @returns {int} The primitive value of this date object in milliseconds based on the UNIX epoch\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.valueOf\n * @public\n */\n\n// functions that simply delegate to the inner date instance\n[\"getTime\", \"getUTCDate\", \"getUTCDay\", \"getUTCFullYear\", \"getUTCHours\", \"getUTCMilliseconds\", \"getUTCMinutes\", \"getUTCMonth\", \"getUTCSeconds\", \"toGMTString\", \"toISOString\", \"toJSON\", \"toUTCString\", \"valueOf\"].forEach(function (sMethod) {\n  UI5Date.prototype[sMethod] = function () {\n    return this.oDate[sMethod].apply(this.oDate, arguments);\n  };\n});\n[\"toLocaleDateString\", \"toLocaleString\", \"toLocaleTimeString\"].forEach(function (sMethod) {\n  UI5Date.prototype[sMethod] = function (sLocale, oOptions) {\n    return this.oDate[sMethod](sLocale || Configuration.getLanguageTag(), Object.assign({\n      timeZone: this.sTimezoneID\n    }, oOptions));\n  };\n});\n\n// before delegating to the inner date instance clear the cached date parts\n[\"setUTCDate\", \"setUTCFullYear\", \"setUTCHours\", \"setUTCMilliseconds\", \"setUTCMinutes\", \"setUTCMonth\", \"setUTCSeconds\"].forEach(function (sMethod) {\n  UI5Date.prototype[sMethod] = function () {\n    this.oDateParts = undefined;\n    return this.oDate[sMethod].apply(this.oDate, arguments);\n  };\n});\n\n/**\n * Creates a JavaScript Date instance.\n *\n * @param {object} vParts\n *   The <code>arguments</code> object which is given to\n *   <code>module:sap/ui/core/date/UI5Date.getInstance</code>\n * @returns {Date}\n *   A JavaScript Date instance\n *\n * @private\n */\nUI5Date._createDateInstance = function (vParts) {\n  if (vParts[0] instanceof Date) {\n    vParts[0] = vParts[0].valueOf();\n  }\n\n  // ES5 variant of new Date(...vParts)\n  return new (Function.prototype.bind.apply(Date, [].concat.apply([null], vParts)))();\n};\n\n/**\n * Creates a date instance (either JavaScript Date or <code>UI5Date</code>) which considers the\n * configured time zone wherever JavaScript Date uses the local browser time zone, for example\n * in <code>getDate</code>, <code>toString</code>, or <code>setHours</code>. The supported\n * parameters are the same as the ones supported by the JavaScript Date constructor.\n *\n * <b>Note:</b> Adjusting the time zone in a running application can lead to unexpected data\n * inconsistencies. For more information, see {@link sap.ui.core.Configuration#setTimezone}.\n *\n * @param {int|string|Date|module:sap/ui/core/date/UI5Date|null} [vYearOrValue]\n *   Same meaning as in the JavaScript Date constructor\n * @param {int|string} [vMonthIndex]\n *   Same meaning as in the JavaScript Date constructor\n * @param {int|string} [vDay=1] Same meaning as in the JavaScript Date constructor\n * @param {int|string} [vHours=0] Same meaning as in the JavaScript Date constructor\n * @param {int|string} [vMinutes=0] Same meaning as in the JavaScript Date constructor\n * @param {int|string} [vSeconds=0] Same meaning as in the JavaScript Date constructor\n * @param {int|string} [vMilliseconds=0] Same meaning as in the JavaScript Date constructor\n * @returns {Date|module:sap/ui/core/date/UI5Date}\n *   The date instance that considers the configured time zone in all local getters and setters.\n *\n * @public\n * @see sap.ui.core.Configuration#getTimezone\n */\nUI5Date.getInstance = function () {\n  var sTimezone = Configuration.getTimezone();\n  if (sTimezone !== TimezoneUtil.getLocalTimezone()) {\n    return new UI5Date(arguments, sTimezone);\n  }\n  // time zones are equal -> use JavaScript Date as it is\n  return UI5Date._createDateInstance(arguments);\n};\n\n/**\n * Checks whether the given date object is a valid date, considers the configured time zone\n * and throws an error otherwise.\n *\n * @param {Date|module:sap/ui/core/date/UI5Date} oDate\n *   The date object created via <code>UI5Date.getInstance</code>\n * @throws {Error}\n *   If the given date object is not valid or does not consider the configured time zone\n *\n * @private\n */\nUI5Date.checkDate = function (oDate) {\n  if (isNaN(oDate.getTime())) {\n    throw new Error(\"The given Date is not valid\");\n  }\n  if (!(oDate instanceof UI5Date) && Configuration.getTimezone() !== TimezoneUtil.getLocalTimezone()) {\n    throw new Error(\"Configured time zone requires the parameter 'oDate' to be an instance of\" + \" sap.ui.core.date.UI5Date\");\n  }\n};\nexport default UI5Date;","map":{"version":3,"names":["Configuration","TimezoneUtil","aAllParts","rIsUTCString","aWeekday","aMonths","mWeekdayToDay","Sun","Mon","Tue","Wed","Thu","Fri","Sat","addLeadingZeros","iValue","iLength","Math","abs","toString","padStart","UI5Date","vDateParts","sTimezoneID","oDateInstance","_createDateInstance","Object","defineProperties","value","oDate","writable","oDateParts","undefined","isNaN","length","test","_setParts","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","prototype","create","Date","constructor","Symbol","toStringTag","_getPart","sPart","iResult","NaN","_getParts","weekday","parseInt","era","aParts","aValues","i","oCurrentDateParts","oNewDateAsUTCTimestamp","iNewTimestamp","vValue","iMaxLength","min","setTime","day","fractionalSecond","hour","minute","month","second","assign","_getDateFromParts","getTime","calculateOffset","clone","getInstance","getDay","getTimezoneOffset","getYear","setDate","iDay","arguments","setFullYear","iYear","iMonth","setHours","iHours","iMinutes","iSeconds","iMilliseconds","setMilliseconds","setMinutes","setMonth","setSeconds","iTime","setYear","toDateString","toTimeString","sSign","iTimeZoneOffset","floor","forEach","sMethod","apply","sLocale","oOptions","getLanguageTag","timeZone","vParts","valueOf","Function","bind","concat","sTimezone","getTimezone","getLocalTimezone","checkDate","Error"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-localization/dist/sap/ui/core/date/UI5Date.js"],"sourcesContent":["/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\nimport Configuration from \"../Configuration.js\";\nimport TimezoneUtil from \"../format/TimezoneUtil.js\";\nvar aAllParts = [\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"fractionalSecond\"],\n  // \"2023\", \"2023-01\", \"2023-01-20\", \"+002023-01-20\" are parsed by JavaScript Date as UTC\n  // timestamps, whereas \"798\", \"2023-1\", \"2023-01-5\" are parsed as local dates.\n  // If \"Z\", \"GMT\" or a time zone offset (e.g. 00:00+0530) is included in the input string,\n  // the string is parsed as a UTC related timestamp\n  rIsUTCString = /Z|GMT|:.*[\\+|\\-]|^([\\+|\\-]\\d{2})?\\d{4}(-\\d{2}){0,2}$/,\n  aWeekday = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  aMonths = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n  mWeekdayToDay = {\n    Sun: 0,\n    Mon: 1,\n    Tue: 2,\n    Wed: 3,\n    Thu: 4,\n    Fri: 5,\n    Sat: 6\n  };\n\n/**\n * Pads the start of the absolute given value with zeros up to the given length. If the given\n * value is negative the leading minus is added in front of the zeros.\n *\n * @param {int} iValue The value to be padded\n * @param {int} iLength The minimal length of the resulting string excluding the minus sign\n * @returns {string} The padded string\n */\nfunction addLeadingZeros(iValue, iLength) {\n  return (iValue < 0 ? \"-\" : \"\") + Math.abs(iValue).toString().padStart(iLength, \"0\");\n}\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * DO NOT call the constructor for UI5Date directly; use <code>UI5Date.getInstance</code>.\n *\n * @param {object} vDateParts\n *   An array like object containing the arguments as passed to\n *   <code>UI5Date.getInstance</code>\n * @param {string} sTimezoneID\n *   The time zone ID to use for local methods of <code>Date</code>\n *\n * @alias module:sap/ui/core/date/UI5Date\n * @author SAP SE\n * @extends Date\n * @class A date implementation considering the configured time zone\n *\n *   A subclass of JavaScript <code>Date</code> that considers the configured time zone, see\n *   {@link sap.ui.core.Configuration#getTimezone}. All JavaScript <code>Date</code> functions\n *   that use the local browser time zone, like <code>getDate</code>,\n *   <code>setDate</code>, and <code>toString</code>, are overwritten and use the\n *   configured time zone to compute the values.\n *\n *   Use {@link module:sap/ui/core/date/UI5Date.getInstance} to create new date instances.\n *\n *   <b>Note:</b> Adjusting the time zone in a running application can lead to unexpected data\n *   inconsistencies. For more information, see {@link sap.ui.core.Configuration#setTimezone}.\n *\n * @hideconstructor\n * @public\n * @since 1.111.0\n * @version 1.120.17\n */\nfunction UI5Date(vDateParts, sTimezoneID) {\n  var oDateInstance = UI5Date._createDateInstance(vDateParts);\n  // mark internal properties not enumerable -> deepEqual handles this as a Date instance\n  Object.defineProperties(this, {\n    sTimezoneID: {\n      value: sTimezoneID\n    },\n    oDate: {\n      value: oDateInstance,\n      writable: true\n    },\n    oDateParts: {\n      value: undefined,\n      writable: true\n    }\n  });\n  if (isNaN(oDateInstance)) {\n    return;\n  }\n  if (vDateParts.length > 1 || vDateParts.length === 1 && typeof vDateParts[0] === \"string\" && !rIsUTCString.test(vDateParts[0])) {\n    this._setParts(aAllParts,\n    // JavaScript Date parsed the arguments already in local browser time zone\n    [oDateInstance.getFullYear(), oDateInstance.getMonth(), oDateInstance.getDate(), oDateInstance.getHours(), oDateInstance.getMinutes(), oDateInstance.getSeconds(), oDateInstance.getMilliseconds()]);\n  }\n}\nUI5Date.prototype = Object.create(Date.prototype, {\n  constructor: {\n    value: Date\n  }\n});\n// QUnit uses Object.prototype.toString.call and expects \"[object Date]\" for dates; UI5Date\n// shall be treated as a JavaScript Date so Symbol.toStringTag has to be \"Date\"\nUI5Date.prototype[Symbol.toStringTag] = \"Date\";\n\n/**\n * Returns the value for the requested date part (e.g. \"month\", \"year\", \"hour\") of this date\n * according to the configured time zone.\n *\n * @param {string} sPart The date part name\n * @returns {int} The value of the date part\n *\n * @private\n */\nUI5Date.prototype._getPart = function (sPart) {\n  var iResult;\n  if (isNaN(this.oDate)) {\n    return NaN;\n  }\n  this.oDateParts = this.oDateParts || TimezoneUtil._getParts(this.oDate, this.sTimezoneID);\n  if (sPart === \"weekday\") {\n    return mWeekdayToDay[this.oDateParts.weekday];\n  }\n  iResult = parseInt(this.oDateParts[sPart]);\n  if (sPart === \"month\") {\n    iResult -= 1;\n  } else if (sPart === \"year\") {\n    if (this.oDateParts.era === \"B\") {\n      iResult = 1 - iResult;\n    }\n  }\n  return iResult;\n};\n\n/**\n * Updates this date instance by setting the given parts in the configured time zone.\n *\n * @param {string[]} aParts\n *   The names of the date parts to be updated, supported names are: \"year\", \"month\", \"day\",\n *   \"hour\", \"minute\", \"second\", \"fractionalSecond\"\n * @param {object} aValues\n *   The arguments object of the local setters\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be created\n *\n * @private\n */\nUI5Date.prototype._setParts = function (aParts, aValues) {\n  var i,\n    oCurrentDateParts,\n    oNewDateAsUTCTimestamp,\n    iNewTimestamp,\n    sPart,\n    vValue,\n    oDateParts = {},\n    iMaxLength = Math.min(aParts.length, aValues.length);\n  if (iMaxLength === 0) {\n    return this.setTime(NaN);\n  }\n  for (i = 0; i < iMaxLength; i += 1) {\n    // convert the value to number as JavaScript Date does it;\n    // +\"\" -> 0, +null -> 0, +undefined -> NaN, +\"foo\" -> NaN, +\"4\" -> 4\n    vValue = parseInt(+aValues[i]);\n    sPart = aParts[i];\n    if (isNaN(vValue)) {\n      return this.setTime(NaN);\n    }\n    if (sPart === \"month\") {\n      vValue += 1;\n    } else if (sPart === \"year\") {\n      if (vValue <= 0) {\n        vValue = 1 - vValue;\n        oDateParts.era = \"B\";\n      } else {\n        oDateParts.era = \"A\";\n      }\n    }\n    oDateParts[sPart] = vValue.toString();\n  }\n  if (this.oDateParts) {\n    oCurrentDateParts = this.oDateParts;\n  } else if (isNaN(this.oDate)) {\n    //era and year are given at least\n    oCurrentDateParts = {\n      day: \"1\",\n      fractionalSecond: \"0\",\n      hour: \"0\",\n      minute: \"0\",\n      month: \"1\",\n      second: \"0\"\n    };\n  } else {\n    oCurrentDateParts = TimezoneUtil._getParts(this.oDate, this.sTimezoneID);\n  }\n  oDateParts = Object.assign({}, oCurrentDateParts, oDateParts);\n\n  // NaN may happen if no year is given if current date is invalid\n  oNewDateAsUTCTimestamp = TimezoneUtil._getDateFromParts(oDateParts);\n  if (isNaN(oNewDateAsUTCTimestamp)) {\n    return this.setTime(NaN);\n  }\n  iNewTimestamp = oNewDateAsUTCTimestamp.getTime() + TimezoneUtil.calculateOffset(oNewDateAsUTCTimestamp, this.sTimezoneID) * 1000;\n  return this.setTime(iNewTimestamp);\n};\n\n/**\n * Clones this UI5Date instance.\n *\n * @returns {Date|module:sap/ui/core/date/UI5Date} The cloned date instance\n *\n * @private\n */\nUI5Date.prototype.clone = function () {\n  return UI5Date.getInstance(this);\n};\n\n/**\n * Returns the day of the month of this date instance according to the configured time zone,\n * see <code>Date.prototype.getDate</code>.\n *\n * @returns {int}\n *   A number between 1 and 31 representing the day of the month of this date instance according\n *   to the configured time zone\n *\n * @public\n */\nUI5Date.prototype.getDate = function () {\n  return this._getPart(\"day\");\n};\n\n/**\n * Returns the day of the week of this date instance according to the configured time zone,\n * see <code>Date.prototype.getDay</code>.\n *\n * @returns {int}\n *   A number between 0 (Sunday) and 6 (Saturday) representing the day of the week of this date\n *   instance according to the configured time zone\n *\n * @public\n */\nUI5Date.prototype.getDay = function () {\n  return this._getPart(\"weekday\");\n};\n\n/**\n * Returns the year of this date instance according to the configured time zone,\n * see <code>Date.prototype.getFullYear</code>.\n *\n * @returns {int} The year of this date instance according to the configured time zone\n *\n * @public\n */\nUI5Date.prototype.getFullYear = function () {\n  return this._getPart(\"year\");\n};\n\n/**\n * Returns the hours of this date instance according to the configured time zone, see\n * <code>Date.prototype.getHours</code>.\n *\n * @returns {int}\n *   A number between 0 and 23 representing the hours of this date instance according to the\n *   configured time zone\n *\n * @public\n */\nUI5Date.prototype.getHours = function () {\n  return this._getPart(\"hour\");\n};\n\n/**\n * Returns the milliseconds of this date instance according to the configured time zone,\n * see <code>Date.prototype.getMilliseconds</code>.\n *\n * @returns {int}\n *   A number between 0 and 999 representing the milliseconds of this date instance according to\n *   the configured time zone\n *\n * @public\n */\nUI5Date.prototype.getMilliseconds = function () {\n  return this._getPart(\"fractionalSecond\");\n};\n\n/**\n * Returns the minutes of this date instance according to the configured time zone,\n * see <code>Date.prototype.getMinutes</code>.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the minutes of this date instance according to the\n *   configured time zone\n *\n * @public\n */\nUI5Date.prototype.getMinutes = function () {\n  return this._getPart(\"minute\");\n};\n\n/**\n * Returns the month index of this date instance according to the configured time zone,\n * see <code>Date.prototype.getMonth</code>.\n *\n * @returns {int}\n *   The month index between 0 (January) and 11 (December) of this date instance according to\n *   the configured time zone\n *\n * @public\n */\nUI5Date.prototype.getMonth = function () {\n  return this._getPart(\"month\");\n};\n\n/**\n * Returns the seconds of this date instance according to the configured time zone,\n * see <code>Date.prototype.getSeconds</code>.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the seconds of this date instance according to the\n *   configured time zone\n *\n * @public\n */\nUI5Date.prototype.getSeconds = function () {\n  return this._getPart(\"second\");\n};\n\n/**\n * Returns the difference in minutes between the UTC and the configured time zone for this date,\n * see <code>Date.prototype.getTimezoneOffset</code>.\n *\n * @returns {int}\n *   The difference in minutes between the UTC and the configured time zone for this date\n *\n * @public\n */\nUI5Date.prototype.getTimezoneOffset = function () {\n  return TimezoneUtil.calculateOffset(this.oDate, this.sTimezoneID) / 60;\n};\n\n/**\n * Returns the year of this date instance minus 1900 according to the configured time zone,\n * see <code>Date.prototype.getYear</code>.\n *\n * @returns {int}\n *   The year of this date instance minus 1900 according to the configured time zone\n *\n * @deprecated As of version 1.111 as it is deprecated in the base class JavaScript Date; use\n *   {@link #getFullYear} instead\n * @public\n */\nUI5Date.prototype.getYear = function () {\n  return this._getPart(\"year\") - 1900;\n};\n\n/**\n * Sets the day of the month for this date instance considering the configured time zone,\n * see <code>Date.prototype.setDate</code>.\n *\n * @param {int} iDay\n *   An integer representing the new day value, see <code>Date.prototype.setDate</code>\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setDate = function (iDay) {\n  return this._setParts([\"day\"], arguments);\n};\n\n/**\n * Sets the year, month and day for this date instance considering the configured time zone,\n * see <code>Date.prototype.setFullYear</code>.\n *\n * @param {int} iYear An integer representing the new year value\n * @param {int} [iMonth] An integer representing the new month index\n * @param {int} [iDay] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setFullYear = function (iYear, iMonth, iDay) {\n  return this._setParts([\"year\", \"month\", \"day\"], arguments);\n};\n\n/**\n * Sets the hours, minutes, seconds and milliseconds for this date instance considering the\n * configured time zone, see <code>Date.prototype.setHours</code>.\n *\n * @param {int} iHours An integer representing the new hour value\n * @param {int} [iMinutes] An integer representing the new minutes value\n * @param {int} [iSeconds] An integer representing the new seconds value\n * @param {int} [iMilliseconds] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setHours = function (iHours, iMinutes, iSeconds, iMilliseconds) {\n  return this._setParts([\"hour\", \"minute\", \"second\", \"fractionalSecond\"], arguments);\n};\n\n/**\n * Sets the milliseconds for this date instance considering the configured time zone, see\n * <code>Date.prototype.setMilliseconds</code>.\n *\n * @param {int} iMilliseconds An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setMilliseconds = function (iMilliseconds) {\n  return this._setParts([\"fractionalSecond\"], arguments);\n};\n\n/**\n * Sets the minutes, seconds and milliseconds for this date instance considering the configured\n * time zone, see <code>Date.prototype.setMinutes</code>.\n *\n * @param {int} iMinutes An integer representing the new minutes value\n * @param {int} [iSeconds] An integer representing the new seconds value\n * @param {int} [iMilliseconds] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setMinutes = function (iMinutes, iSeconds, iMilliseconds) {\n  return this._setParts([\"minute\", \"second\", \"fractionalSecond\"], arguments);\n};\n\n/**\n * Sets the month and day for this date instance considering the configured time zone,\n * see <code>Date.prototype.setMonth</code>.\n *\n * @param {int} iMonth An integer representing the new month index\n * @param {int} [iDay] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setMonth = function (iMonth, iDay) {\n  return this._setParts([\"month\", \"day\"], arguments);\n};\n\n/**\n * Sets the seconds and milliseconds for this date instance considering the configured time zone,\n * see <code>Date.prototype.setSeconds</code>.\n *\n * @param {int} iSeconds An integer representing the new seconds value\n * @param {int} [iMilliseconds] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setSeconds = function (iSeconds, iMilliseconds) {\n  return this._setParts([\"second\", \"fractionalSecond\"], arguments);\n};\n\n/**\n * Sets this date object to the given time represented by a number of milliseconds based on the\n * UNIX epoch and resets the previously set date parts, see\n * <code>Date.prototype.setTime</code>.\n *\n * @param {int} iTime The date time in milliseconds based in the UNIX epoch\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setTime = function (iTime) {\n  this.oDateParts = undefined;\n  return this.oDate.setTime(iTime);\n};\n\n/**\n * Sets the year for this date instance plus 1900 considering the configured time zone, see\n * <code>Date.prototype.setYear</code>.\n *\n * @param {int} iYear The year which is to be set for this date. If iYear is a number between 0\n *   and 99 (inclusive), then the year for this date is set to 1900 + iYear. Otherwise, the year\n *   for this date is set to iYear.\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @deprecated As of version 1.111 as it is deprecated in the base class JavaScript Date; use\n *   {@link #setFullYear} instead\n * @public\n */\nUI5Date.prototype.setYear = function (iYear) {\n  var iValue = parseInt(iYear);\n  iValue = iValue < 0 || iValue > 99 ? iValue : iValue + 1900;\n  return this._setParts([\"year\"], [iValue]);\n};\n\n/**\n * Returns this date object to the given time represented by a number of milliseconds based on the\n * UNIX epoch, see <code>Date.prototype.getTime</code>.\n *\n * @returns {int}\n *   The timestamp in milliseconds of this date based on the UNIX epoch, or <code>NaN</code> if\n *   the date is an invalid date\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getTime\n * @public\n */\n\n/**\n * Returns the day of the month of this date instance according to universal time,\n * see <code>Date.prototype.getUTCDate</code>.\n *\n * @returns {int}\n *   A number between 1 and 31 representing the day of the month of this date instance according\n *   to universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCDate\n * @public\n */\n\n/**\n *\n * Returns the day of the week of this date instance according to universal time,\n * see <code>Date.prototype.getUTCDay</code>.\n *\n * @returns {int}\n *   A number between 0 (Sunday) and 6 (Saturday) representing the day of the week of this date\n *   instance according to universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCDay\n * @public\n */\n\n/**\n * Returns the year of this date instance according to universal time, see\n * <code>Date.prototype.getUTCFullYear</code>.\n *\n * @returns {int} The year of this date instance according to universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCFullYear\n * @public\n */\n\n/**\n * Returns the hours of this date instance according to universal time, see\n * <code>Date.prototype.getUTCHours</code>.\n *\n * @returns {int}\n *   A number between 0 and 23 representing the hours of this date instance according to\n *   universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCHours\n * @public\n */\n\n/**\n * Returns the milliseconds of this date instance according to universal time,\n * see <code>Date.prototype.getUTCMilliseconds</code>.\n *\n * @returns {int}\n *   A number between 0 and 999 representing the milliseconds of this date instance according to\n *   universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCMilliseconds\n * @public\n */\n\n/**\n * Returns the minutes of this date instance according to universal time, see\n * <code>Date.prototype.getUTCMinutes</code>.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the minutes of this date instance according to\n *   universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCMinutes\n * @public\n */\n\n/**\n * Returns the month index of this date instance according to universal time, see\n * <code>Date.prototype.getUTCMonth</code>.\n *\n * @returns {int}\n *   The month index between 0 (January) and 11 (December) of this date instance according to\n *   universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCMonth\n * @public\n */\n\n/**\n * Returns the seconds of this date instance according to universal time, see\n * <code>Date.prototype.getUTCSeconds</code>.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the seconds of this date instance according to\n *   universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCSeconds\n * @public\n */\n\n/**\n * Sets the day of the month for this date instance according to universal time,\n * see <code>Date.prototype.setUTCDate</code>.\n *\n * @param {int} iDay\n *   An integer representing the new day value, see <code>Date.prototype.setUTCDate</code>\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCDate\n * @public\n */\n\n/**\n * Sets the year, month and day for this date instance according to universal time,\n * see <code>Date.prototype.setUTCFullYear</code>.\n *\n * @param {int} iYear An integer representing the new year value\n * @param {int} [iMonth] An integer representing the new month index\n * @param {int} [iDay] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCFullYear\n * @public\n */\n\n/**\n * Sets the hours, minutes, seconds and milliseconds for this date instance according to\n * universal time, see <code>Date.prototype.setUTCHours</code>.\n *\n * @param {int} iHours An integer representing the new hour value\n * @param {int} [iMinutes] An integer representing the new minutes value\n * @param {int} [iSeconds] An integer representing the new seconds value\n * @param {int} [iMilliseconds] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCHours\n * @public\n */\n\n/**\n * Sets the milliseconds for this date instance according to universal time, see\n * <code>Date.prototype.setUTCMilliseconds</code>.\n *\n * @param {int} iMilliseconds An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCMilliseconds\n * @public\n */\n\n/**\n * Sets the minutes, seconds and milliseconds for this date instance according to universal\n * time, see <code>Date.prototype.setUTCMinutes</code>.\n *\n * @param {int} iMinutes An integer representing the new minutes value\n * @param {int} [iSeconds] An integer representing the new seconds value\n * @param {int} [iMilliseconds] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCMinutes\n * @public\n */\n\n/**\n * Sets the month and day for this date instance according to universal time,\n * see <code>Date.prototype.setUTCMonth</code>.\n *\n * @param {int} iMonth An integer representing the new month index\n * @param {int} [iDay] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCMonth\n * @public\n */\n\n/**\n * Sets the seconds and milliseconds for this date instance  according to universal time,\n * see <code>Date.prototype.setUTCSeconds</code>.\n *\n * @param {int} iSeconds An integer representing the new seconds value\n * @param {int} [iMilliseconds] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCSeconds\n * @public\n */\n\n/**\n * Converts this date to a string, interpreting it in the UTC time zone, see\n * <code>Date.prototype.toGMTString</code>.\n *\n * @returns {string} The converted date as string in the UTC time zone\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toGMTString\n * @public\n */\n\n/**\n * Converts this date to a string in ISO format in the UTC offset zero time zone, as denoted\n * by the suffix <code>Z</code>, see <code>Date.prototype.toISOString</code>.\n *\n * @returns {string}\n *   The converted date as a string in ISO format, in the UTC offset zero time zone\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toISOString\n * @public\n */\n\n/**\n * Returns a string representation of this date object, see <code>Date.prototype.toJSON</code>.\n *\n * @returns {string} The date object representation as a string\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toJSON\n * @public\n */\n\n/**\n * Returns the date portion of this date object interpreted in the configured time zone in\n * English, see <code>Date.prototype.toDateString</code>.\n *\n * @returns {string}\n *   The date portion of this date object interpreted in the configured time zone in English\n *\n * @public\n */\nUI5Date.prototype.toDateString = function () {\n  if (isNaN(this.oDate)) {\n    return this.oDate.toDateString();\n  }\n  return aWeekday[this.getDay()] + \" \" + aMonths[this.getMonth()] + \" \" + addLeadingZeros(this.getDate(), 2) + \" \" + addLeadingZeros(this.getFullYear(), 4);\n};\n\n/**\n * Returns a string with a language-dependent representation of the date part of this date\n * object interpreted by default in the configured time zone, see\n * <code>Date.prototype.toLocaleDateString</code>.\n *\n * @param {string} [sLocale=sap.ui.core.Configuration.getLanguageTag()]\n *   The locale used for formatting; the configured locale by default\n * @param {object} [oOptions]\n *   The options object used for formatting, corresponding to the options parameter of the\n *   <code>Intl.DateTimeFormat</code> constructor\n * @param {string} [oOptions.timeZone=sap.ui.core.Configuration.getTimezone()]\n *   The IANA time zone ID; the configured time zone by default\n * @returns {string}\n *   The language-dependent representation of the date part of this date object\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toLocaleDateString\n * @public\n */\n\n/**\n * Returns a string with a language-dependent representation of this date object interpreted by\n * default in the configured time zone, see <code>Date.prototype.toLocaleString</code>.\n *\n * @param {string} [sLocale=sap.ui.core.Configuration.getLanguageTag()]\n *   The locale used for formatting; the configured locale by default\n * @param {object} [oOptions]\n *   The options object used for formatting, corresponding to the options parameter of the\n *   <code>Intl.DateTimeFormat</code> constructor\n * @param {string} [oOptions.timeZone=sap.ui.core.Configuration.getTimezone()]\n *   The IANA time zone ID; the configured time zone by default\n * @returns {string}\n *   The language-dependent representation of this date object\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toLocaleString\n * @public\n */\n\n/**\n * Returns a string with a language-dependent representation of the time part of this date\n * object interpreted by default in the configured time zone, see\n * <code>Date.prototype.toLocaleTimeString</code>.\n *\n * @param {string} [sLocale=sap.ui.core.Configuration.getLanguageTag()]\n *   The locale used for formatting; the configured locale by default\n * @param {object} [oOptions]\n *   The options object used for formatting, corresponding to the options parameter of the\n *   <code>Intl.DateTimeFormat</code> constructor\n * @param {string} [oOptions.timeZone=sap.ui.core.Configuration.getTimezone()]\n *   The IANA time zone ID; the configured time zone by default\n * @returns {string}\n *   The language-dependent representation of the time part of this date object\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toLocaleTimeString\n * @public\n */\n\n/**\n * Returns a string representing this date object interpreted in the configured time zone.\n *\n * @returns {string}\n *   A string representing this date object interpreted in the configured time zone\n *\n * @public\n */\nUI5Date.prototype.toString = function () {\n  if (isNaN(this.oDate)) {\n    return this.oDate.toString();\n  }\n  return this.toDateString() + \" \" + this.toTimeString();\n};\n\n/**\n * Returns the time portion of this date object interpreted in the configured time zone in English.\n *\n * @returns {string}\n *   The time portion of this date object interpreted in the configured time zone in English\n *\n * @public\n */\nUI5Date.prototype.toTimeString = function () {\n  var iHours, iMinutes, sSign, iTimeZoneOffset;\n  if (isNaN(this.oDate)) {\n    return this.oDate.toTimeString();\n  }\n  iTimeZoneOffset = this.getTimezoneOffset();\n  sSign = iTimeZoneOffset > 0 ? \"-\" : \"+\";\n  iHours = Math.floor(Math.abs(iTimeZoneOffset) / 60);\n  iMinutes = Math.abs(iTimeZoneOffset) % 60;\n\n  // ommit the optional, implementation dependent time zone name\n  return addLeadingZeros(this.getHours(), 2) + \":\" + addLeadingZeros(this.getMinutes(), 2) + \":\" + addLeadingZeros(this.getSeconds(), 2) + \" GMT\" + sSign + addLeadingZeros(iHours, 2) + addLeadingZeros(iMinutes, 2);\n};\n\n/**\n * Converts this date to a string, interpreting it in the UTC time zone, see\n * <code>Date.prototype.toUTCString</code>.\n *\n * @returns {string} The converted date as a string in the UTC time zone\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toUTCString\n * @public\n */\n\n/**\n * Returns the value of this date object in milliseconds based on the UNIX epoch, see\n * <code>Date.prototype.valueOf</code>.\n *\n * @returns {int} The primitive value of this date object in milliseconds based on the UNIX epoch\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.valueOf\n * @public\n */\n\n// functions that simply delegate to the inner date instance\n[\"getTime\", \"getUTCDate\", \"getUTCDay\", \"getUTCFullYear\", \"getUTCHours\", \"getUTCMilliseconds\", \"getUTCMinutes\", \"getUTCMonth\", \"getUTCSeconds\", \"toGMTString\", \"toISOString\", \"toJSON\", \"toUTCString\", \"valueOf\"].forEach(function (sMethod) {\n  UI5Date.prototype[sMethod] = function () {\n    return this.oDate[sMethod].apply(this.oDate, arguments);\n  };\n});\n[\"toLocaleDateString\", \"toLocaleString\", \"toLocaleTimeString\"].forEach(function (sMethod) {\n  UI5Date.prototype[sMethod] = function (sLocale, oOptions) {\n    return this.oDate[sMethod](sLocale || Configuration.getLanguageTag(), Object.assign({\n      timeZone: this.sTimezoneID\n    }, oOptions));\n  };\n});\n\n// before delegating to the inner date instance clear the cached date parts\n[\"setUTCDate\", \"setUTCFullYear\", \"setUTCHours\", \"setUTCMilliseconds\", \"setUTCMinutes\", \"setUTCMonth\", \"setUTCSeconds\"].forEach(function (sMethod) {\n  UI5Date.prototype[sMethod] = function () {\n    this.oDateParts = undefined;\n    return this.oDate[sMethod].apply(this.oDate, arguments);\n  };\n});\n\n/**\n * Creates a JavaScript Date instance.\n *\n * @param {object} vParts\n *   The <code>arguments</code> object which is given to\n *   <code>module:sap/ui/core/date/UI5Date.getInstance</code>\n * @returns {Date}\n *   A JavaScript Date instance\n *\n * @private\n */\nUI5Date._createDateInstance = function (vParts) {\n  if (vParts[0] instanceof Date) {\n    vParts[0] = vParts[0].valueOf();\n  }\n\n  // ES5 variant of new Date(...vParts)\n  return new (Function.prototype.bind.apply(Date, [].concat.apply([null], vParts)))();\n};\n\n/**\n * Creates a date instance (either JavaScript Date or <code>UI5Date</code>) which considers the\n * configured time zone wherever JavaScript Date uses the local browser time zone, for example\n * in <code>getDate</code>, <code>toString</code>, or <code>setHours</code>. The supported\n * parameters are the same as the ones supported by the JavaScript Date constructor.\n *\n * <b>Note:</b> Adjusting the time zone in a running application can lead to unexpected data\n * inconsistencies. For more information, see {@link sap.ui.core.Configuration#setTimezone}.\n *\n * @param {int|string|Date|module:sap/ui/core/date/UI5Date|null} [vYearOrValue]\n *   Same meaning as in the JavaScript Date constructor\n * @param {int|string} [vMonthIndex]\n *   Same meaning as in the JavaScript Date constructor\n * @param {int|string} [vDay=1] Same meaning as in the JavaScript Date constructor\n * @param {int|string} [vHours=0] Same meaning as in the JavaScript Date constructor\n * @param {int|string} [vMinutes=0] Same meaning as in the JavaScript Date constructor\n * @param {int|string} [vSeconds=0] Same meaning as in the JavaScript Date constructor\n * @param {int|string} [vMilliseconds=0] Same meaning as in the JavaScript Date constructor\n * @returns {Date|module:sap/ui/core/date/UI5Date}\n *   The date instance that considers the configured time zone in all local getters and setters.\n *\n * @public\n * @see sap.ui.core.Configuration#getTimezone\n */\nUI5Date.getInstance = function () {\n  var sTimezone = Configuration.getTimezone();\n  if (sTimezone !== TimezoneUtil.getLocalTimezone()) {\n    return new UI5Date(arguments, sTimezone);\n  }\n  // time zones are equal -> use JavaScript Date as it is\n  return UI5Date._createDateInstance(arguments);\n};\n\n/**\n * Checks whether the given date object is a valid date, considers the configured time zone\n * and throws an error otherwise.\n *\n * @param {Date|module:sap/ui/core/date/UI5Date} oDate\n *   The date object created via <code>UI5Date.getInstance</code>\n * @throws {Error}\n *   If the given date object is not valid or does not consider the configured time zone\n *\n * @private\n */\nUI5Date.checkDate = function (oDate) {\n  if (isNaN(oDate.getTime())) {\n    throw new Error(\"The given Date is not valid\");\n  }\n  if (!(oDate instanceof UI5Date) && Configuration.getTimezone() !== TimezoneUtil.getLocalTimezone()) {\n    throw new Error(\"Configured time zone requires the parameter 'oDate' to be an instance of\" + \" sap.ui.core.date.UI5Date\");\n  }\n};\nexport default UI5Date;"],"mappings":"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ED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}