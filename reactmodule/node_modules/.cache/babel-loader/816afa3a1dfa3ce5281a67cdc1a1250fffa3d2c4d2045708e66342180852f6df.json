{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar ViewSettingsDialog_1;\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport event from \"@ui5/webcomponents-base/dist/decorators/event.js\";\nimport { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport { isPhone } from \"@ui5/webcomponents-base/dist/Device.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport Dialog from \"@ui5/webcomponents/dist/Dialog.js\";\nimport Button from \"@ui5/webcomponents/dist/Button.js\";\nimport Label from \"@ui5/webcomponents/dist/Label.js\";\nimport ListItemGroup from \"@ui5/webcomponents/dist/ListItemGroup.js\";\nimport List from \"@ui5/webcomponents/dist/List.js\";\nimport ListItemStandard from \"@ui5/webcomponents/dist/ListItemStandard.js\";\nimport Title from \"@ui5/webcomponents/dist/Title.js\";\nimport SegmentedButton from \"@ui5/webcomponents/dist/SegmentedButton.js\";\nimport SegmentedButtonItem from \"@ui5/webcomponents/dist/SegmentedButtonItem.js\";\nimport ViewSettingsDialogMode from \"./types/ViewSettingsDialogMode.js\";\nimport \"@ui5/webcomponents-icons/dist/sort.js\";\nimport \"@ui5/webcomponents-icons/dist/filter.js\";\nimport \"@ui5/webcomponents-icons/dist/nav-back.js\";\nimport { VSD_DIALOG_TITLE_SORT, VSD_SUBMIT_BUTTON, VSD_CANCEL_BUTTON, VSD_RESET_BUTTON, VSD_SORT_ORDER, VSD_SORT_BY, VSD_ORDER_ASCENDING, VSD_ORDER_DESCENDING, VSD_FILTER_BY } from \"./generated/i18n/i18n-defaults.js\";\n// Template\nimport ViewSettingsDialogTemplate from \"./generated/templates/ViewSettingsDialogTemplate.lit.js\";\n// Styles\nimport viewSettingsDialogCSS from \"./generated/themes/ViewSettingsDialog.css.js\";\n/**\n * @class\n * ### Overview\n * The `ui5-view-settings-dialog` component helps the user to sort data within a list or a table.\n * It consists of several lists like `Sort order` which is built-in and `Sort By` and `Filter By` lists,\n * for which you must be provide items(`ui5-sort-item` & `ui5-filter-item` respectively)\n * These options can be used to create sorters for a table.\n *\n * The `ui5-view-settings-dialog` interrupts the current application processing as it is the only focused UI element and\n * the main screen is dimmed/blocked.\n * The `ui5-view-settings-dialog` is modal, which means that user action is required before returning to the parent window is possible.\n *\n * ### Structure\n * A `ui5-view-settings-dialog` consists of a header, content, and a footer for action buttons.\n * The `ui5-view-settings-dialog` is usually displayed at the center of the screen.\n *\n * ### Responsive Behavior\n * `ui5-view-settings-dialog` stretches on full screen on phones.\n *\n * ### ES6 Module Import\n *\n * `import \"@ui5/webcomponents-fiori/dist/ViewSettingsDialog.js\";`\n * @constructor\n * @extends UI5Element\n * @since 1.0.0-rc.16\n * @public\n */\nlet ViewSettingsDialog = ViewSettingsDialog_1 = class ViewSettingsDialog extends UI5Element {\n  constructor() {\n    super(...arguments);\n    /**\n     * Defines the initial sort order.\n     * @default false\n     * @public\n     */\n    this.sortDescending = false;\n    /**\n     * Indicates if the dialog is open.\n     * @public\n     * @default false\n     * @since 2.0.0\n     */\n    this.open = false;\n    /**\n     * Stores current settings of the dialog.\n     * @private\n     */\n    this._currentSettings = {\n      sortOrder: [],\n      sortBy: [],\n      filters: []\n    };\n    /**\n     * Stores settings of the dialog before the initial open.\n     * @private\n     */\n    this._initialSettings = this._currentSettings;\n    /**\n     * Stores settings of the dialog after confirmation.\n     * @private\n     */\n    this._confirmedSettings = this._currentSettings;\n    /**\n     * Defnies the current mode of the component.\n     * @since 1.0.0-rc.16\n     * @private\n     */\n    this._currentMode = \"Sort\";\n    /**\n     * When in Filter By mode, defines whether we need to show the list of keys, or the list with values.\n     * @since 1.0.0-rc.16\n     * @private\n     */\n    this._filterStepTwo = false;\n  }\n  onBeforeRendering() {\n    if (this._currentSettings.filters && this._currentSettings.filters.length) {\n      this._setAdditionalTexts();\n    }\n    if (!this.shouldBuildSort && this.shouldBuildFilter) {\n      this._currentMode = ViewSettingsDialogMode.Filter;\n    }\n  }\n  onInvalidation(changeInfo) {\n    if (changeInfo.type === \"slot\") {\n      this._confirmedSettings = this._settings;\n    }\n  }\n  _setAdditionalTexts() {\n    // Add the additional text to the filter options\n    this.filterItems.forEach((filter, index) => {\n      let selectedCount = 0;\n      for (let i = 0; i < filter.values.length; i++) {\n        if (this._currentSettings.filters[index].filterOptions[i].selected) {\n          selectedCount++;\n        }\n      }\n      filter.additionalText = !selectedCount ? \"\" : `${selectedCount}`;\n    });\n  }\n  static async onDefine() {\n    ViewSettingsDialog_1.i18nBundle = await getI18nBundle(\"@ui5/webcomponents-fiori\");\n  }\n  get _selectedFilter() {\n    for (let i = 0; i < this._currentSettings.filters.length; i++) {\n      if (this._currentSettings.filters[i].selected) {\n        return this._currentSettings.filters[i];\n      }\n    }\n  }\n  get shouldBuildSort() {\n    return !!this.sortItems.length;\n  }\n  get shouldBuildFilter() {\n    return !!this.filterItems.length;\n  }\n  get hasPagination() {\n    return this.shouldBuildSort && this.shouldBuildFilter;\n  }\n  get _filterByTitle() {\n    const selectedFilterText = this._selectedFilter ? this._selectedFilter.text : \"\";\n    return `${ViewSettingsDialog_1.i18nBundle.getText(VSD_FILTER_BY)}: ${selectedFilterText}`;\n  }\n  get _dialogTitle() {\n    return ViewSettingsDialog_1.i18nBundle.getText(VSD_DIALOG_TITLE_SORT);\n  }\n  get _okButtonLabel() {\n    return ViewSettingsDialog_1.i18nBundle.getText(VSD_SUBMIT_BUTTON);\n  }\n  get _cancelButtonLabel() {\n    return ViewSettingsDialog_1.i18nBundle.getText(VSD_CANCEL_BUTTON);\n  }\n  get _resetButtonLabel() {\n    return ViewSettingsDialog_1.i18nBundle.getText(VSD_RESET_BUTTON);\n  }\n  get _ascendingLabel() {\n    return ViewSettingsDialog_1.i18nBundle.getText(VSD_ORDER_ASCENDING);\n  }\n  get _descendingLabel() {\n    return ViewSettingsDialog_1.i18nBundle.getText(VSD_ORDER_DESCENDING);\n  }\n  get _sortOrderLabel() {\n    return ViewSettingsDialog_1.i18nBundle.getText(VSD_SORT_ORDER);\n  }\n  get _filterByLabel() {\n    return ViewSettingsDialog_1.i18nBundle.getText(VSD_FILTER_BY);\n  }\n  get _sortByLabel() {\n    return ViewSettingsDialog_1.i18nBundle.getText(VSD_SORT_BY);\n  }\n  get _isPhone() {\n    return isPhone();\n  }\n  get _sortAscending() {\n    return !this.sortDescending;\n  }\n  get _title() {\n    return this.showBackButton ? this._filterByTitle : this._dialogTitle;\n  }\n  /**\n   * Determines disabled state of the `Reset` button.\n   */\n  get _disableResetButton() {\n    return this._dialog && this._sortSetttingsAreInitial && this._filteresAreInitial;\n  }\n  get _sortSetttingsAreInitial() {\n    let settingsAreInitial = true;\n    [\"sortBy\", \"sortOrder\"].forEach(sortList => {\n      this._currentSettings[sortList].forEach((item, index) => {\n        if (item.selected !== this._initialSettings[sortList][index].selected) {\n          settingsAreInitial = false;\n        }\n      });\n    });\n    return settingsAreInitial;\n  }\n  get _filteresAreInitial() {\n    let filtersAreInitial = true;\n    this._currentSettings.filters.forEach((filter, index) => {\n      for (let i = 0; i < filter.filterOptions.length; i++) {\n        if (filter.filterOptions[i].selected !== this._initialSettings.filters[index].filterOptions[i].selected) {\n          filtersAreInitial = false;\n        }\n      }\n    });\n    return filtersAreInitial;\n  }\n  /**\n   * Returns the current settings (current state of all lists).\n   */\n  get _settings() {\n    return {\n      sortOrder: JSON.parse(JSON.stringify(this.initSortOrderItems)),\n      sortBy: JSON.parse(JSON.stringify(this.initSortByItems)),\n      filters: this.filterItems.map(item => {\n        return {\n          text: item.text || \"\",\n          selected: false,\n          filterOptions: item.values.map(optionValue => {\n            return {\n              text: optionValue.text || \"\",\n              selected: optionValue.selected\n            };\n          })\n        };\n      })\n    };\n  }\n  get initSortByItems() {\n    return this.sortItems.map((item, index) => {\n      return {\n        text: item.text,\n        selected: item.selected,\n        index\n      };\n    });\n  }\n  get initSortOrderItems() {\n    return [{\n      text: this._ascendingLabel,\n      selected: !this.sortDescending\n    }, {\n      text: this._descendingLabel,\n      selected: this.sortDescending\n    }];\n  }\n  get expandContent() {\n    return this._filterStepTwo || !this.hasPagination;\n  }\n  get isModeSort() {\n    return this._currentMode === ViewSettingsDialogMode.Sort;\n  }\n  get isModeFilter() {\n    return this._currentMode === ViewSettingsDialogMode.Filter;\n  }\n  get showBackButton() {\n    return this.isModeFilter && this._filterStepTwo;\n  }\n  get _sortOrderListDomRef() {\n    return this.shadowRoot.querySelector(\"[ui5-list][sort-order]\");\n  }\n  get _sortByList() {\n    return this.shadowRoot.querySelector(\"[ui5-list][sort-by]\");\n  }\n  get _dialogDomRef() {\n    return this.shadowRoot.querySelector(\"[ui5-dialog]\");\n  }\n  /**\n   * Shows the dialog.\n   */\n  beforeDialogOpen() {\n    if (!this._dialog) {\n      this._sortOrder = this._sortOrderListDomRef;\n      this._sortBy = this._sortByList;\n      // Sorting\n      this._initialSettings = this._settings;\n      this._currentSettings = this._settings;\n      this._confirmedSettings = this._settings;\n      this._dialog = this._dialogDomRef;\n    } else {\n      this._restoreSettings(this._confirmedSettings);\n    }\n    this.fireEvent(\"before-open\", {}, true, false);\n  }\n  afterDialogOpen() {\n    this._dialog?.querySelector(\"[ui5-list]\")?.focusFirstItem();\n    this._focusRecentlyUsedControl();\n    this.fireEvent(\"open\");\n  }\n  afterDialogClose() {\n    this.fireEvent(\"close\");\n  }\n  _handleModeChange(e) {\n    const mode = e.detail.selectedItems[0].getAttribute(\"mode\");\n    this._currentMode = ViewSettingsDialogMode[mode];\n  }\n  _handleFilterValueItemClick(e) {\n    // Update the component state\n    this._currentSettings.filters = this._currentSettings.filters.map(filter => {\n      if (filter.selected) {\n        filter.filterOptions.forEach(option => {\n          if (option.text === e.detail.item.innerText) {\n            option.selected = !option.selected;\n          }\n        });\n      }\n      return filter;\n    });\n    this._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n  }\n  _navigateToFilters() {\n    this._filterStepTwo = false;\n  }\n  _changeCurrentFilter(e) {\n    this._filterStepTwo = true;\n    this._currentSettings.filters = this._currentSettings.filters.map(filter => {\n      filter.selected = filter.text === e.detail.item.innerText;\n      return filter;\n    });\n  }\n  /**\n   * Sets focus on recently used control within the dialog.\n   */\n  _focusRecentlyUsedControl() {\n    if (!this._recentlyFocused || !Object.keys(this._recentlyFocused).length) {\n      return;\n    }\n    const recentlyFocusedSelectedItems = this._recentlyFocused.getSelectedItems();\n    if (recentlyFocusedSelectedItems.length) {\n      recentlyFocusedSelectedItems[0].focus();\n    }\n  }\n  /**\n   * Stores current settings as confirmed and fires `confirm` event.\n   */\n  _confirmSettings() {\n    this.open = false;\n    this._confirmedSettings = this._currentSettings;\n    this.fireEvent(\"confirm\", this.eventsParams);\n  }\n  /**\n   * Sets current settings to recently confirmed ones and fires `cancel` event.\n   */\n  _cancelSettings() {\n    this._restoreSettings(this._confirmedSettings);\n    this.fireEvent(\"cancel\", this.eventsParams);\n    this.open = false;\n  }\n  get eventsParams() {\n    const _currentSortOrderSelected = this._currentSettings.sortOrder.filter(item => item.selected)[0],\n      _currentSortBySelected = this._currentSettings.sortBy.filter(item => item.selected)[0],\n      sortOrder = _currentSortOrderSelected && (_currentSortOrderSelected.text || \"\"),\n      sortDescending = !this._currentSettings.sortOrder[0].selected,\n      sortBy = _currentSortBySelected && (_currentSortBySelected.text || \"\"),\n      sortByElementIndex = _currentSortBySelected && _currentSortBySelected.index,\n      sortByItem = this.sortItems[sortByElementIndex];\n    return {\n      sortOrder,\n      sortDescending,\n      sortBy,\n      sortByItem,\n      filters: this.selectedFilters\n    };\n  }\n  get selectedFilters() {\n    const result = [];\n    this._currentSettings.filters.forEach(filter => {\n      const selectedOptions = [];\n      filter.filterOptions.forEach(option => {\n        if (option.selected) {\n          selectedOptions.push(option.text || \"\");\n        }\n      });\n      if (selectedOptions.length) {\n        result.push({});\n        result[result.length - 1][filter.text || \"\"] = selectedOptions;\n      }\n    });\n    return result;\n  }\n  /**\n   * If the dialog is closed by [Escape] key, do the same as if the `Cancel` button is pressed.\n   * @param evt\n   */\n  _restoreConfirmedOnEscape(evt) {\n    if (evt.detail.escPressed) {\n      this._cancelSettings();\n      this._currentMode = ViewSettingsDialogMode.Sort;\n      this._filterStepTwo = false;\n    }\n  }\n  /**\n   * Resets the control settings to their initial state.\n   */\n  _resetSettings() {\n    this._restoreSettings(this._initialSettings);\n    this._recentlyFocused = this._sortOrder;\n    this._focusRecentlyUsedControl();\n  }\n  /**\n   * Sets current settings to ones passed as `settings` argument.\n   * @param settings\n   */\n  _restoreSettings(settings) {\n    this._currentSettings = JSON.parse(JSON.stringify(settings));\n    this._currentMode = ViewSettingsDialogMode.Sort;\n    this._filterStepTwo = false;\n  }\n  /**\n   * Stores `Sort Order` list as recently used control and its selected item in current state.\n   */\n  _onSortOrderChange(e) {\n    this._recentlyFocused = this._sortOrder;\n    this._currentSettings.sortOrder = this.initSortOrderItems.map(item => {\n      item.selected = item.text === e.detail.item.innerText;\n      return item;\n    });\n    // Invalidate\n    this._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n  }\n  /**\n   * Stores `Sort By` list as recently used control and its selected item in current state.\n   */\n  _onSortByChange(e) {\n    const selectedItemIndex = Number(e.detail.item.getAttribute(\"data-ui5-external-action-item-index\"));\n    this._recentlyFocused = this._sortBy;\n    this._currentSettings.sortBy = this.initSortByItems.map((item, index) => {\n      item.selected = index === selectedItemIndex;\n      return item;\n    });\n    // Invalidate\n    this._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n  }\n  /**\n   * Sets a JavaScript object, as settings to the `ui5-view-settings-dialog`.\n   * This method can be used after the dialog is initially open, as the dialog needs\n   * to set its initial settings.\n   * The `ui5-view-settings-dialog` throws an event called \"before-open\",\n   * which can be used as a trigger point.\n   * The object should have the following format:\n   * @param settings - predefined settings.\n   * @public\n   */\n  setConfirmedSettings(settings) {\n    if (settings && this._dialog && !this._dialog.open) {\n      const tempSettings = JSON.parse(JSON.stringify(this._confirmedSettings));\n      if (settings.sortOrder) {\n        for (let i = 0; i < tempSettings.sortOrder.length; i++) {\n          if (tempSettings.sortOrder[i].text === settings.sortOrder) {\n            tempSettings.sortOrder[i].selected = true;\n          } else {\n            tempSettings.sortOrder[i].selected = false;\n          }\n        }\n      }\n      if (settings.sortBy) {\n        for (let i = 0; i < tempSettings.sortBy.length; i++) {\n          if (tempSettings.sortBy[i].text === settings.sortBy) {\n            tempSettings.sortBy[i].selected = true;\n          } else {\n            tempSettings.sortBy[i].selected = false;\n          }\n        }\n      }\n      if (settings.filters) {\n        const inputFilters = {};\n        for (let i = 0; i < settings.filters.length; i++) {\n          inputFilters[Object.keys(settings.filters[i])[0]] = settings.filters[i][Object.keys(settings.filters[i])[0]];\n        }\n        for (let i = 0; i < tempSettings.filters.length; i++) {\n          for (let j = 0; j < tempSettings.filters[i].filterOptions.length; j++) {\n            if (inputFilters[tempSettings.filters[i].text || \"\"] && inputFilters[tempSettings.filters[i].text || \"\"].indexOf(tempSettings.filters[i].filterOptions[j].text || \"\") > -1) {\n              tempSettings.filters[i].filterOptions[j].selected = true;\n            } else {\n              tempSettings.filters[i].filterOptions[j].selected = false;\n            }\n          }\n        }\n      }\n      this._confirmedSettings = JSON.parse(JSON.stringify(tempSettings));\n    }\n  }\n};\n__decorate([property({\n  type: Boolean\n})], ViewSettingsDialog.prototype, \"sortDescending\", void 0);\n__decorate([property({\n  type: Boolean\n})], ViewSettingsDialog.prototype, \"open\", void 0);\n__decorate([property({\n  type: Object\n})], ViewSettingsDialog.prototype, \"_recentlyFocused\", void 0);\n__decorate([property({\n  type: Object\n})], ViewSettingsDialog.prototype, \"_currentSettings\", void 0);\n__decorate([property({\n  type: Object\n})], ViewSettingsDialog.prototype, \"_initialSettings\", void 0);\n__decorate([property({\n  type: Object\n})], ViewSettingsDialog.prototype, \"_confirmedSettings\", void 0);\n__decorate([property()], ViewSettingsDialog.prototype, \"_currentMode\", void 0);\n__decorate([property({\n  type: Boolean,\n  noAttribute: true\n})], ViewSettingsDialog.prototype, \"_filterStepTwo\", void 0);\n__decorate([slot()], ViewSettingsDialog.prototype, \"sortItems\", void 0);\n__decorate([slot()], ViewSettingsDialog.prototype, \"filterItems\", void 0);\nViewSettingsDialog = ViewSettingsDialog_1 = __decorate([customElement({\n  tag: \"ui5-view-settings-dialog\",\n  renderer: litRender,\n  styles: viewSettingsDialogCSS,\n  template: ViewSettingsDialogTemplate,\n  dependencies: [Button, Title, Dialog, Label, List, ListItemStandard, ListItemGroup, SegmentedButton, SegmentedButtonItem]\n})\n/**\n * Fired when confirmation button is activated.\n * @param {String} sortOrder The current sort order selected.\n * @param {String} sortBy The currently selected `ui5-sort-item` text attribute.\n * @param {HTMLElement} sortByItem The currently selected `ui5-sort-item`.\n * @param {Boolean} sortDescending The selected sort order (true = descending, false = ascending).\n * @param {Array} filters The selected filters items.\n * @public\n */, event(\"confirm\", {\n  detail: {\n    /**\n     * @public\n     */\n    sortOrder: {\n      type: String\n    },\n    /**\n     * @public\n     */\n    sortBy: {\n      type: String\n    },\n    /**\n     * @public\n     */\n    sortByItem: {\n      type: HTMLElement\n    },\n    /**\n     * @public\n     */\n    sortDescending: {\n      type: Boolean\n    },\n    /**\n     * @public\n     */\n    filters: {\n      type: Array\n    }\n  }\n})\n/**\n * Fired when cancel button is activated.\n * @param {String} sortOrder The current sort order selected.\n * @param {String} sortBy The currently selected `ui5-sort-item` text attribute.\n * @param {HTMLElement} sortByItem The currently selected `ui5-sort-item`.\n * @param {Boolean} sortDescending The selected sort order (true = descending, false = ascending).\n * @param {Array} filters The selected filters items.\n * @public\n */, event(\"cancel\", {\n  detail: {\n    /**\n     * @public\n     */\n    sortOrder: {\n      type: String\n    },\n    /**\n     * @public\n     */\n    sortBy: {\n      type: String\n    },\n    /**\n     * @public\n     */\n    sortByItem: {\n      type: HTMLElement\n    },\n    /**\n     * @public\n     */\n    sortDescending: {\n      type: Boolean\n    },\n    /**\n     * @public\n     */\n    filters: {\n      type: Array\n    }\n  }\n})\n/**\n * Fired before the component is opened. **This event does not bubble.**\n * @public\n */, event(\"before-open\")\n/**\n * Fired after the dialog is opened.\n * @since 2.0.0\n * @public\n */, event(\"open\")\n/**\n * Fired after the dialog is closed.\n * @since 2.0.0\n * @public\n */, event(\"close\")], ViewSettingsDialog);\nViewSettingsDialog.define();\nexport default ViewSettingsDialog;","map":{"version":3,"names":["property","slot","customElement","event","getI18nBundle","isPhone","litRender","UI5Element","Dialog","Button","Label","ListItemGroup","List","ListItemStandard","Title","SegmentedButton","SegmentedButtonItem","ViewSettingsDialogMode","VSD_DIALOG_TITLE_SORT","VSD_SUBMIT_BUTTON","VSD_CANCEL_BUTTON","VSD_RESET_BUTTON","VSD_SORT_ORDER","VSD_SORT_BY","VSD_ORDER_ASCENDING","VSD_ORDER_DESCENDING","VSD_FILTER_BY","ViewSettingsDialogTemplate","viewSettingsDialogCSS","ViewSettingsDialog","ViewSettingsDialog_1","constructor","sortDescending","open","_currentSettings","sortOrder","sortBy","filters","_initialSettings","_confirmedSettings","_currentMode","_filterStepTwo","onBeforeRendering","length","_setAdditionalTexts","shouldBuildSort","shouldBuildFilter","Filter","onInvalidation","changeInfo","type","_settings","filterItems","forEach","filter","index","selectedCount","i","values","filterOptions","selected","additionalText","onDefine","i18nBundle","_selectedFilter","sortItems","hasPagination","_filterByTitle","selectedFilterText","text","getText","_dialogTitle","_okButtonLabel","_cancelButtonLabel","_resetButtonLabel","_ascendingLabel","_descendingLabel","_sortOrderLabel","_filterByLabel","_sortByLabel","_isPhone","_sortAscending","_title","showBackButton","_disableResetButton","_dialog","_sortSetttingsAreInitial","_filteresAreInitial","settingsAreInitial","sortList","item","filtersAreInitial","JSON","parse","stringify","initSortOrderItems","initSortByItems","map","optionValue","expandContent","isModeSort","Sort","isModeFilter","_sortOrderListDomRef","shadowRoot","querySelector","_sortByList","_dialogDomRef","beforeDialogOpen","_sortOrder","_sortBy","_restoreSettings","fireEvent","afterDialogOpen","focusFirstItem","_focusRecentlyUsedControl","afterDialogClose","_handleModeChange","e","mode","detail","selectedItems","getAttribute","_handleFilterValueItemClick","option","innerText","_navigateToFilters","_changeCurrentFilter","_recentlyFocused","Object","keys","recentlyFocusedSelectedItems","getSelectedItems","focus","_confirmSettings","eventsParams","_cancelSettings","_currentSortOrderSelected","_currentSortBySelected","sortByElementIndex","sortByItem","selectedFilters","result","selectedOptions","push","_restoreConfirmedOnEscape","evt","escPressed","_resetSettings","settings","_onSortOrderChange","_onSortByChange","selectedItemIndex","Number","setConfirmedSettings","tempSettings","inputFilters","j","indexOf","__decorate","Boolean","noAttribute","tag","renderer","styles","template","dependencies","String","HTMLElement","Array","define"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-fiori/src/ViewSettingsDialog.ts"],"sourcesContent":["import property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport event from \"@ui5/webcomponents-base/dist/decorators/event.js\";\nimport { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport type I18nBundle from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport { isPhone } from \"@ui5/webcomponents-base/dist/Device.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport type { ChangeInfo } from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport Dialog from \"@ui5/webcomponents/dist/Dialog.js\";\nimport Button from \"@ui5/webcomponents/dist/Button.js\";\nimport Label from \"@ui5/webcomponents/dist/Label.js\";\nimport ListItemGroup from \"@ui5/webcomponents/dist/ListItemGroup.js\";\nimport List from \"@ui5/webcomponents/dist/List.js\";\nimport type { ListItemClickEventDetail } from \"@ui5/webcomponents/dist/List.js\";\nimport ListItemStandard from \"@ui5/webcomponents/dist/ListItemStandard.js\";\nimport Title from \"@ui5/webcomponents/dist/Title.js\";\nimport SegmentedButton from \"@ui5/webcomponents/dist/SegmentedButton.js\";\nimport SegmentedButtonItem from \"@ui5/webcomponents/dist/SegmentedButtonItem.js\";\n\nimport ViewSettingsDialogMode from \"./types/ViewSettingsDialogMode.js\";\nimport \"@ui5/webcomponents-icons/dist/sort.js\";\nimport \"@ui5/webcomponents-icons/dist/filter.js\";\nimport \"@ui5/webcomponents-icons/dist/nav-back.js\";\nimport type SortItem from \"./SortItem.js\";\nimport type FilterItem from \"./FilterItem.js\";\n\nimport {\n\tVSD_DIALOG_TITLE_SORT,\n\tVSD_SUBMIT_BUTTON,\n\tVSD_CANCEL_BUTTON,\n\tVSD_RESET_BUTTON,\n\tVSD_SORT_ORDER,\n\tVSD_SORT_BY,\n\tVSD_ORDER_ASCENDING,\n\tVSD_ORDER_DESCENDING,\n\tVSD_FILTER_BY,\n} from \"./generated/i18n/i18n-defaults.js\";\n\n// Template\nimport ViewSettingsDialogTemplate from \"./generated/templates/ViewSettingsDialogTemplate.lit.js\";\n\n// Styles\nimport viewSettingsDialogCSS from \"./generated/themes/ViewSettingsDialog.css.js\";\n\ntype VSDFilter = Record<string, Array<string>> // {\"Filter 1\": [\"Filter 5\", \"Filter 6\"]}\ntype VSDFilters = Array<VSDFilter> // [{\"Filter 1\": [\"Filter 5\", \"Filter 6\"]}, {\"Filter 3\": [\"Filter 8\"]}]\n\n// The data, passed to the public method + part of the events' detail\ntype VSDSettings = {\n\tsortOrder: string,\n\tsortBy: string,\n\tfilters: VSDFilters,\n}\n\n// Events' detail\ntype ViewSettingsDialogConfirmEventDetail = VSDSettings & {\n\tsortByItem: SortItem,\n\tsortDescending: boolean,\n}\n\ntype ViewSettingsDialogCancelEventDetail = VSDSettings & {\n\tsortByItem: SortItem,\n\tsortDescending: boolean,\n}\n\n// Common properties for several VSDInternalSettings fields\ntype VSDItem = {text?: string, selected: boolean}\n\n// Used for the private properties _initialSettings, _confirmedSettings and _currentSettings\ntype VSDInternalSettings = {\n\tsortOrder: Array<VSDItem>,\n\tsortBy: Array<VSDItem & {index: number}>,\n\tfilters: Array<VSDItem & {filterOptions: Array<VSDItem>}>,\n}\n\n/**\n * @class\n * ### Overview\n * The `ui5-view-settings-dialog` component helps the user to sort data within a list or a table.\n * It consists of several lists like `Sort order` which is built-in and `Sort By` and `Filter By` lists,\n * for which you must be provide items(`ui5-sort-item` & `ui5-filter-item` respectively)\n * These options can be used to create sorters for a table.\n *\n * The `ui5-view-settings-dialog` interrupts the current application processing as it is the only focused UI element and\n * the main screen is dimmed/blocked.\n * The `ui5-view-settings-dialog` is modal, which means that user action is required before returning to the parent window is possible.\n *\n * ### Structure\n * A `ui5-view-settings-dialog` consists of a header, content, and a footer for action buttons.\n * The `ui5-view-settings-dialog` is usually displayed at the center of the screen.\n *\n * ### Responsive Behavior\n * `ui5-view-settings-dialog` stretches on full screen on phones.\n *\n * ### ES6 Module Import\n *\n * `import \"@ui5/webcomponents-fiori/dist/ViewSettingsDialog.js\";`\n * @constructor\n * @extends UI5Element\n * @since 1.0.0-rc.16\n * @public\n */\n@customElement({\n\ttag: \"ui5-view-settings-dialog\",\n\trenderer: litRender,\n\tstyles: viewSettingsDialogCSS,\n\ttemplate: ViewSettingsDialogTemplate,\n\tdependencies: [\n\t\tButton,\n\t\tTitle,\n\t\tDialog,\n\t\tLabel,\n\t\tList,\n\t\tListItemStandard,\n\t\tListItemGroup,\n\t\tSegmentedButton,\n\t\tSegmentedButtonItem,\n\t],\n})\n\n/**\n * Fired when confirmation button is activated.\n * @param {String} sortOrder The current sort order selected.\n * @param {String} sortBy The currently selected `ui5-sort-item` text attribute.\n * @param {HTMLElement} sortByItem The currently selected `ui5-sort-item`.\n * @param {Boolean} sortDescending The selected sort order (true = descending, false = ascending).\n * @param {Array} filters The selected filters items.\n * @public\n */\n@event<ViewSettingsDialogConfirmEventDetail>(\"confirm\", {\n\tdetail: {\n\t\t/**\n\t\t * @public\n\t\t */\n\t\tsortOrder: { type: String },\n\t\t/**\n\t\t * @public\n\t\t */\n\t\tsortBy: { type: String },\n\t\t/**\n\t\t * @public\n\t\t */\n\t\tsortByItem: { type: HTMLElement },\n\t\t/**\n\t\t * @public\n\t\t */\n\t\tsortDescending: { type: Boolean },\n\t\t/**\n\t\t * @public\n\t\t */\n\t\tfilters: { type: Array },\n\t},\n})\n\n/**\n * Fired when cancel button is activated.\n * @param {String} sortOrder The current sort order selected.\n * @param {String} sortBy The currently selected `ui5-sort-item` text attribute.\n * @param {HTMLElement} sortByItem The currently selected `ui5-sort-item`.\n * @param {Boolean} sortDescending The selected sort order (true = descending, false = ascending).\n * @param {Array} filters The selected filters items.\n * @public\n */\n@event<ViewSettingsDialogCancelEventDetail>(\"cancel\", {\n\tdetail: {\n\t\t/**\n\t\t * @public\n\t\t */\n\t\tsortOrder: { type: String },\n\t\t/**\n\t\t * @public\n\t\t */\n\t\tsortBy: { type: String },\n\t\t/**\n\t\t * @public\n\t\t */\n\t\tsortByItem: { type: HTMLElement },\n\t\t/**\n\t\t * @public\n\t\t */\n\t\tsortDescending: { type: Boolean },\n\t\t/**\n\t\t * @public\n\t\t */\n\t\tfilters: { type: Array },\n\t},\n})\n\n/**\n * Fired before the component is opened. **This event does not bubble.**\n * @public\n */\n@event(\"before-open\")\n/**\n * Fired after the dialog is opened.\n * @since 2.0.0\n * @public\n */\n@event(\"open\")\n/**\n * Fired after the dialog is closed.\n * @since 2.0.0\n * @public\n */\n@event(\"close\")\nclass ViewSettingsDialog extends UI5Element {\n\t/**\n\t * Defines the initial sort order.\n\t * @default false\n\t * @public\n\t */\n\t@property({ type: Boolean })\n\tsortDescending = false;\n\n\t/**\n\t * Indicates if the dialog is open.\n\t * @public\n\t * @default false\n\t * @since 2.0.0\n\t */\n\t@property({ type: Boolean })\n\topen = false;\n\n\t/**\n\t * Keeps recently focused list in order to focus it on next dialog open.\n\t * @private\n\t */\n\t@property({ type: Object })\n\t_recentlyFocused?: List;\n\n\t/**\n\t * Stores current settings of the dialog.\n\t * @private\n\t */\n\t@property({ type: Object })\n\t_currentSettings: VSDInternalSettings = {\n\t\tsortOrder: [],\n\t\tsortBy: [],\n\t\tfilters: [],\n\t};\n\n\t/**\n\t * Stores settings of the dialog before the initial open.\n\t * @private\n\t */\n\t@property({ type: Object })\n\t_initialSettings: VSDInternalSettings = this._currentSettings;\n\n\t/**\n\t * Stores settings of the dialog after confirmation.\n\t * @private\n\t */\n\t@property({ type: Object })\n\t_confirmedSettings: VSDInternalSettings = this._currentSettings;\n\n\t/**\n\t * Defnies the current mode of the component.\n\t * @since 1.0.0-rc.16\n\t * @private\n\t */\n\t@property()\n\t_currentMode: `${ViewSettingsDialogMode}` = \"Sort\";\n\n\t/**\n\t * When in Filter By mode, defines whether we need to show the list of keys, or the list with values.\n\t * @since 1.0.0-rc.16\n\t * @private\n\t */\n\t@property({ type: Boolean, noAttribute: true })\n\t_filterStepTwo = false;\n\n\t/**\n\t * Defines the list of items against which the user could sort data.\n\t *\n\t * **Note:** If you want to use this slot, you need to import used item: `import \"@ui5/webcomponents-fiori/dist/SortItem.js\";`\n\t * @public\n\t */\n\t@slot()\n\tsortItems!: Array<SortItem>\n\n\t/**\n\t * Defines the `filterItems` list.\n\t *\n\t * **Note:** If you want to use this slot, you need to import used item: `import \"@ui5/webcomponents-fiori/dist/FilterItem.js\";`\n\t * @public\n\t */\n\t@slot()\n\tfilterItems!: Array<FilterItem>;\n\n\t_dialog?: Dialog;\n\t_sortOrder?: List;\n\t_sortBy?: List;\n\n\tstatic i18nBundle: I18nBundle;\n\n\tonBeforeRendering() {\n\t\tif (this._currentSettings.filters && this._currentSettings.filters.length) {\n\t\t\tthis._setAdditionalTexts();\n\t\t}\n\n\t\tif (!this.shouldBuildSort && this.shouldBuildFilter) {\n\t\t\tthis._currentMode = ViewSettingsDialogMode.Filter;\n\t\t}\n\t}\n\n\tonInvalidation(changeInfo: ChangeInfo) {\n\t\tif (changeInfo.type === \"slot\") {\n\t\t\tthis._confirmedSettings = this._settings;\n\t\t}\n\t}\n\n\t_setAdditionalTexts() {\n\t\t// Add the additional text to the filter options\n\t\tthis.filterItems.forEach((filter, index) => {\n\t\t\tlet selectedCount = 0;\n\t\t\tfor (let i = 0; i < filter.values.length; i++) {\n\t\t\t\tif (this._currentSettings.filters[index].filterOptions[i].selected) {\n\t\t\t\t\tselectedCount++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfilter.additionalText = !selectedCount ? \"\" : `${selectedCount}`;\n\t\t});\n\t}\n\n\tstatic async onDefine() {\n\t\tViewSettingsDialog.i18nBundle = await getI18nBundle(\"@ui5/webcomponents-fiori\");\n\t}\n\n\tget _selectedFilter() {\n\t\tfor (let i = 0; i < this._currentSettings.filters.length; i++) {\n\t\t\tif (this._currentSettings.filters[i].selected) {\n\t\t\t\treturn this._currentSettings.filters[i];\n\t\t\t}\n\t\t}\n\t}\n\n\tget shouldBuildSort() {\n\t\treturn !!this.sortItems.length;\n\t}\n\n\tget shouldBuildFilter() {\n\t\treturn !!this.filterItems.length;\n\t}\n\n\tget hasPagination() {\n\t\treturn this.shouldBuildSort && this.shouldBuildFilter;\n\t}\n\n\tget _filterByTitle() {\n\t\tconst selectedFilterText = this._selectedFilter ? this._selectedFilter.text : \"\";\n\t\treturn `${ViewSettingsDialog.i18nBundle.getText(VSD_FILTER_BY)}: ${selectedFilterText}`;\n\t}\n\n\tget _dialogTitle() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_DIALOG_TITLE_SORT);\n\t}\n\n\tget _okButtonLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_SUBMIT_BUTTON);\n\t}\n\n\tget _cancelButtonLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_CANCEL_BUTTON);\n\t}\n\n\tget _resetButtonLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_RESET_BUTTON);\n\t}\n\n\tget _ascendingLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_ORDER_ASCENDING);\n\t}\n\n\tget _descendingLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_ORDER_DESCENDING);\n\t}\n\n\tget _sortOrderLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_SORT_ORDER);\n\t}\n\n\tget _filterByLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_FILTER_BY);\n\t}\n\n\tget _sortByLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_SORT_BY);\n\t}\n\n\tget _isPhone() {\n\t\treturn isPhone();\n\t}\n\n\tget _sortAscending() {\n\t\treturn !this.sortDescending;\n\t}\n\n\tget _title() {\n\t\treturn this.showBackButton\n\t\t\t? this._filterByTitle\n\t\t\t: this._dialogTitle;\n\t}\n\n\t/**\n\t * Determines disabled state of the `Reset` button.\n\t */\n\tget _disableResetButton() {\n\t\treturn this._dialog && this._sortSetttingsAreInitial && this._filteresAreInitial;\n\t}\n\n\tget _sortSetttingsAreInitial() {\n\t\tlet settingsAreInitial = true;\n\t\t[\"sortBy\", \"sortOrder\"].forEach(sortList => {\n\t\t\tthis._currentSettings[sortList as keyof VSDInternalSettings].forEach((item, index) => {\n\t\t\t\tif (item.selected !== this._initialSettings[sortList as keyof VSDInternalSettings][index].selected) {\n\t\t\t\t\tsettingsAreInitial = false;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn settingsAreInitial;\n\t}\n\n\tget _filteresAreInitial() {\n\t\tlet filtersAreInitial = true;\n\t\tthis._currentSettings.filters.forEach((filter, index) => {\n\t\t\tfor (let i = 0; i < filter.filterOptions.length; i++) {\n\t\t\t\tif (filter.filterOptions[i].selected !== this._initialSettings.filters[index].filterOptions[i].selected) {\n\t\t\t\t\tfiltersAreInitial = false;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn filtersAreInitial;\n\t}\n\n\t/**\n\t * Returns the current settings (current state of all lists).\n\t */\n\tget _settings(): VSDInternalSettings {\n\t\treturn {\n\t\t\tsortOrder: JSON.parse(JSON.stringify(this.initSortOrderItems)),\n\t\t\tsortBy: JSON.parse(JSON.stringify(this.initSortByItems)),\n\t\t\tfilters: this.filterItems.map(item => {\n\t\t\t\treturn {\n\t\t\t\t\ttext: item.text || \"\",\n\t\t\t\t\tselected: false,\n\t\t\t\t\tfilterOptions: item.values.map(optionValue => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttext: optionValue.text || \"\",\n\t\t\t\t\t\t\tselected: optionValue.selected,\n\t\t\t\t\t\t};\n\t\t\t\t\t}),\n\t\t\t\t};\n\t\t\t}),\n\t\t};\n\t}\n\n\tget initSortByItems() {\n\t\treturn this.sortItems.map((item, index) => {\n\t\t\treturn {\n\t\t\t\ttext: item.text,\n\t\t\t\tselected: item.selected,\n\t\t\t\tindex,\n\t\t\t};\n\t\t});\n\t}\n\n\tget initSortOrderItems() {\n\t\treturn [\n\t\t\t{\n\t\t\t\ttext: this._ascendingLabel,\n\t\t\t\tselected: !this.sortDescending,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttext: this._descendingLabel,\n\t\t\t\tselected: this.sortDescending,\n\t\t\t},\n\t\t];\n\t}\n\n\tget expandContent() {\n\t\treturn this._filterStepTwo || !this.hasPagination;\n\t}\n\n\tget isModeSort() {\n\t\treturn this._currentMode === ViewSettingsDialogMode.Sort;\n\t}\n\n\tget isModeFilter() {\n\t\treturn this._currentMode === ViewSettingsDialogMode.Filter;\n\t}\n\n\tget showBackButton() {\n\t\treturn this.isModeFilter && this._filterStepTwo;\n\t}\n\n\tget _sortOrderListDomRef() {\n\t\treturn this.shadowRoot!.querySelector<List>(\"[ui5-list][sort-order]\")!;\n\t}\n\n\tget _sortByList() {\n\t\treturn this.shadowRoot!.querySelector<List>(\"[ui5-list][sort-by]\")!;\n\t}\n\n\tget _dialogDomRef() {\n\t\treturn this.shadowRoot!.querySelector<Dialog>(\"[ui5-dialog]\")!;\n\t}\n\n\t/**\n\t * Shows the dialog.\n\t */\n\tbeforeDialogOpen(): void {\n\t\tif (!this._dialog) {\n\t\t\tthis._sortOrder = this._sortOrderListDomRef;\n\t\t\tthis._sortBy = this._sortByList;\n\n\t\t\t// Sorting\n\t\t\tthis._initialSettings = this._settings;\n\t\t\tthis._currentSettings = this._settings;\n\t\t\tthis._confirmedSettings = this._settings;\n\n\t\t\tthis._dialog = this._dialogDomRef;\n\t\t} else {\n\t\t\tthis._restoreSettings(this._confirmedSettings);\n\t\t}\n\n\t\tthis.fireEvent(\"before-open\", {}, true, false);\n\t}\n\n\tafterDialogOpen(): void {\n\t\tthis._dialog?.querySelector<List>(\"[ui5-list]\")?.focusFirstItem();\n\n\t\tthis._focusRecentlyUsedControl();\n\n\t\tthis.fireEvent(\"open\");\n\t}\n\n\tafterDialogClose(): void {\n\t\tthis.fireEvent(\"close\");\n\t}\n\n\t_handleModeChange(e: CustomEvent) { // use SegmentedButton event when done\n\t\tconst mode: ViewSettingsDialogMode = e.detail.selectedItems[0].getAttribute(\"mode\");\n\t\tthis._currentMode = ViewSettingsDialogMode[mode];\n\t}\n\n\t_handleFilterValueItemClick(e: CustomEvent<ListItemClickEventDetail>) {\n\t\t// Update the component state\n\t\tthis._currentSettings.filters = this._currentSettings.filters.map(filter => {\n\t\t\tif (filter.selected) {\n\t\t\t\tfilter.filterOptions.forEach(option => {\n\t\t\t\t\tif (option.text === e.detail.item.innerText) {\n\t\t\t\t\t\toption.selected = !option.selected;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn filter;\n\t\t});\n\n\t\tthis._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n\t}\n\n\t_navigateToFilters() {\n\t\tthis._filterStepTwo = false;\n\t}\n\n\t_changeCurrentFilter(e: CustomEvent<ListItemClickEventDetail>) {\n\t\tthis._filterStepTwo = true;\n\t\tthis._currentSettings.filters = this._currentSettings.filters.map(filter => {\n\t\t\tfilter.selected = filter.text === e.detail.item.innerText;\n\t\t\treturn filter;\n\t\t});\n\t}\n\n\t/**\n\t * Sets focus on recently used control within the dialog.\n\t */\n\t_focusRecentlyUsedControl() {\n\t\tif (!this._recentlyFocused || !Object.keys(this._recentlyFocused).length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst recentlyFocusedSelectedItems = this._recentlyFocused.getSelectedItems();\n\t\tif (recentlyFocusedSelectedItems.length) {\n\t\t\trecentlyFocusedSelectedItems[0].focus();\n\t\t}\n\t}\n\n\t/**\n\t * Stores current settings as confirmed and fires `confirm` event.\n\t */\n\t_confirmSettings() {\n\t\tthis.open = false;\n\t\tthis._confirmedSettings = this._currentSettings;\n\n\t\tthis.fireEvent<ViewSettingsDialogConfirmEventDetail>(\"confirm\", this.eventsParams);\n\t}\n\n\t/**\n\t * Sets current settings to recently confirmed ones and fires `cancel` event.\n\t */\n\t_cancelSettings() {\n\t\tthis._restoreSettings(this._confirmedSettings);\n\n\t\tthis.fireEvent<ViewSettingsDialogCancelEventDetail>(\"cancel\", this.eventsParams);\n\t\tthis.open = false;\n\t}\n\n\tget eventsParams() {\n\t\tconst _currentSortOrderSelected = this._currentSettings.sortOrder.filter(item => item.selected)[0],\n\t\t\t_currentSortBySelected = this._currentSettings.sortBy.filter(item => item.selected)[0],\n\t\t\tsortOrder = _currentSortOrderSelected && (_currentSortOrderSelected.text || \"\"),\n\t\t\tsortDescending = !this._currentSettings.sortOrder[0].selected,\n\t\t\tsortBy = _currentSortBySelected && (_currentSortBySelected.text || \"\"),\n\t\t\tsortByElementIndex = _currentSortBySelected && _currentSortBySelected.index,\n\t\t\tsortByItem = this.sortItems[sortByElementIndex];\n\t\treturn {\n\t\t\tsortOrder,\n\t\t\tsortDescending,\n\t\t\tsortBy,\n\t\t\tsortByItem,\n\t\t\tfilters: this.selectedFilters,\n\t\t};\n\t}\n\n\tget selectedFilters() {\n\t\tconst result: VSDFilters = [];\n\n\t\tthis._currentSettings.filters.forEach(filter => {\n\t\t\tconst selectedOptions: Array<string> = [];\n\n\t\t\tfilter.filterOptions.forEach(option => {\n\t\t\t\tif (option.selected) {\n\t\t\t\t\tselectedOptions.push(option.text || \"\");\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (selectedOptions.length) {\n\t\t\t\tresult.push({});\n\t\t\t\tresult[result.length - 1][filter.text || \"\"] = selectedOptions;\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * If the dialog is closed by [Escape] key, do the same as if the `Cancel` button is pressed.\n\t * @param evt\n\t */\n\t_restoreConfirmedOnEscape(evt: CustomEvent) { // Dialog#before-close\n\t\tif (evt.detail.escPressed) {\n\t\t\tthis._cancelSettings();\n\t\t\tthis._currentMode = ViewSettingsDialogMode.Sort;\n\t\t\tthis._filterStepTwo = false;\n\t\t}\n\t}\n\n\t/**\n\t * Resets the control settings to their initial state.\n\t */\n\t _resetSettings() {\n\t\tthis._restoreSettings(this._initialSettings);\n\t\tthis._recentlyFocused = this._sortOrder!;\n\t\tthis._focusRecentlyUsedControl();\n\t}\n\n\t/**\n\t * Sets current settings to ones passed as `settings` argument.\n\t * @param settings\n\t */\n\t_restoreSettings(settings: VSDInternalSettings) {\n\t\tthis._currentSettings = JSON.parse(JSON.stringify(settings));\n\t\tthis._currentMode = ViewSettingsDialogMode.Sort;\n\t\tthis._filterStepTwo = false;\n\t}\n\n\t/**\n\t * Stores `Sort Order` list as recently used control and its selected item in current state.\n\t */\n\t_onSortOrderChange(e: CustomEvent<ListItemClickEventDetail>) {\n\t\tthis._recentlyFocused = this._sortOrder!;\n\t\tthis._currentSettings.sortOrder = this.initSortOrderItems.map(item => {\n\t\t\titem.selected = item.text === e.detail.item.innerText;\n\t\t\treturn item;\n\t\t});\n\n\t\t// Invalidate\n\t\tthis._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n\t}\n\n\t/**\n\t * Stores `Sort By` list as recently used control and its selected item in current state.\n\t */\n\t _onSortByChange(e: CustomEvent<ListItemClickEventDetail>) {\n\t\tconst selectedItemIndex = Number(e.detail.item.getAttribute(\"data-ui5-external-action-item-index\"));\n\t\tthis._recentlyFocused = this._sortBy!;\n\t\tthis._currentSettings.sortBy = this.initSortByItems.map((item, index) => {\n\t\t\titem.selected = index === selectedItemIndex;\n\t\t\treturn item;\n\t\t});\n\t\t// Invalidate\n\t\tthis._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n\t}\n\n\t/**\n\t * Sets a JavaScript object, as settings to the `ui5-view-settings-dialog`.\n\t * This method can be used after the dialog is initially open, as the dialog needs\n\t * to set its initial settings.\n\t * The `ui5-view-settings-dialog` throws an event called \"before-open\",\n\t * which can be used as a trigger point.\n\t * The object should have the following format:\n\t * @param settings - predefined settings.\n\t * @public\n\t */\n\tsetConfirmedSettings(settings: VSDSettings): void {\n\t\tif (settings && this._dialog && !this._dialog.open) {\n\t\t\tconst tempSettings: VSDInternalSettings = JSON.parse(JSON.stringify(this._confirmedSettings));\n\t\t\tif (settings.sortOrder) {\n\t\t\t\tfor (let i = 0; i < tempSettings.sortOrder.length; i++) {\n\t\t\t\t\tif (tempSettings.sortOrder[i].text === settings.sortOrder) {\n\t\t\t\t\t\ttempSettings.sortOrder[i].selected = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttempSettings.sortOrder[i].selected = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (settings.sortBy) {\n\t\t\t\tfor (let i = 0; i < tempSettings.sortBy.length; i++) {\n\t\t\t\t\tif (tempSettings.sortBy[i].text === settings.sortBy) {\n\t\t\t\t\t\ttempSettings.sortBy[i].selected = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttempSettings.sortBy[i].selected = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (settings.filters) {\n\t\t\t\tconst inputFilters: VSDFilter = {};\n\t\t\t\tfor (let i = 0; i < settings.filters.length; i++) {\n\t\t\t\t\tinputFilters[Object.keys(settings.filters[i])[0]] = settings.filters[i][Object.keys(settings.filters[i])[0]];\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < tempSettings.filters.length; i++) {\n\t\t\t\t\tfor (let j = 0; j < tempSettings.filters[i].filterOptions.length; j++) {\n\t\t\t\t\t\tif (inputFilters[tempSettings.filters[i].text || \"\"] && inputFilters[tempSettings.filters[i].text || \"\"].indexOf(tempSettings.filters[i].filterOptions[j].text || \"\") > -1) {\n\t\t\t\t\t\t\ttempSettings.filters[i].filterOptions[j].selected = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttempSettings.filters[i].filterOptions[j].selected = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._confirmedSettings = JSON.parse(JSON.stringify(tempSettings));\n\t\t}\n\t}\n}\n\nViewSettingsDialog.define();\n\nexport default ViewSettingsDialog;\nexport type {\n\tViewSettingsDialogConfirmEventDetail,\n\tViewSettingsDialogCancelEventDetail,\n\tVSDSettings,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}