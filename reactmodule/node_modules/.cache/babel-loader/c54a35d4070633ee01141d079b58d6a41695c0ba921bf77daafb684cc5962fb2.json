{"ast":null,"code":"/**\n * Static collection of utility functions to handle time zone related conversions\n *\n * @author SAP SE\n * @version 1.120.17\n * @namespace\n * @alias module:sap/base/i18n/date/TimezoneUtils\n * @private\n * @ui5-restricted sap.ui.core.Configuration, sap/base/i18n/format/DateFormat\n */ /*!\n     * OpenUI5\n     * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n     * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n     */\n\nvar TimezoneUtils = {};\n\n/**\n * Cache for the (browser's) local IANA timezone ID\n *\n * @type {string}\n */\nvar sLocalTimezone = \"\";\n\n/**\n * Cache for valid time zones provided by <code>Intl.supportedValuesOf(\"timeZone\")</code>\n *\n * @type {Array}\n */\nvar aSupportedTimezoneIDs;\n\n/**\n * Cache for Intl.DateTimeFormat instances\n */\nvar oIntlDateTimeFormatCache = {\n  _oCache: new Map(),\n  /**\n   * When cache limit is reached, it gets cleared\n   */\n  _iCacheLimit: 10,\n  /**\n   * Creates or gets an instance of Intl.DateTimeFormat.\n   *\n   * @param {string} sTimezone IANA timezone ID\n   * @returns {Intl.DateTimeFormat} Intl.DateTimeFormat instance\n   */\n  get: function (sTimezone) {\n    var cacheEntry = this._oCache.get(sTimezone);\n    if (cacheEntry) {\n      return cacheEntry;\n    }\n    var oOptions = {\n      hourCycle: \"h23\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      fractionalSecondDigits: 3,\n      day: \"2-digit\",\n      month: \"2-digit\",\n      year: \"numeric\",\n      timeZone: sTimezone,\n      timeZoneName: 'short',\n      era: 'narrow',\n      weekday: \"short\"\n    };\n    var oInstance = new Intl.DateTimeFormat(\"en-US\", oOptions);\n\n    // only store a limited number of entries in the cache\n    if (this._oCache.size === this._iCacheLimit) {\n      this._oCache = new Map();\n    }\n    this._oCache.set(sTimezone, oInstance);\n    return oInstance;\n  }\n};\n\n/**\n * Uses the <code>Intl.supportedValuesOf('timeZone')</code> and <code>Intl.DateTimeFormat</code>\n * API to check if the browser can handle the given IANA timezone ID.\n * <code>Intl.supportedValuesOf('timeZone')</code> offers direct access to the list of supported\n * time zones. It is not yet supported by all browsers but if it is supported and the given time\n * zone is in the list it is faster than probing.\n *\n * <code>Intl.supportedValuesOf('timeZone')</code> does not return all IANA timezone IDs which\n * the <code>Intl.DateTimeFormat</code> can handle, e.g. \"Japan\", \"Etc/UTC\".\n *\n * @param {string} sTimezone The IANA timezone ID which is checked, e.g <code>\"Europe/Berlin\"</code>\n * @returns {boolean} Whether the time zone is a valid IANA timezone ID\n * @private\n * @ui5-restricted sap.ui.core.Configuration, sap.ui.core.format.DateFormat\n */\nTimezoneUtils.isValidTimezone = function (sTimezone) {\n  if (!sTimezone) {\n    return false;\n  }\n  if (Intl.supportedValuesOf) {\n    try {\n      aSupportedTimezoneIDs = aSupportedTimezoneIDs || Intl.supportedValuesOf('timeZone');\n      if (aSupportedTimezoneIDs.includes(sTimezone)) {\n        return true;\n      }\n      // although not contained in the supportedValues it still can be valid, therefore continue\n    } catch (oError) {\n      // ignore error\n      aSupportedTimezoneIDs = [];\n    }\n  }\n  try {\n    oIntlDateTimeFormatCache.get(sTimezone);\n    return true;\n  } catch (oError) {\n    return false;\n  }\n};\n\n/**\n * Converts a date to a specific time zone.\n * The resulting date reflects the given time zone such that the \"UTC\" Date methods\n * can be used, e.g. Date#getUTCHours() to display the hours in the given time zone.\n *\n * @example\n * var oDate = new Date(\"2021-10-13T15:22:33Z\"); // UTC\n * // time zone difference UTC-4 (DST)\n * TimezoneUtils.convertToTimezone(oDate, \"America/New_York\");\n * // result is:\n * // 2021-10-13 11:22:33 in America/New_York\n * // same as new Date(\"2021-10-13T11:22:33Z\"); // UTC\n *\n * @param {Date} oDate The date which should be converted.\n * @param {string} sTargetTimezone The target IANA timezone ID, e.g <code>\"Europe/Berlin\"</code>\n * @returns {Date} The new date in the target time zone.\n * @private\n * @ui5-restricted sap.ui.core.format.DateFormat, sap.ui.unified, sap.m\n */\nTimezoneUtils.convertToTimezone = function (oDate, sTargetTimezone) {\n  var oFormatParts = this._getParts(oDate, sTargetTimezone);\n  return TimezoneUtils._getDateFromParts(oFormatParts);\n};\n\n/**\n * Uses the <code>Intl.DateTimeFormat</code> API to convert a date to a specific time zone.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts\n * @param {Date} oDate The date which should be converted.\n * @param {string} sTargetTimezone The target IANA timezone ID, e.g <code>\"Europe/Berlin\"</code>\n * @returns {{\n *     day: string,\n *     era: string,\n *     fractionalSecond: string,\n *     hour: string,\n *     minute: string,\n *     month: string,\n *     second: string,\n *     timeZoneName: string,\n *     weekday: string,\n *     year: string\n * }} An object containing the date and time fields considering the target time zone.\n * @private\n */\nTimezoneUtils._getParts = function (oDate, sTargetTimezone) {\n  var sKey,\n    oPart,\n    oDateParts = Object.create(null),\n    oIntlDate = oIntlDateTimeFormatCache.get(sTargetTimezone),\n    // clone the date object before passing it to the Intl API, to ensure that no\n    // UniversalDate gets passed to it;\n    // no need to use UI5Date.getInstance as only the UTC timestamp is used\n    oParts = oIntlDate.formatToParts(new Date(oDate.getTime()));\n  for (sKey in oParts) {\n    oPart = oParts[sKey];\n    if (oPart.type !== \"literal\") {\n      oDateParts[oPart.type] = oPart.value;\n    }\n  }\n  return oDateParts;\n};\n\n/**\n * Creates a Date from the provided date parts.\n *\n * @param {object} oParts Separated date and time fields as object, see {@link #_getParts}.\n * @returns {Date} Returns the date object created from the provided parts.\n * @private\n */\nTimezoneUtils._getDateFromParts = function (oParts) {\n  // no need to use UI5Date.getInstance as only the UTC timestamp is used\n  var oDate = new Date(0),\n    iUTCYear = parseInt(oParts.year);\n  if (oParts.era === \"B\") {\n    // The JS Date uses astronomical year numbering which supports year zero and negative\n    // year numbers.\n    // The Intl.DateTimeFormat API uses eras (no year zero and no negative year numbers).\n    // years around zero overview:\n    // | Astronomical | In Era\n    // |            2 | 2 Anno Domini (era: \"A\")\n    // |            1 | 1 Anno Domini (era: \"A\")\n    // |            0 | 1 Before Christ (era: \"B\")\n    // |           -1 | 2 Before Christ (era: \"B\")\n    // |           -2 | 3 Before Christ (era: \"B\")\n    // For the conversion to the JS Date the parts returned by the Intl.DateTimeFormat API\n    // need to be adapted.\n    iUTCYear = iUTCYear * -1 + 1;\n  }\n\n  // Date.UTC cannot be used here to be able to support dates before the UNIX epoch\n  oDate.setUTCFullYear(iUTCYear, parseInt(oParts.month) - 1, parseInt(oParts.day));\n  oDate.setUTCHours(parseInt(oParts.hour), parseInt(oParts.minute), parseInt(oParts.second), parseInt(oParts.fractionalSecond || 0)); // some older browsers don't support fractionalSecond, e.g. Safari < 14.1 */\n\n  return oDate;\n};\n\n/**\n * Gets the offset to UTC in seconds for a given date in the time zone specified.\n *\n * For non-unique points in time, the daylight saving time takes precedence over the standard\n * time shortly after the switch back (e.g. clock gets set back 1 hour, duplicate hour).\n *\n * @example\n * var oDate = new Date(\"2021-10-13T13:22:33Z\");\n * TimezoneUtils.calculateOffset(oDate, \"America/New_York\");\n * // => +14400 seconds (4 * 60 * 60 seconds)\n *\n * TimezoneUtils.calculateOffset(oDate, \"Europe/Berlin\");\n * // => -7200 seconds (-2 * 60 * 60 seconds)\n *\n * // daylight saving time (2018 Sun, 25 Mar, 02:00\tCET â†’ CEST\t+1 hour (DST start)\tUTC+2h)\n * // the given date is taken as it is in the time zone\n * TimezoneUtils.calculateOffset(new Date(\"2018-03-25T00:00:00Z\"), \"Europe/Berlin\");\n * // => -3600 seconds (-1 * 60 * 60 seconds), interpreted as: 2018-03-25 00:00:00 (CET)\n *\n * TimezoneUtils.calculateOffset(new Date(\"2018-03-25T03:00:00Z\"), \"Europe/Berlin\");\n * // => -7200 seconds (-2 * 60 * 60 seconds)\n *\n * var oHistoricalDate = new Date(\"1800-10-13T13:22:33Z\");\n * TimezoneUtils.calculateOffset(oHistoricalDate, \"Europe/Berlin\");\n * // => -3208 seconds (-3208 seconds)\n *\n * @param {Date} oDate The date in the time zone used to calculate the offset to UTC.\n * @param {string} sTimezoneSource The source IANA timezone ID, e.g <code>\"Europe/Berlin\"</code>\n * @returns {number} The difference to UTC between the date in the time zone.\n * @private\n * @ui5-restricted sap.ui.core.format.DateFormat\n */\nTimezoneUtils.calculateOffset = function (oDate, sTimezoneSource) {\n  const oDateInTimezone = TimezoneUtils.convertToTimezone(oDate, sTimezoneSource);\n  const iGivenTimestamp = oDate.getTime();\n  const iInitialOffset = iGivenTimestamp - oDateInTimezone.getTime();\n  // no need to use UI5Date.getInstance as only the UTC timestamp is used\n  const oFirstGuess = new Date(iGivenTimestamp + iInitialOffset);\n  const oFirstGuessInTimezone = TimezoneUtils.convertToTimezone(oFirstGuess, sTimezoneSource);\n  const iFirstGuessInTimezoneTimestamp = oFirstGuessInTimezone.getTime();\n  const iSecondOffset = oFirstGuess.getTime() - iFirstGuessInTimezoneTimestamp;\n  let iTimezoneOffset = iSecondOffset;\n  if (iInitialOffset !== iSecondOffset) {\n    const oSecondGuess = new Date(iGivenTimestamp + iSecondOffset);\n    const oSecondGuessInTimezone = TimezoneUtils.convertToTimezone(oSecondGuess, sTimezoneSource);\n    const iSecondGuessInTimezoneTimestamp = oSecondGuessInTimezone.getTime();\n    // if time is different, the given date/time does not exist in the target time zone (switch to Daylight\n    // Saving Time) -> take the offset for the greater date\n    if (iSecondGuessInTimezoneTimestamp !== iGivenTimestamp && iFirstGuessInTimezoneTimestamp > iSecondGuessInTimezoneTimestamp) {\n      iTimezoneOffset = iInitialOffset;\n    }\n  }\n  return iTimezoneOffset / 1000;\n};\n\n/**\n * Map outdated IANA timezone IDs used in CLDR to correct and up-to-date IANA IDs as maintained in ABAP systems.\n *\n * @private\n\t */\nTimezoneUtils.mCLDR2ABAPTimezones = {\n  \"America/Buenos_Aires\": \"America/Argentina/Buenos_Aires\",\n  \"America/Catamarca\": \"America/Argentina/Catamarca\",\n  \"America/Cordoba\": \"America/Argentina/Cordoba\",\n  \"America/Jujuy\": \"America/Argentina/Jujuy\",\n  \"America/Mendoza\": \"America/Argentina/Mendoza\",\n  \"America/Indianapolis\": \"America/Indiana/Indianapolis\",\n  \"America/Louisville\": \"America/Kentucky/Louisville\",\n  \"Africa/Asmera\": \"Africa/Asmara\",\n  \"Asia/Katmandu\": \"Asia/Kathmandu\",\n  \"Asia/Calcutta\": \"Asia/Kolkata\",\n  \"Atlantic/Faeroe\": \"Atlantic/Faroe\",\n  \"Pacific/Ponape\": \"Pacific/Pohnpei\",\n  \"Asia/Rangoon\": \"Asia/Yangon\",\n  \"Pacific/Truk\": \"Pacific/Chuuk\",\n  \"America/Godthab\": \"America/Nuuk\",\n  \"Asia/Saigon\": \"Asia/Ho_Chi_Minh\",\n  \"America/Coral_Harbour\": \"America/Atikokan\"\n};\n\n/**\n * Retrieves the browser's local IANA timezone ID; if the browser's timezone ID is not the up-to-date IANA\n * timezone ID, the corresponding IANA timezone ID is returned.\n *\n * @returns {string} The local IANA timezone ID of the browser as up-to-date IANA timezone ID,\n *   e.g. <code>\"Europe/Berlin\"</code> or <code>\"Asia/Kolkata\"</code>\n *\n * @private\n * @ui5-restricted sap.ui.core.Configuration,sap.m.DateTimeField\n */\nTimezoneUtils.getLocalTimezone = function () {\n  if (sLocalTimezone === \"\") {\n    // timezone may be undefined, only value \"\" means empty cache\n    sLocalTimezone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    sLocalTimezone = TimezoneUtils.mCLDR2ABAPTimezones[sLocalTimezone] || sLocalTimezone;\n  }\n  return sLocalTimezone;\n};\n\n/**\n * Clears the cache for the browser's local IANA timezone ID.\n *\n * @private\n */\nTimezoneUtils._clearLocalTimezoneCache = function () {\n  sLocalTimezone = \"\";\n};\nexport default TimezoneUtils;","map":{"version":3,"names":["TimezoneUtils","sLocalTimezone","aSupportedTimezoneIDs","oIntlDateTimeFormatCache","_oCache","Map","_iCacheLimit","get","sTimezone","cacheEntry","oOptions","hourCycle","hour","minute","second","fractionalSecondDigits","day","month","year","timeZone","timeZoneName","era","weekday","oInstance","Intl","DateTimeFormat","size","set","isValidTimezone","supportedValuesOf","includes","oError","convertToTimezone","oDate","sTargetTimezone","oFormatParts","_getParts","_getDateFromParts","sKey","oPart","oDateParts","Object","create","oIntlDate","oParts","formatToParts","Date","getTime","type","value","iUTCYear","parseInt","setUTCFullYear","setUTCHours","fractionalSecond","calculateOffset","sTimezoneSource","oDateInTimezone","iGivenTimestamp","iInitialOffset","oFirstGuess","oFirstGuessInTimezone","iFirstGuessInTimezoneTimestamp","iSecondOffset","iTimezoneOffset","oSecondGuess","oSecondGuessInTimezone","iSecondGuessInTimezoneTimestamp","mCLDR2ABAPTimezones","getLocalTimezone","resolvedOptions","_clearLocalTimezoneCache"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-localization/dist/sap/base/i18n/date/TimezoneUtils.js"],"sourcesContent":["/**\n * Static collection of utility functions to handle time zone related conversions\n *\n * @author SAP SE\n * @version 1.120.17\n * @namespace\n * @alias module:sap/base/i18n/date/TimezoneUtils\n * @private\n * @ui5-restricted sap.ui.core.Configuration, sap/base/i18n/format/DateFormat\n */ /*!\n     * OpenUI5\n     * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n     * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n     */\n\nvar TimezoneUtils = {};\n\n/**\n * Cache for the (browser's) local IANA timezone ID\n *\n * @type {string}\n */\nvar sLocalTimezone = \"\";\n\n/**\n * Cache for valid time zones provided by <code>Intl.supportedValuesOf(\"timeZone\")</code>\n *\n * @type {Array}\n */\nvar aSupportedTimezoneIDs;\n\n/**\n * Cache for Intl.DateTimeFormat instances\n */\nvar oIntlDateTimeFormatCache = {\n  _oCache: new Map(),\n  /**\n   * When cache limit is reached, it gets cleared\n   */\n  _iCacheLimit: 10,\n  /**\n   * Creates or gets an instance of Intl.DateTimeFormat.\n   *\n   * @param {string} sTimezone IANA timezone ID\n   * @returns {Intl.DateTimeFormat} Intl.DateTimeFormat instance\n   */\n  get: function (sTimezone) {\n    var cacheEntry = this._oCache.get(sTimezone);\n    if (cacheEntry) {\n      return cacheEntry;\n    }\n    var oOptions = {\n      hourCycle: \"h23\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      fractionalSecondDigits: 3,\n      day: \"2-digit\",\n      month: \"2-digit\",\n      year: \"numeric\",\n      timeZone: sTimezone,\n      timeZoneName: 'short',\n      era: 'narrow',\n      weekday: \"short\"\n    };\n    var oInstance = new Intl.DateTimeFormat(\"en-US\", oOptions);\n\n    // only store a limited number of entries in the cache\n    if (this._oCache.size === this._iCacheLimit) {\n      this._oCache = new Map();\n    }\n    this._oCache.set(sTimezone, oInstance);\n    return oInstance;\n  }\n};\n\n/**\n * Uses the <code>Intl.supportedValuesOf('timeZone')</code> and <code>Intl.DateTimeFormat</code>\n * API to check if the browser can handle the given IANA timezone ID.\n * <code>Intl.supportedValuesOf('timeZone')</code> offers direct access to the list of supported\n * time zones. It is not yet supported by all browsers but if it is supported and the given time\n * zone is in the list it is faster than probing.\n *\n * <code>Intl.supportedValuesOf('timeZone')</code> does not return all IANA timezone IDs which\n * the <code>Intl.DateTimeFormat</code> can handle, e.g. \"Japan\", \"Etc/UTC\".\n *\n * @param {string} sTimezone The IANA timezone ID which is checked, e.g <code>\"Europe/Berlin\"</code>\n * @returns {boolean} Whether the time zone is a valid IANA timezone ID\n * @private\n * @ui5-restricted sap.ui.core.Configuration, sap.ui.core.format.DateFormat\n */\nTimezoneUtils.isValidTimezone = function (sTimezone) {\n  if (!sTimezone) {\n    return false;\n  }\n  if (Intl.supportedValuesOf) {\n    try {\n      aSupportedTimezoneIDs = aSupportedTimezoneIDs || Intl.supportedValuesOf('timeZone');\n      if (aSupportedTimezoneIDs.includes(sTimezone)) {\n        return true;\n      }\n      // although not contained in the supportedValues it still can be valid, therefore continue\n    } catch (oError) {\n      // ignore error\n      aSupportedTimezoneIDs = [];\n    }\n  }\n  try {\n    oIntlDateTimeFormatCache.get(sTimezone);\n    return true;\n  } catch (oError) {\n    return false;\n  }\n};\n\n/**\n * Converts a date to a specific time zone.\n * The resulting date reflects the given time zone such that the \"UTC\" Date methods\n * can be used, e.g. Date#getUTCHours() to display the hours in the given time zone.\n *\n * @example\n * var oDate = new Date(\"2021-10-13T15:22:33Z\"); // UTC\n * // time zone difference UTC-4 (DST)\n * TimezoneUtils.convertToTimezone(oDate, \"America/New_York\");\n * // result is:\n * // 2021-10-13 11:22:33 in America/New_York\n * // same as new Date(\"2021-10-13T11:22:33Z\"); // UTC\n *\n * @param {Date} oDate The date which should be converted.\n * @param {string} sTargetTimezone The target IANA timezone ID, e.g <code>\"Europe/Berlin\"</code>\n * @returns {Date} The new date in the target time zone.\n * @private\n * @ui5-restricted sap.ui.core.format.DateFormat, sap.ui.unified, sap.m\n */\nTimezoneUtils.convertToTimezone = function (oDate, sTargetTimezone) {\n  var oFormatParts = this._getParts(oDate, sTargetTimezone);\n  return TimezoneUtils._getDateFromParts(oFormatParts);\n};\n\n/**\n * Uses the <code>Intl.DateTimeFormat</code> API to convert a date to a specific time zone.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts\n * @param {Date} oDate The date which should be converted.\n * @param {string} sTargetTimezone The target IANA timezone ID, e.g <code>\"Europe/Berlin\"</code>\n * @returns {{\n *     day: string,\n *     era: string,\n *     fractionalSecond: string,\n *     hour: string,\n *     minute: string,\n *     month: string,\n *     second: string,\n *     timeZoneName: string,\n *     weekday: string,\n *     year: string\n * }} An object containing the date and time fields considering the target time zone.\n * @private\n */\nTimezoneUtils._getParts = function (oDate, sTargetTimezone) {\n  var sKey,\n    oPart,\n    oDateParts = Object.create(null),\n    oIntlDate = oIntlDateTimeFormatCache.get(sTargetTimezone),\n    // clone the date object before passing it to the Intl API, to ensure that no\n    // UniversalDate gets passed to it;\n    // no need to use UI5Date.getInstance as only the UTC timestamp is used\n    oParts = oIntlDate.formatToParts(new Date(oDate.getTime()));\n  for (sKey in oParts) {\n    oPart = oParts[sKey];\n    if (oPart.type !== \"literal\") {\n      oDateParts[oPart.type] = oPart.value;\n    }\n  }\n  return oDateParts;\n};\n\n/**\n * Creates a Date from the provided date parts.\n *\n * @param {object} oParts Separated date and time fields as object, see {@link #_getParts}.\n * @returns {Date} Returns the date object created from the provided parts.\n * @private\n */\nTimezoneUtils._getDateFromParts = function (oParts) {\n  // no need to use UI5Date.getInstance as only the UTC timestamp is used\n  var oDate = new Date(0),\n    iUTCYear = parseInt(oParts.year);\n  if (oParts.era === \"B\") {\n    // The JS Date uses astronomical year numbering which supports year zero and negative\n    // year numbers.\n    // The Intl.DateTimeFormat API uses eras (no year zero and no negative year numbers).\n    // years around zero overview:\n    // | Astronomical | In Era\n    // |            2 | 2 Anno Domini (era: \"A\")\n    // |            1 | 1 Anno Domini (era: \"A\")\n    // |            0 | 1 Before Christ (era: \"B\")\n    // |           -1 | 2 Before Christ (era: \"B\")\n    // |           -2 | 3 Before Christ (era: \"B\")\n    // For the conversion to the JS Date the parts returned by the Intl.DateTimeFormat API\n    // need to be adapted.\n    iUTCYear = iUTCYear * -1 + 1;\n  }\n\n  // Date.UTC cannot be used here to be able to support dates before the UNIX epoch\n  oDate.setUTCFullYear(iUTCYear, parseInt(oParts.month) - 1, parseInt(oParts.day));\n  oDate.setUTCHours(parseInt(oParts.hour), parseInt(oParts.minute), parseInt(oParts.second), parseInt(oParts.fractionalSecond || 0)); // some older browsers don't support fractionalSecond, e.g. Safari < 14.1 */\n\n  return oDate;\n};\n\n/**\n * Gets the offset to UTC in seconds for a given date in the time zone specified.\n *\n * For non-unique points in time, the daylight saving time takes precedence over the standard\n * time shortly after the switch back (e.g. clock gets set back 1 hour, duplicate hour).\n *\n * @example\n * var oDate = new Date(\"2021-10-13T13:22:33Z\");\n * TimezoneUtils.calculateOffset(oDate, \"America/New_York\");\n * // => +14400 seconds (4 * 60 * 60 seconds)\n *\n * TimezoneUtils.calculateOffset(oDate, \"Europe/Berlin\");\n * // => -7200 seconds (-2 * 60 * 60 seconds)\n *\n * // daylight saving time (2018 Sun, 25 Mar, 02:00\tCET â†’ CEST\t+1 hour (DST start)\tUTC+2h)\n * // the given date is taken as it is in the time zone\n * TimezoneUtils.calculateOffset(new Date(\"2018-03-25T00:00:00Z\"), \"Europe/Berlin\");\n * // => -3600 seconds (-1 * 60 * 60 seconds), interpreted as: 2018-03-25 00:00:00 (CET)\n *\n * TimezoneUtils.calculateOffset(new Date(\"2018-03-25T03:00:00Z\"), \"Europe/Berlin\");\n * // => -7200 seconds (-2 * 60 * 60 seconds)\n *\n * var oHistoricalDate = new Date(\"1800-10-13T13:22:33Z\");\n * TimezoneUtils.calculateOffset(oHistoricalDate, \"Europe/Berlin\");\n * // => -3208 seconds (-3208 seconds)\n *\n * @param {Date} oDate The date in the time zone used to calculate the offset to UTC.\n * @param {string} sTimezoneSource The source IANA timezone ID, e.g <code>\"Europe/Berlin\"</code>\n * @returns {number} The difference to UTC between the date in the time zone.\n * @private\n * @ui5-restricted sap.ui.core.format.DateFormat\n */\nTimezoneUtils.calculateOffset = function (oDate, sTimezoneSource) {\n  const oDateInTimezone = TimezoneUtils.convertToTimezone(oDate, sTimezoneSource);\n  const iGivenTimestamp = oDate.getTime();\n  const iInitialOffset = iGivenTimestamp - oDateInTimezone.getTime();\n  // no need to use UI5Date.getInstance as only the UTC timestamp is used\n  const oFirstGuess = new Date(iGivenTimestamp + iInitialOffset);\n  const oFirstGuessInTimezone = TimezoneUtils.convertToTimezone(oFirstGuess, sTimezoneSource);\n  const iFirstGuessInTimezoneTimestamp = oFirstGuessInTimezone.getTime();\n  const iSecondOffset = oFirstGuess.getTime() - iFirstGuessInTimezoneTimestamp;\n  let iTimezoneOffset = iSecondOffset;\n  if (iInitialOffset !== iSecondOffset) {\n    const oSecondGuess = new Date(iGivenTimestamp + iSecondOffset);\n    const oSecondGuessInTimezone = TimezoneUtils.convertToTimezone(oSecondGuess, sTimezoneSource);\n    const iSecondGuessInTimezoneTimestamp = oSecondGuessInTimezone.getTime();\n    // if time is different, the given date/time does not exist in the target time zone (switch to Daylight\n    // Saving Time) -> take the offset for the greater date\n    if (iSecondGuessInTimezoneTimestamp !== iGivenTimestamp && iFirstGuessInTimezoneTimestamp > iSecondGuessInTimezoneTimestamp) {\n      iTimezoneOffset = iInitialOffset;\n    }\n  }\n  return iTimezoneOffset / 1000;\n};\n\n/**\n * Map outdated IANA timezone IDs used in CLDR to correct and up-to-date IANA IDs as maintained in ABAP systems.\n *\n * @private\n\t */\nTimezoneUtils.mCLDR2ABAPTimezones = {\n  \"America/Buenos_Aires\": \"America/Argentina/Buenos_Aires\",\n  \"America/Catamarca\": \"America/Argentina/Catamarca\",\n  \"America/Cordoba\": \"America/Argentina/Cordoba\",\n  \"America/Jujuy\": \"America/Argentina/Jujuy\",\n  \"America/Mendoza\": \"America/Argentina/Mendoza\",\n  \"America/Indianapolis\": \"America/Indiana/Indianapolis\",\n  \"America/Louisville\": \"America/Kentucky/Louisville\",\n  \"Africa/Asmera\": \"Africa/Asmara\",\n  \"Asia/Katmandu\": \"Asia/Kathmandu\",\n  \"Asia/Calcutta\": \"Asia/Kolkata\",\n  \"Atlantic/Faeroe\": \"Atlantic/Faroe\",\n  \"Pacific/Ponape\": \"Pacific/Pohnpei\",\n  \"Asia/Rangoon\": \"Asia/Yangon\",\n  \"Pacific/Truk\": \"Pacific/Chuuk\",\n  \"America/Godthab\": \"America/Nuuk\",\n  \"Asia/Saigon\": \"Asia/Ho_Chi_Minh\",\n  \"America/Coral_Harbour\": \"America/Atikokan\"\n};\n\n/**\n * Retrieves the browser's local IANA timezone ID; if the browser's timezone ID is not the up-to-date IANA\n * timezone ID, the corresponding IANA timezone ID is returned.\n *\n * @returns {string} The local IANA timezone ID of the browser as up-to-date IANA timezone ID,\n *   e.g. <code>\"Europe/Berlin\"</code> or <code>\"Asia/Kolkata\"</code>\n *\n * @private\n * @ui5-restricted sap.ui.core.Configuration,sap.m.DateTimeField\n */\nTimezoneUtils.getLocalTimezone = function () {\n  if (sLocalTimezone === \"\") {\n    // timezone may be undefined, only value \"\" means empty cache\n    sLocalTimezone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    sLocalTimezone = TimezoneUtils.mCLDR2ABAPTimezones[sLocalTimezone] || sLocalTimezone;\n  }\n  return sLocalTimezone;\n};\n\n/**\n * Clears the cache for the browser's local IANA timezone ID.\n *\n * @private\n */\nTimezoneUtils._clearLocalTimezoneCache = function () {\n  sLocalTimezone = \"\";\n};\nexport default TimezoneUtils;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GATA,CASI;AACJ;AACA;AACA;AACA;;AAEA,IAAIA,aAAa,GAAG,CAAC,CAAC;;AAEtB;AACA;AACA;AACA;AACA;AACA,IAAIC,cAAc,GAAG,EAAE;;AAEvB;AACA;AACA;AACA;AACA;AACA,IAAIC,qBAAqB;;AAEzB;AACA;AACA;AACA,IAAIC,wBAAwB,GAAG;EAC7BC,OAAO,EAAE,IAAIC,GAAG,CAAC,CAAC;EAClB;AACF;AACA;EACEC,YAAY,EAAE,EAAE;EAChB;AACF;AACA;AACA;AACA;AACA;EACEC,GAAG,EAAE,SAAAA,CAAUC,SAAS,EAAE;IACxB,IAAIC,UAAU,GAAG,IAAI,CAACL,OAAO,CAACG,GAAG,CAACC,SAAS,CAAC;IAC5C,IAAIC,UAAU,EAAE;MACd,OAAOA,UAAU;IACnB;IACA,IAAIC,QAAQ,GAAG;MACbC,SAAS,EAAE,KAAK;MAChBC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE,SAAS;MACjBC,MAAM,EAAE,SAAS;MACjBC,sBAAsB,EAAE,CAAC;MACzBC,GAAG,EAAE,SAAS;MACdC,KAAK,EAAE,SAAS;MAChBC,IAAI,EAAE,SAAS;MACfC,QAAQ,EAAEX,SAAS;MACnBY,YAAY,EAAE,OAAO;MACrBC,GAAG,EAAE,QAAQ;MACbC,OAAO,EAAE;IACX,CAAC;IACD,IAAIC,SAAS,GAAG,IAAIC,IAAI,CAACC,cAAc,CAAC,OAAO,EAAEf,QAAQ,CAAC;;IAE1D;IACA,IAAI,IAAI,CAACN,OAAO,CAACsB,IAAI,KAAK,IAAI,CAACpB,YAAY,EAAE;MAC3C,IAAI,CAACF,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC1B;IACA,IAAI,CAACD,OAAO,CAACuB,GAAG,CAACnB,SAAS,EAAEe,SAAS,CAAC;IACtC,OAAOA,SAAS;EAClB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAvB,aAAa,CAAC4B,eAAe,GAAG,UAAUpB,SAAS,EAAE;EACnD,IAAI,CAACA,SAAS,EAAE;IACd,OAAO,KAAK;EACd;EACA,IAAIgB,IAAI,CAACK,iBAAiB,EAAE;IAC1B,IAAI;MACF3B,qBAAqB,GAAGA,qBAAqB,IAAIsB,IAAI,CAACK,iBAAiB,CAAC,UAAU,CAAC;MACnF,IAAI3B,qBAAqB,CAAC4B,QAAQ,CAACtB,SAAS,CAAC,EAAE;QAC7C,OAAO,IAAI;MACb;MACA;IACF,CAAC,CAAC,OAAOuB,MAAM,EAAE;MACf;MACA7B,qBAAqB,GAAG,EAAE;IAC5B;EACF;EACA,IAAI;IACFC,wBAAwB,CAACI,GAAG,CAACC,SAAS,CAAC;IACvC,OAAO,IAAI;EACb,CAAC,CAAC,OAAOuB,MAAM,EAAE;IACf,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/B,aAAa,CAACgC,iBAAiB,GAAG,UAAUC,KAAK,EAAEC,eAAe,EAAE;EAClE,IAAIC,YAAY,GAAG,IAAI,CAACC,SAAS,CAACH,KAAK,EAAEC,eAAe,CAAC;EACzD,OAAOlC,aAAa,CAACqC,iBAAiB,CAACF,YAAY,CAAC;AACtD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnC,aAAa,CAACoC,SAAS,GAAG,UAAUH,KAAK,EAAEC,eAAe,EAAE;EAC1D,IAAII,IAAI;IACNC,KAAK;IACLC,UAAU,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAChCC,SAAS,GAAGxC,wBAAwB,CAACI,GAAG,CAAC2B,eAAe,CAAC;IACzD;IACA;IACA;IACAU,MAAM,GAAGD,SAAS,CAACE,aAAa,CAAC,IAAIC,IAAI,CAACb,KAAK,CAACc,OAAO,CAAC,CAAC,CAAC,CAAC;EAC7D,KAAKT,IAAI,IAAIM,MAAM,EAAE;IACnBL,KAAK,GAAGK,MAAM,CAACN,IAAI,CAAC;IACpB,IAAIC,KAAK,CAACS,IAAI,KAAK,SAAS,EAAE;MAC5BR,UAAU,CAACD,KAAK,CAACS,IAAI,CAAC,GAAGT,KAAK,CAACU,KAAK;IACtC;EACF;EACA,OAAOT,UAAU;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAxC,aAAa,CAACqC,iBAAiB,GAAG,UAAUO,MAAM,EAAE;EAClD;EACA,IAAIX,KAAK,GAAG,IAAIa,IAAI,CAAC,CAAC,CAAC;IACrBI,QAAQ,GAAGC,QAAQ,CAACP,MAAM,CAAC1B,IAAI,CAAC;EAClC,IAAI0B,MAAM,CAACvB,GAAG,KAAK,GAAG,EAAE;IACtB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA6B,QAAQ,GAAGA,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC;EAC9B;;EAEA;EACAjB,KAAK,CAACmB,cAAc,CAACF,QAAQ,EAAEC,QAAQ,CAACP,MAAM,CAAC3B,KAAK,CAAC,GAAG,CAAC,EAAEkC,QAAQ,CAACP,MAAM,CAAC5B,GAAG,CAAC,CAAC;EAChFiB,KAAK,CAACoB,WAAW,CAACF,QAAQ,CAACP,MAAM,CAAChC,IAAI,CAAC,EAAEuC,QAAQ,CAACP,MAAM,CAAC/B,MAAM,CAAC,EAAEsC,QAAQ,CAACP,MAAM,CAAC9B,MAAM,CAAC,EAAEqC,QAAQ,CAACP,MAAM,CAACU,gBAAgB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEpI,OAAOrB,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjC,aAAa,CAACuD,eAAe,GAAG,UAAUtB,KAAK,EAAEuB,eAAe,EAAE;EAChE,MAAMC,eAAe,GAAGzD,aAAa,CAACgC,iBAAiB,CAACC,KAAK,EAAEuB,eAAe,CAAC;EAC/E,MAAME,eAAe,GAAGzB,KAAK,CAACc,OAAO,CAAC,CAAC;EACvC,MAAMY,cAAc,GAAGD,eAAe,GAAGD,eAAe,CAACV,OAAO,CAAC,CAAC;EAClE;EACA,MAAMa,WAAW,GAAG,IAAId,IAAI,CAACY,eAAe,GAAGC,cAAc,CAAC;EAC9D,MAAME,qBAAqB,GAAG7D,aAAa,CAACgC,iBAAiB,CAAC4B,WAAW,EAAEJ,eAAe,CAAC;EAC3F,MAAMM,8BAA8B,GAAGD,qBAAqB,CAACd,OAAO,CAAC,CAAC;EACtE,MAAMgB,aAAa,GAAGH,WAAW,CAACb,OAAO,CAAC,CAAC,GAAGe,8BAA8B;EAC5E,IAAIE,eAAe,GAAGD,aAAa;EACnC,IAAIJ,cAAc,KAAKI,aAAa,EAAE;IACpC,MAAME,YAAY,GAAG,IAAInB,IAAI,CAACY,eAAe,GAAGK,aAAa,CAAC;IAC9D,MAAMG,sBAAsB,GAAGlE,aAAa,CAACgC,iBAAiB,CAACiC,YAAY,EAAET,eAAe,CAAC;IAC7F,MAAMW,+BAA+B,GAAGD,sBAAsB,CAACnB,OAAO,CAAC,CAAC;IACxE;IACA;IACA,IAAIoB,+BAA+B,KAAKT,eAAe,IAAII,8BAA8B,GAAGK,+BAA+B,EAAE;MAC3HH,eAAe,GAAGL,cAAc;IAClC;EACF;EACA,OAAOK,eAAe,GAAG,IAAI;AAC/B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAhE,aAAa,CAACoE,mBAAmB,GAAG;EAClC,sBAAsB,EAAE,gCAAgC;EACxD,mBAAmB,EAAE,6BAA6B;EAClD,iBAAiB,EAAE,2BAA2B;EAC9C,eAAe,EAAE,yBAAyB;EAC1C,iBAAiB,EAAE,2BAA2B;EAC9C,sBAAsB,EAAE,8BAA8B;EACtD,oBAAoB,EAAE,6BAA6B;EACnD,eAAe,EAAE,eAAe;EAChC,eAAe,EAAE,gBAAgB;EACjC,eAAe,EAAE,cAAc;EAC/B,iBAAiB,EAAE,gBAAgB;EACnC,gBAAgB,EAAE,iBAAiB;EACnC,cAAc,EAAE,aAAa;EAC7B,cAAc,EAAE,eAAe;EAC/B,iBAAiB,EAAE,cAAc;EACjC,aAAa,EAAE,kBAAkB;EACjC,uBAAuB,EAAE;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACApE,aAAa,CAACqE,gBAAgB,GAAG,YAAY;EAC3C,IAAIpE,cAAc,KAAK,EAAE,EAAE;IACzB;IACAA,cAAc,GAAG,IAAIuB,IAAI,CAACC,cAAc,CAAC,CAAC,CAAC6C,eAAe,CAAC,CAAC,CAACnD,QAAQ;IACrElB,cAAc,GAAGD,aAAa,CAACoE,mBAAmB,CAACnE,cAAc,CAAC,IAAIA,cAAc;EACtF;EACA,OAAOA,cAAc;AACvB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAD,aAAa,CAACuE,wBAAwB,GAAG,YAAY;EACnDtE,cAAc,GAAG,EAAE;AACrB,CAAC;AACD,eAAeD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}