{"ast":null,"code":"\"use strict\";\n\nconst n = t => {\n    let e = 0;\n    return (t.selectionStart || t.selectionStart === 0) && (e = t.selectionDirection === \"backward\" ? t.selectionStart : t.selectionEnd), e;\n  },\n  o = (t, e) => {\n    t.selectionStart ? (t.focus(), t.setSelectionRange(e, e)) : t.focus();\n  };\nexport { n as getCaretPosition, o as setCaretPosition };","map":{"version":3,"names":["n","t","e","selectionStart","selectionDirection","selectionEnd","o","setCaretPosition","focus","setSelectionRange","getCaretPosition"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-base/src/util/Caret.ts"],"sourcesContent":["/**\n * Returns the caret (cursor) position of the specified text field (field).\n * Return value range is 0-field.value.length.\n */\nconst getCaretPosition = (field: HTMLInputElement): number | null => {\n\t// Initialize\n\tlet caretPos: number | null = 0;\n\n\tif (field.selectionStart || field.selectionStart === 0) { // Firefox support\n\t\tcaretPos = field.selectionDirection === \"backward\" ? field.selectionStart : field.selectionEnd;\n\t}\n\n\treturn caretPos;\n};\n\nconst setCaretPosition = (field: HTMLInputElement, caretPos: number | null) => {\n\tif (field.selectionStart) {\n\t\tfield.focus();\n\t\tfield.setSelectionRange(caretPos, caretPos);\n\t} else {\n\t\tfield.focus();\n\t}\n};\n\nexport {\n\tgetCaretPosition,\n\tsetCaretPosition,\n};\n"],"mappings":";;AAIA,MAAMA,CAAA,GAAoBC,CAAA,IAA2C;IAEpE,IAAIC,CAAA,GAA0B;IAE9B,QAAID,CAAA,CAAME,cAAA,IAAkBF,CAAA,CAAME,cAAA,KAAmB,OACpDD,CAAA,GAAWD,CAAA,CAAMG,kBAAA,KAAuB,aAAaH,CAAA,CAAME,cAAA,GAAiBF,CAAA,CAAMI,YAAA,GAG5EH,CACR;EAAA;EAEMI,CAAA,GAAmBC,CAACN,CAAA,EAAyBC,CAAA,KAA4B;IAC1ED,CAAA,CAAME,cAAA,IACTF,CAAA,CAAMO,KAAA,CAAM,GACZP,CAAA,CAAMQ,iBAAA,CAAkBP,CAAA,EAAUA,CAAQ,KAE1CD,CAAA,CAAMO,KAAA,CAAM,CAEd;EAAA;AAEA,SACCR,CAAA,IAAAU,gBAAA,EACAJ,CAAA,IAAAC,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}