{"ast":null,"code":"import { supportsTouch } from '@ui5/webcomponents-base/dist/Device.js';\nimport { OrientationEventProvider, ResizeEventProvider } from './EventProvider.js';\nconst isSSR = () => typeof window === 'undefined';\nconst getActualWindowSize = () => {\n  if (isSSR()) {\n    return [0, 0];\n  }\n  return [window.innerWidth, window.innerHeight];\n};\nlet iResizeTimeout;\nlet bOrientationChange = false;\nlet bResize = false;\nlet iOrientationTimeout;\nlet iClearFlagTimeout;\nlet [iWindowWidthOld, iWindowHeightOld] = getActualWindowSize();\nconst rInputTagRegex = /INPUT|TEXTAREA|SELECT/;\nconst internalWindowSize = {\n  height: 0,\n  width: 0\n};\nconst internalOrientation = {\n  landscape: false,\n  portrait: false\n};\n// PRIVATE API\nconst isLandscape = () => {\n  return !!window.matchMedia('(orientation: landscape)').matches;\n};\nconst setResizeInfo = () => {\n  internalWindowSize.width = getActualWindowSize()[0];\n  internalWindowSize.height = getActualWindowSize()[1];\n};\nconst setOrientationInfo = () => {\n  internalOrientation.landscape = isLandscape();\n  internalOrientation.portrait = !internalOrientation.landscape;\n};\nconst clearFlags = () => {\n  bOrientationChange = false;\n  bResize = false;\n  iClearFlagTimeout = null;\n};\nlet eventListenersInitialized = false;\nconst initEventListeners = () => {\n  // Add handler for orientationchange and resize after initialization of Device API\n  if (supportsTouch()) {\n    // logic for mobile devices which support orientationchange (like ios, android)\n    window.addEventListener('resize', handleMobileOrientationResizeChange, false);\n    window.addEventListener('orientationchange', handleMobileOrientationResizeChange, false);\n  } else {\n    // desktop browsers and windows phone/tablet which not support orientationchange\n    window.addEventListener('resize', handleResizeEvent, false);\n  }\n  setResizeInfo();\n  setOrientationInfo();\n  eventListenersInitialized = true;\n};\n// orientation change\nconst handleOrientationChange = () => {\n  setOrientationInfo();\n  OrientationEventProvider.fireEvent('orientation', {\n    landscape: internalOrientation.landscape,\n    portrait: internalOrientation.portrait\n  });\n};\nconst handleMobileTimeout = () => {\n  // with ios split view, the browser fires only resize event and no orientationchange\n  // when changing the size of a split view\n  // therefore the following if needs to be adapted with additional check of iPad with version greater or equal 9\n  // (splitview was introduced with iOS 9)\n  if (bResize && bOrientationChange) {\n    handleOrientationChange();\n    handleResizeChange();\n    bOrientationChange = false;\n    bResize = false;\n    if (iClearFlagTimeout) {\n      window.clearTimeout(iClearFlagTimeout);\n      iClearFlagTimeout = null;\n    }\n  }\n  iOrientationTimeout = null;\n};\nconst handleMobileOrientationResizeChange = evt => {\n  if (evt.type === 'resize') {\n    // @ts-expect-error: undefined is fine here\n    if (rInputTagRegex.test(document.activeElement?.tagName) && !bOrientationChange) {\n      return;\n    }\n    const [iWindowWidthNew, iWindowHeightNew] = getActualWindowSize();\n    // skip multiple resize events by only one orientationchange\n    if (iWindowHeightNew === iWindowHeightOld && iWindowWidthNew === iWindowWidthOld) {\n      return;\n    }\n    bResize = true;\n    // on mobile devices opening the keyboard on some devices leads to a resize event\n    // in this case only the height changes, not the width\n    if (iWindowHeightOld !== iWindowHeightNew && iWindowWidthOld === iWindowWidthNew) {\n      handleResizeChange();\n    } else {\n      iWindowWidthOld = iWindowWidthNew;\n    }\n    iWindowHeightOld = iWindowHeightNew;\n    if (iClearFlagTimeout) {\n      window.clearTimeout(iClearFlagTimeout);\n      iClearFlagTimeout = null;\n    }\n    // Some Android build-in browser fires a resize event after the viewport is applied.\n    // This resize event has to be dismissed otherwise when the next orientationchange event happens,\n    // a UI5 resize event will be fired with the wrong window size.\n    iClearFlagTimeout = window.setTimeout(clearFlags, 1200);\n  } else if (evt.type === 'orientationchange') {\n    bOrientationChange = true;\n  }\n  if (iOrientationTimeout) {\n    clearTimeout(iOrientationTimeout);\n    iOrientationTimeout = null;\n  }\n  iOrientationTimeout = window.setTimeout(handleMobileTimeout, 50);\n};\n// RESIZE ONLY WITHOUT ORIENTATION CHANGE\nconst handleResizeChange = () => {\n  setResizeInfo();\n  ResizeEventProvider.fireEvent('resize', {\n    height: internalWindowSize.height,\n    width: internalWindowSize.width\n  });\n};\nconst handleResizeTimeout = () => {\n  handleResizeChange();\n  iResizeTimeout = null;\n};\nconst handleResizeEvent = () => {\n  const wasL = internalOrientation.landscape;\n  const isL = isLandscape();\n  if (wasL !== isL) {\n    handleOrientationChange();\n  }\n  // throttle resize events because most browsers throw one or more resize events per pixel\n  // for every resize event inside the period from 150ms (starting from the first resize event),\n  // we only fire one resize event after this period\n  if (!iResizeTimeout) {\n    iResizeTimeout = window.setTimeout(handleResizeTimeout, 150);\n  }\n};\n// re-export everything from the web components device\nexport * from '@ui5/webcomponents-base/dist/Device.js';\n// export all media methods\nexport { attachMediaHandler, detachMediaHandler, getCurrentRange } from './Media.js';\n// resize events\nexport const attachResizeHandler = fnFunction => {\n  if (!eventListenersInitialized) {\n    initEventListeners();\n  }\n  ResizeEventProvider.attachEvent('resize', fnFunction);\n};\nexport const detachResizeHandler = fnFunction => {\n  ResizeEventProvider.detachEvent('resize', fnFunction);\n};\n// orientation change events\nexport const getOrientation = () => {\n  return internalOrientation;\n};\nexport const attachOrientationChangeHandler = fnFunction => {\n  if (!eventListenersInitialized) {\n    initEventListeners();\n  }\n  OrientationEventProvider.attachEvent('orientation', fnFunction);\n};\nexport const detachOrientationChangeHandler = fnFunction => {\n  OrientationEventProvider.detachEvent('orientation', fnFunction);\n};","map":{"version":3,"names":["supportsTouch","OrientationEventProvider","ResizeEventProvider","isSSR","window","getActualWindowSize","innerWidth","innerHeight","iResizeTimeout","bOrientationChange","bResize","iOrientationTimeout","iClearFlagTimeout","iWindowWidthOld","iWindowHeightOld","rInputTagRegex","internalWindowSize","height","width","internalOrientation","landscape","portrait","isLandscape","matchMedia","matches","setResizeInfo","setOrientationInfo","clearFlags","eventListenersInitialized","initEventListeners","addEventListener","handleMobileOrientationResizeChange","handleResizeEvent","handleOrientationChange","fireEvent","handleMobileTimeout","handleResizeChange","clearTimeout","evt","type","test","document","activeElement","tagName","iWindowWidthNew","iWindowHeightNew","setTimeout","handleResizeTimeout","wasL","isL","attachMediaHandler","detachMediaHandler","getCurrentRange","attachResizeHandler","fnFunction","attachEvent","detachResizeHandler","detachEvent","getOrientation","attachOrientationChangeHandler","detachOrientationChangeHandler"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-react-base/dist/Device/index.js"],"sourcesContent":["import { supportsTouch } from '@ui5/webcomponents-base/dist/Device.js';\nimport { OrientationEventProvider, ResizeEventProvider } from './EventProvider.js';\nconst isSSR = () => typeof window === 'undefined';\nconst getActualWindowSize = () => {\n    if (isSSR()) {\n        return [0, 0];\n    }\n    return [window.innerWidth, window.innerHeight];\n};\nlet iResizeTimeout;\nlet bOrientationChange = false;\nlet bResize = false;\nlet iOrientationTimeout;\nlet iClearFlagTimeout;\nlet [iWindowWidthOld, iWindowHeightOld] = getActualWindowSize();\nconst rInputTagRegex = /INPUT|TEXTAREA|SELECT/;\nconst internalWindowSize = {\n    height: 0,\n    width: 0\n};\nconst internalOrientation = {\n    landscape: false,\n    portrait: false\n};\n// PRIVATE API\nconst isLandscape = () => {\n    return !!window.matchMedia('(orientation: landscape)').matches;\n};\nconst setResizeInfo = () => {\n    internalWindowSize.width = getActualWindowSize()[0];\n    internalWindowSize.height = getActualWindowSize()[1];\n};\nconst setOrientationInfo = () => {\n    internalOrientation.landscape = isLandscape();\n    internalOrientation.portrait = !internalOrientation.landscape;\n};\nconst clearFlags = () => {\n    bOrientationChange = false;\n    bResize = false;\n    iClearFlagTimeout = null;\n};\nlet eventListenersInitialized = false;\nconst initEventListeners = () => {\n    // Add handler for orientationchange and resize after initialization of Device API\n    if (supportsTouch()) {\n        // logic for mobile devices which support orientationchange (like ios, android)\n        window.addEventListener('resize', handleMobileOrientationResizeChange, false);\n        window.addEventListener('orientationchange', handleMobileOrientationResizeChange, false);\n    }\n    else {\n        // desktop browsers and windows phone/tablet which not support orientationchange\n        window.addEventListener('resize', handleResizeEvent, false);\n    }\n    setResizeInfo();\n    setOrientationInfo();\n    eventListenersInitialized = true;\n};\n// orientation change\nconst handleOrientationChange = () => {\n    setOrientationInfo();\n    OrientationEventProvider.fireEvent('orientation', {\n        landscape: internalOrientation.landscape,\n        portrait: internalOrientation.portrait\n    });\n};\nconst handleMobileTimeout = () => {\n    // with ios split view, the browser fires only resize event and no orientationchange\n    // when changing the size of a split view\n    // therefore the following if needs to be adapted with additional check of iPad with version greater or equal 9\n    // (splitview was introduced with iOS 9)\n    if (bResize && bOrientationChange) {\n        handleOrientationChange();\n        handleResizeChange();\n        bOrientationChange = false;\n        bResize = false;\n        if (iClearFlagTimeout) {\n            window.clearTimeout(iClearFlagTimeout);\n            iClearFlagTimeout = null;\n        }\n    }\n    iOrientationTimeout = null;\n};\nconst handleMobileOrientationResizeChange = (evt) => {\n    if (evt.type === 'resize') {\n        // @ts-expect-error: undefined is fine here\n        if (rInputTagRegex.test(document.activeElement?.tagName) && !bOrientationChange) {\n            return;\n        }\n        const [iWindowWidthNew, iWindowHeightNew] = getActualWindowSize();\n        // skip multiple resize events by only one orientationchange\n        if (iWindowHeightNew === iWindowHeightOld && iWindowWidthNew === iWindowWidthOld) {\n            return;\n        }\n        bResize = true;\n        // on mobile devices opening the keyboard on some devices leads to a resize event\n        // in this case only the height changes, not the width\n        if (iWindowHeightOld !== iWindowHeightNew && iWindowWidthOld === iWindowWidthNew) {\n            handleResizeChange();\n        }\n        else {\n            iWindowWidthOld = iWindowWidthNew;\n        }\n        iWindowHeightOld = iWindowHeightNew;\n        if (iClearFlagTimeout) {\n            window.clearTimeout(iClearFlagTimeout);\n            iClearFlagTimeout = null;\n        }\n        // Some Android build-in browser fires a resize event after the viewport is applied.\n        // This resize event has to be dismissed otherwise when the next orientationchange event happens,\n        // a UI5 resize event will be fired with the wrong window size.\n        iClearFlagTimeout = window.setTimeout(clearFlags, 1200);\n    }\n    else if (evt.type === 'orientationchange') {\n        bOrientationChange = true;\n    }\n    if (iOrientationTimeout) {\n        clearTimeout(iOrientationTimeout);\n        iOrientationTimeout = null;\n    }\n    iOrientationTimeout = window.setTimeout(handleMobileTimeout, 50);\n};\n// RESIZE ONLY WITHOUT ORIENTATION CHANGE\nconst handleResizeChange = () => {\n    setResizeInfo();\n    ResizeEventProvider.fireEvent('resize', {\n        height: internalWindowSize.height,\n        width: internalWindowSize.width\n    });\n};\nconst handleResizeTimeout = () => {\n    handleResizeChange();\n    iResizeTimeout = null;\n};\nconst handleResizeEvent = () => {\n    const wasL = internalOrientation.landscape;\n    const isL = isLandscape();\n    if (wasL !== isL) {\n        handleOrientationChange();\n    }\n    // throttle resize events because most browsers throw one or more resize events per pixel\n    // for every resize event inside the period from 150ms (starting from the first resize event),\n    // we only fire one resize event after this period\n    if (!iResizeTimeout) {\n        iResizeTimeout = window.setTimeout(handleResizeTimeout, 150);\n    }\n};\n// re-export everything from the web components device\nexport * from '@ui5/webcomponents-base/dist/Device.js';\n// export all media methods\nexport { attachMediaHandler, detachMediaHandler, getCurrentRange } from './Media.js';\n// resize events\nexport const attachResizeHandler = (fnFunction) => {\n    if (!eventListenersInitialized) {\n        initEventListeners();\n    }\n    ResizeEventProvider.attachEvent('resize', fnFunction);\n};\nexport const detachResizeHandler = (fnFunction) => {\n    ResizeEventProvider.detachEvent('resize', fnFunction);\n};\n// orientation change events\nexport const getOrientation = () => {\n    return internalOrientation;\n};\nexport const attachOrientationChangeHandler = (fnFunction) => {\n    if (!eventListenersInitialized) {\n        initEventListeners();\n    }\n    OrientationEventProvider.attachEvent('orientation', fnFunction);\n};\nexport const detachOrientationChangeHandler = (fnFunction) => {\n    OrientationEventProvider.detachEvent('orientation', fnFunction);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}