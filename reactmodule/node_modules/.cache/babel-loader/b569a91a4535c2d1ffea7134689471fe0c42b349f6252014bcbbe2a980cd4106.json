{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridSignature, useGridApiEventHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridRowsLookupSelector } from \"../rows/gridRowsSelector.js\";\nimport { gridRowSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from \"./gridRowSelectionSelector.js\";\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from \"../pagination/index.js\";\nimport { gridFocusCellSelector } from \"../focus/gridFocusStateSelector.js\";\nimport { gridExpandedSortedRowIdsSelector, gridFilterModelSelector } from \"../filter/gridFilterSelector.js\";\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from \"../../../colDef/index.js\";\nimport { GridCellModes } from \"../../../models/gridEditRowModel.js\";\nimport { isKeyboardEvent, isNavigationKey } from \"../../../utils/keyboardUtils.js\";\nimport { useGridVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from \"../../../constants/gridDetailPanelToggleField.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { isEventTargetInPortal } from \"../../../utils/domUtils.js\";\nimport { isMultipleRowSelectionEnabled } from \"./utils.js\";\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n  return [selectionModelProp];\n};\nexport const rowSelectionStateInitializer = (state, props) => _extends({}, state, {\n  rowSelection: props.rowSelection ? getSelectionModelPropValue(props.rowSelectionModel) ?? [] : []\n});\n\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexport const useGridRowSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const runIfRowSelectionIsEnabled = callback => function () {\n    if (props.rowSelection) {\n      callback(...arguments);\n    }\n  };\n  const propRowSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.rowSelectionModel, gridRowSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableRowSelectionOnClick,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = isMultipleRowSelectionEnabled(props);\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    let endId = id;\n    const startId = lastRowToggled.current ?? id;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const setRowSelectionModel = React.useCallback(model => {\n    if (props.signature === GridSignature.DataGrid && !canHaveMultipleSelection && Array.isArray(model) && model.length > 1) {\n      throw new Error(['MUI X: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    const currentModel = gridRowSelectionStateSelector(apiRef.current.state);\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        rowSelection: props.rowSelection ? model : []\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, canHaveMultipleSelection]);\n  const isRowSelected = React.useCallback(id => gridRowSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (props.rowSelection === false) {\n      return false;\n    }\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    const rowNode = apiRef.current.getRowNode(id);\n    if (rowNode?.type === 'footer' || rowNode?.type === 'pinnedRow') {\n      return false;\n    }\n    return true;\n  }, [apiRef, props.rowSelection, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback(function (id) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setRowSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridRowSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n      if (isSelected) {\n        newSelection.push(id);\n      }\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback(function (ids) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(function (_ref) {\n    let {\n      startId,\n      endId\n    } = _ref;\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`);\n\n    // Using rows from all pages allow to select a range across several pages\n    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * EVENTS\n   */\n  const removeOutdatedSelection = React.useCallback(() => {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n\n    // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n    if (hasChanged) {\n      apiRef.current.setRowSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey;\n\n    // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n    const field = event.target.closest(`.${gridClasses.cell}`)?.getAttribute('data-field');\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n      if (column?.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    const rowNode = apiRef.current.getRowNode(params.id);\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n    if (event.shiftKey && canHaveMultipleSelection) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      window.getSelection()?.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value, !canHaveMultipleSelection);\n    }\n  }, [apiRef, expandMouseRowRangeSelection, canHaveMultipleSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const rowsToBeSelected = props.pagination && props.checkboxSelectionVisibleOnly && props.paginationMode === 'client' ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    const filterModel = gridFilterModelSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value, filterModel?.items.length > 0);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination, props.paginationMode]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    }\n\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (event.key === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(removeOutdatedSelection));\n  useGridApiEventHandler(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (propRowSelectionModel !== undefined) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n    }\n  }, [apiRef, propRowSelectionModel, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, props.rowSelection]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection) {\n      return;\n    }\n\n    // props.isRowSelectable changed\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection || isStateControlled) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      // See https://github.com/mui/mui-x/issues/8455\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);\n};","map":{"version":3,"names":["_extends","React","GridSignature","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridRowsLookupSelector","gridRowSelectionStateSelector","selectedGridRowsSelector","selectedIdsLookupSelector","gridPaginatedVisibleSortedGridRowIdsSelector","gridFocusCellSelector","gridExpandedSortedRowIdsSelector","gridFilterModelSelector","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GridCellModes","isKeyboardEvent","isNavigationKey","useGridVisibleRows","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridClasses","isEventTargetInPortal","isMultipleRowSelectionEnabled","getSelectionModelPropValue","selectionModelProp","prevSelectionModel","Array","isArray","rowSelectionStateInitializer","state","props","rowSelection","rowSelectionModel","useGridRowSelection","apiRef","logger","runIfRowSelectionIsEnabled","callback","arguments","propRowSelectionModel","useMemo","current","lastRowToggled","useRef","registerControlState","stateId","propModel","propOnChange","onRowSelectionModelChange","stateSelector","changeEvent","checkboxSelection","disableRowSelectionOnClick","isRowSelectable","propIsRowSelectable","canHaveMultipleSelection","visibleRows","expandMouseRowRangeSelection","useCallback","id","endId","startId","isSelected","isRowSelected","visibleRowIds","startIndex","findIndex","rowId","endIndex","selectRowRange","setRowSelectionModel","model","signature","DataGrid","length","Error","join","currentModel","debug","setState","forceUpdate","includes","getRowParams","rowNode","getRowNode","type","getSelectedRows","selectRow","undefined","resetSelection","selection","newSelection","filter","el","push","isSelectionValid","selectRows","ids","selectableIds","selectionLookup","forEach","Object","values","_ref","getRow","allPagesRowIds","indexOf","start","end","rowsBetweenStartAndEnd","slice","selectionPublicApi","selectionPrivateApi","removeOutdatedSelection","keepNonExistentRowsSelected","currentSelection","rowsLookup","hasChanged","handleSingleRowSelection","event","hasCtrlKey","metaKey","ctrlKey","isMultipleSelectionDisabled","handleRowClick","params","field","target","closest","cell","getAttribute","column","getColumn","shiftKey","preventSelectionOnShift","window","getSelection","removeAllRanges","handleRowSelectionCheckboxChange","nativeEvent","value","handleHeaderSelectionCheckboxChange","rowsToBeSelected","pagination","checkboxSelectionVisibleOnly","paginationMode","filterModel","items","handleCellKeyDown","getCellMode","Edit","key","focusCell","preventDefault","isNextRowSelected","newRowIndex","getRowIndexRelativeToVisibleRows","previousRowIndex","rows","map","row","getAllRowIds","useEffect","isStateControlled"],"sources":["/home/user/projects/reactproj/reactmodule/node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelection.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridSignature, useGridApiEventHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridRowsLookupSelector } from \"../rows/gridRowsSelector.js\";\nimport { gridRowSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from \"./gridRowSelectionSelector.js\";\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from \"../pagination/index.js\";\nimport { gridFocusCellSelector } from \"../focus/gridFocusStateSelector.js\";\nimport { gridExpandedSortedRowIdsSelector, gridFilterModelSelector } from \"../filter/gridFilterSelector.js\";\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from \"../../../colDef/index.js\";\nimport { GridCellModes } from \"../../../models/gridEditRowModel.js\";\nimport { isKeyboardEvent, isNavigationKey } from \"../../../utils/keyboardUtils.js\";\nimport { useGridVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from \"../../../constants/gridDetailPanelToggleField.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { isEventTargetInPortal } from \"../../../utils/domUtils.js\";\nimport { isMultipleRowSelectionEnabled } from \"./utils.js\";\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n  return [selectionModelProp];\n};\nexport const rowSelectionStateInitializer = (state, props) => _extends({}, state, {\n  rowSelection: props.rowSelection ? getSelectionModelPropValue(props.rowSelectionModel) ?? [] : []\n});\n\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexport const useGridRowSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const runIfRowSelectionIsEnabled = callback => (...args) => {\n    if (props.rowSelection) {\n      callback(...args);\n    }\n  };\n  const propRowSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.rowSelectionModel, gridRowSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableRowSelectionOnClick,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = isMultipleRowSelectionEnabled(props);\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    let endId = id;\n    const startId = lastRowToggled.current ?? id;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const setRowSelectionModel = React.useCallback(model => {\n    if (props.signature === GridSignature.DataGrid && !canHaveMultipleSelection && Array.isArray(model) && model.length > 1) {\n      throw new Error(['MUI X: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    const currentModel = gridRowSelectionStateSelector(apiRef.current.state);\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        rowSelection: props.rowSelection ? model : []\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, canHaveMultipleSelection]);\n  const isRowSelected = React.useCallback(id => gridRowSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (props.rowSelection === false) {\n      return false;\n    }\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    const rowNode = apiRef.current.getRowNode(id);\n    if (rowNode?.type === 'footer' || rowNode?.type === 'pinnedRow') {\n      return false;\n    }\n    return true;\n  }, [apiRef, props.rowSelection, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setRowSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridRowSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n      if (isSelected) {\n        newSelection.push(id);\n      }\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`);\n\n    // Using rows from all pages allow to select a range across several pages\n    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * EVENTS\n   */\n  const removeOutdatedSelection = React.useCallback(() => {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n\n    // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n    if (hasChanged) {\n      apiRef.current.setRowSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey;\n\n    // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n    const field = event.target.closest(`.${gridClasses.cell}`)?.getAttribute('data-field');\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n      if (column?.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    const rowNode = apiRef.current.getRowNode(params.id);\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n    if (event.shiftKey && canHaveMultipleSelection) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      window.getSelection()?.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value, !canHaveMultipleSelection);\n    }\n  }, [apiRef, expandMouseRowRangeSelection, canHaveMultipleSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const rowsToBeSelected = props.pagination && props.checkboxSelectionVisibleOnly && props.paginationMode === 'client' ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    const filterModel = gridFilterModelSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value, filterModel?.items.length > 0);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination, props.paginationMode]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    }\n\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (event.key === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(removeOutdatedSelection));\n  useGridApiEventHandler(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (propRowSelectionModel !== undefined) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n    }\n  }, [apiRef, propRowSelectionModel, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, props.rowSelection]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection) {\n      return;\n    }\n\n    // props.isRowSelectable changed\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection || isStateControlled) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      // See https://github.com/mui/mui-x/issues/8455\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}