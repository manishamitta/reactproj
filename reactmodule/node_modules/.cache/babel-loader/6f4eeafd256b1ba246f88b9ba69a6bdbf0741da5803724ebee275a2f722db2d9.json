{"ast":null,"code":"import { _$LH as o } from \"./lit-html.js\";\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst {\n    I: l\n  } = o,\n  i = o => null === o || \"object\" != typeof o && \"function\" != typeof o,\n  n = {\n    HTML: 1,\n    SVG: 2\n  },\n  t = (o, l) => void 0 === l ? void 0 !== (null == o ? void 0 : o._$litType$) : (null == o ? void 0 : o._$litType$) === l,\n  v = o => {\n    var l;\n    return null != (null === (l = null == o ? void 0 : o._$litType$) || void 0 === l ? void 0 : l.h);\n  },\n  d = o => void 0 !== (null == o ? void 0 : o._$litDirective$),\n  u = o => null == o ? void 0 : o._$litDirective$,\n  e = o => void 0 === o.strings,\n  r = () => document.createComment(\"\"),\n  c = (o, i, n) => {\n    var t;\n    const v = o._$AA.parentNode,\n      d = void 0 === i ? o._$AB : i._$AA;\n    if (void 0 === n) {\n      const i = v.insertBefore(r(), d),\n        t = v.insertBefore(r(), d);\n      n = new l(i, t, o, o.options);\n    } else {\n      const l = n._$AB.nextSibling,\n        i = n._$AM,\n        u = i !== o;\n      if (u) {\n        let l;\n        null === (t = n._$AQ) || void 0 === t || t.call(n, o), n._$AM = o, void 0 !== n._$AP && (l = o._$AU) !== i._$AU && n._$AP(l);\n      }\n      if (l !== d || u) {\n        let o = n._$AA;\n        for (; o !== l;) {\n          const l = o.nextSibling;\n          v.insertBefore(o, d), o = l;\n        }\n      }\n    }\n    return n;\n  },\n  f = function (o, l) {\n    let i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : o;\n    return o._$AI(l, i), o;\n  },\n  s = {},\n  a = function (o) {\n    let l = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : s;\n    return o._$AH = l;\n  },\n  m = o => o._$AH,\n  p = o => {\n    var l;\n    null === (l = o._$AP) || void 0 === l || l.call(o, !1, !0);\n    let i = o._$AA;\n    const n = o._$AB.nextSibling;\n    for (; i !== n;) {\n      const o = i.nextSibling;\n      i.remove(), i = o;\n    }\n  },\n  h = o => {\n    o._$AR();\n  };\nexport { n as TemplateResultType, h as clearPart, m as getCommittedValue, u as getDirectiveClass, c as insertPart, v as isCompiledTemplateResult, d as isDirectiveResult, i as isPrimitive, e as isSingleExpression, t as isTemplateResult, p as removePart, f as setChildPartValue, a as setCommittedValue };","map":{"version":3,"names":["I","l","o","i","n","HTML","SVG","t","isTemplateResult","_$litType$","v","h","d","_$litDirective$","u","e","strings","r","createMarker","document","createComment","c","insertPart","_$AA","parentNode","_$AB","insertBefore","options","nextSibling","_$AM","_$AQ","call","_$AP","_$AU","f","setChildPartValue","arguments","length","undefined","_$AI","s","a","setCommittedValue","_$AH","m","p","remove","_$AR","TemplateResultType","clearPart","getCommittedValue","getDirectiveClass","isCompiledTemplateResult","isDirectiveResult","isPrimitive","isSingleExpression","removePart"],"sources":["/home/user/projects/reactproj/node_modules/lit-html/src/directive-helpers.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  _$LH,\n  Part,\n  DirectiveParent,\n  TemplateResult,\n  CompiledTemplateResult,\n} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n} as const;\n\nexport type TemplateResultType =\n  (typeof TemplateResultType)[keyof typeof TemplateResultType];\n\ntype IsTemplateResult = {\n  (val: unknown): val is TemplateResult | CompiledTemplateResult;\n  <T extends TemplateResultType>(\n    val: unknown,\n    type: T\n  ): val is TemplateResult<T>;\n};\n\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult: IsTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is TemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as TemplateResult)?.['_$litType$'] !== undefined\n    : (value as TemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (\n  value: unknown\n): value is CompiledTemplateResult => {\n  return (value as CompiledTemplateResult)?.['_$litType$']?.h != null;\n};\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}