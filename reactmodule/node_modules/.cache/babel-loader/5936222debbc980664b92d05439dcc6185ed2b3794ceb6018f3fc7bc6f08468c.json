{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { Link, useParams } from \"react-router-dom\";\n// import { getItemById } from \"api/index\"; // Adjust path as necessary\n// function ObjectPage() {\n//     const [data, setData] = useState(null);\n//     const [loading, setLoading] = useState(true); // Add loading state\n//     const [error, setError] = useState(null); // Add error state\n//     const { s_id } = useParams(); // Assuming you are using a route parameter for the ID\n//     // useEffect(() => {\n//     //     const fetchData = async () => {\n//     //         try {\n//     //             setLoading(true); // Set loading to true before fetch\n//     //             const result = await getItemById(s_id);\n//     //             setData(result || null);\n//     //         } catch (error) {\n//     //             setError(error); // Set error if there's an issue\n//     //         } finally {\n//     //             setLoading(false); // Set loading to false after fetch\n//     //         }\n//     //     };\n//     //     fetchData();\n//     // }, [s_id]);\n//     // if (loading) return <p>Loading...</p>; // Display loading message\n//     // if (error) return <p>Error loading data: {error.message}</p>; // Display error message\n//     return (\n//         <div>\n//             {/* Table displaying data */}\n//             <div style={{ marginTop: \"20px\" }}>\n//                 <h2>Entity Details</h2>\n//                 <table className=\"full-width-table\">\n//                     <tbody>\n//                         <tr>\n//                             <td className=\"full-width-cell\">\n//                                 <label htmlFor=\"id\">ID: </label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"s_id\"\n//                                     name=\"s_id\"\n//                                     value={data ? data.s_id : \"\"}\n//                                     readOnly\n//                                 />\n//                             </td>\n//                             <td className=\"full-width-cell\">\n//                                 <label htmlFor=\"s_name\">Name: </label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"s_name\"\n//                                     name=\"s_name\"\n//                                     value={data ? data.s_name : \"\"}\n//                                     readOnly\n//                                 />\n//                             </td>\n//                             <td className=\"full-width-cell\">\n//                                 <label htmlFor=\"s_marks\">Marks: </label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"s_marks\"\n//                                     name=\"s_marks\"\n//                                     value={data ? data.s_marks : \"\"}\n//                                     readOnly\n//                                 />\n//                             </td>\n//                         </tr>\n//                     </tbody>\n//                 </table>\n//             </div>\n//             {/* Link to Master Page */}\n//             <div style={{ marginTop: \"20px\" }}>\n//                 <Link to=\"/reactmodule/index.html\">Go to Master Page</Link>\n//             </div>\n//         </div>\n//     );\n// }\n// export default ObjectPage;\nimport React,{useState,useEffect}from\"react\";import{Link,useParams,useLocation}from\"react-router-dom\";import{ObjectPage,ObjectPageSection,ObjectPageHeader,Text}from\"@ui5/webcomponents-react\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ObjectPage1(){const{state}=useLocation();// Use useLocation to access the state\nconst data=state?state.row:null;// Extract row data if available\nconst[loading,setLoading]=useState(!data);// Determine loading state based on data presence\nconst[error,setError]=useState(null);useEffect(()=>{if(!data){// If no data is passed, you might want to fetch it here\nsetLoading(true);// Implement fetching logic here if needed\nsetLoading(false);}},[data]);if(loading)return/*#__PURE__*/_jsx(\"p\",{children:\"Loading...\"});// Display loading message\nif(error)return/*#__PURE__*/_jsxs(\"p\",{children:[\"Error loading data: \",error.message]});// Display error message\nreturn/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(ObjectPage,{header:/*#__PURE__*/_jsx(ObjectPageHeader,{titleText:\"Details\"}),selectedSectionId:\"form\"// Make sure the default selected section is displayed\n,showHideHeaderButton:true,title:\"Object Details\"// Set the title for the ObjectPage\n,children:[/*#__PURE__*/_jsxs(ObjectPageSection,{id:\"form\",titleText:\"Form\",children:[/*#__PURE__*/_jsxs(Text,{children:[\"Complain Number: \",data?data.complainno:'N/A']}),/*#__PURE__*/_jsxs(Text,{children:[\"CPONo: \",data?data.cpono:'N/A']}),/*#__PURE__*/_jsxs(Text,{children:[\"CVEencode: \",data?data.cvencode:'N/A']})]}),/*#__PURE__*/_jsx(ObjectPageSection,{id:\"attachments\",titleText:\"Attachments\",children:/*#__PURE__*/_jsx(Text,{children:\"No attachments available.\"})})]})})// <div className=\"main\">\n//     <table className=\"form-table\">\n//         <tbody>\n//             <tr>\n//                 <td>\n//                     <label htmlFor=\"FirstName\">complainno</label><br />\n//                     <input type=\"text\" id=\"FirstName\" value={data ? data.complainno : ''} readOnly />\n//                 </td>\n//                 <td>\n//                     <label htmlFor=\"LastName\">cpono</label><br />\n//                     <input type=\"text\" id=\"LastName\" value={data ? data.cpono : ''} readOnly />\n//                 </td>\n//                 <td>\n//                     <label htmlFor=\"email\">cvencode</label><br />\n//                     <input type=\"text\" id=\"email\" value={data ? data.cvencode : ''} readOnly />\n//                 </td>\n//             </tr>\n//             {/* <tr>\n//                 <td>\n//                     <label htmlFor=\"Phone\">Phone</label><br />\n//                     <input type=\"text\" id=\"Phone\" value={data ? data.phone : ''} readOnly />\n//                 </td>\n//                 <td>\n//                     <label htmlFor=\"gen\">Gen</label><br />\n//                     <input type=\"text\" id=\"gen\" value={data ? data.gen : ''} readOnly />\n//                 </td>\n//             </tr> */}\n//         </tbody>\n//     </table>\n// </div>\n;};export default ObjectPage1;","map":{"version":3,"names":["React","useState","useEffect","Link","useParams","useLocation","ObjectPage","ObjectPageSection","ObjectPageHeader","Text","jsx","_jsx","jsxs","_jsxs","ObjectPage1","state","data","row","loading","setLoading","error","setError","children","message","header","titleText","selectedSectionId","showHideHeaderButton","title","id","complainno","cpono","cvencode"],"sources":["/home/user/projects/reactproj/reactmodule/src/pages/ObjectPage1.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { Link, useParams } from \"react-router-dom\";\n// import { getItemById } from \"api/index\"; // Adjust path as necessary\n\n// function ObjectPage() {\n//     const [data, setData] = useState(null);\n//     const [loading, setLoading] = useState(true); // Add loading state\n//     const [error, setError] = useState(null); // Add error state\n//     const { s_id } = useParams(); // Assuming you are using a route parameter for the ID\n\n//     // useEffect(() => {\n//     //     const fetchData = async () => {\n//     //         try {\n//     //             setLoading(true); // Set loading to true before fetch\n//     //             const result = await getItemById(s_id);\n//     //             setData(result || null);\n//     //         } catch (error) {\n//     //             setError(error); // Set error if there's an issue\n//     //         } finally {\n//     //             setLoading(false); // Set loading to false after fetch\n//     //         }\n//     //     };\n\n//     //     fetchData();\n//     // }, [s_id]);\n\n//     // if (loading) return <p>Loading...</p>; // Display loading message\n//     // if (error) return <p>Error loading data: {error.message}</p>; // Display error message\n\n//     return (\n//         <div>\n//             {/* Table displaying data */}\n//             <div style={{ marginTop: \"20px\" }}>\n//                 <h2>Entity Details</h2>\n//                 <table className=\"full-width-table\">\n//                     <tbody>\n//                         <tr>\n//                             <td className=\"full-width-cell\">\n//                                 <label htmlFor=\"id\">ID: </label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"s_id\"\n//                                     name=\"s_id\"\n//                                     value={data ? data.s_id : \"\"}\n//                                     readOnly\n//                                 />\n//                             </td>\n//                             <td className=\"full-width-cell\">\n//                                 <label htmlFor=\"s_name\">Name: </label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"s_name\"\n//                                     name=\"s_name\"\n//                                     value={data ? data.s_name : \"\"}\n//                                     readOnly\n//                                 />\n//                             </td>\n//                             <td className=\"full-width-cell\">\n//                                 <label htmlFor=\"s_marks\">Marks: </label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"s_marks\"\n//                                     name=\"s_marks\"\n//                                     value={data ? data.s_marks : \"\"}\n//                                     readOnly\n//                                 />\n//                             </td>\n//                         </tr>\n//                     </tbody>\n//                 </table>\n//             </div>\n\n//             {/* Link to Master Page */}\n//             <div style={{ marginTop: \"20px\" }}>\n//                 <Link to=\"/reactmodule/index.html\">Go to Master Page</Link>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default ObjectPage;\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useParams, useLocation } from \"react-router-dom\";\nimport { ObjectPage, ObjectPageSection, ObjectPageHeader, Text } from \"@ui5/webcomponents-react\";\n\nfunction ObjectPage1() {\n    const { state } = useLocation(); // Use useLocation to access the state\n    const data = state ? state.row : null; // Extract row data if available\n    const [loading, setLoading] = useState(!data); // Determine loading state based on data presence\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        if (!data) {\n            // If no data is passed, you might want to fetch it here\n            setLoading(true);\n            // Implement fetching logic here if needed\n            setLoading(false);\n        }\n    }, [data]);\n\n    if (loading) return <p>Loading...</p>; // Display loading message\n    if (error) return <p>Error loading data: {error.message}</p>; // Display error message\n\n    return (\n        <div>\n              <ObjectPage\n            header={<ObjectPageHeader titleText=\"Details\" />}\n            selectedSectionId=\"form\" // Make sure the default selected section is displayed\n            showHideHeaderButton\n            title=\"Object Details\" // Set the title for the ObjectPage\n        >\n            {/* Section for form details */}\n            <ObjectPageSection id=\"form\" titleText=\"Form\">\n                {/* You can add your form elements here */}\n                <Text>Complain Number: {data ? data.complainno : 'N/A'}</Text>\n                <Text>CPONo: {data ? data.cpono : 'N/A'}</Text>\n                <Text>CVEencode: {data ? data.cvencode : 'N/A'}</Text>\n            </ObjectPageSection>\n\n            {/* Section for attachments */}\n            <ObjectPageSection id=\"attachments\" titleText=\"Attachments\">\n                {/* You can add your attachment-related elements here */}\n                <Text>No attachments available.</Text>\n            </ObjectPageSection>\n        </ObjectPage>\n\n        </div>\n\n        // <div className=\"main\">\n        //     <table className=\"form-table\">\n        //         <tbody>\n        //             <tr>\n        //                 <td>\n        //                     <label htmlFor=\"FirstName\">complainno</label><br />\n        //                     <input type=\"text\" id=\"FirstName\" value={data ? data.complainno : ''} readOnly />\n        //                 </td>\n        //                 <td>\n        //                     <label htmlFor=\"LastName\">cpono</label><br />\n        //                     <input type=\"text\" id=\"LastName\" value={data ? data.cpono : ''} readOnly />\n        //                 </td>\n        //                 <td>\n        //                     <label htmlFor=\"email\">cvencode</label><br />\n        //                     <input type=\"text\" id=\"email\" value={data ? data.cvencode : ''} readOnly />\n        //                 </td>\n        //             </tr>\n        //             {/* <tr>\n        //                 <td>\n        //                     <label htmlFor=\"Phone\">Phone</label><br />\n        //                     <input type=\"text\" id=\"Phone\" value={data ? data.phone : ''} readOnly />\n        //                 </td>\n        //                 <td>\n        //                     <label htmlFor=\"gen\">Gen</label><br />\n        //                     <input type=\"text\" id=\"gen\" value={data ? data.gen : ''} readOnly />\n        //                 </td>\n        //             </tr> */}\n        //         </tbody>\n        //     </table>\n        // </div>\n\n    );\n};\nexport default ObjectPage1;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}