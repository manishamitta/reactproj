{"ast":null,"code":"/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\nimport assert from \"../../assert.js\";\n/**\n * Sorts the given array in-place and removes any duplicates (identified by \"===\").\n *\n * Uses Array#sort()\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n *\n * Use <code>jQuery.uniqueSort()</code> for arrays of DOMElements.\n *\n * @function\n * @since 1.58\n * @param {any[]} aArray An Array of any type\n * @alias module:sap/base/util/array/uniqueSort\n * @return {any[]} Same array as given (for chaining)\n * @public\n */\nvar fnUniqueSort = function (aArray) {\n  assert(Array.isArray(aArray), \"uniqueSort: input parameter must be an Array\");\n  var iLength = aArray.length;\n  if (iLength > 1) {\n    aArray.sort();\n    var j = 0;\n    for (var i = 1; i < iLength; i++) {\n      // invariant: i is the entry to check, j is the last unique entry known so far\n      if (aArray.indexOf(aArray[i]) === i) {\n        aArray[++j] = aArray[i];\n      }\n    }\n    // cut off the rest - if any\n    if (++j < iLength) {\n      aArray.splice(j, iLength - j);\n    }\n  }\n  return aArray;\n};\nexport default fnUniqueSort;","map":{"version":3,"names":["assert","fnUniqueSort","aArray","Array","isArray","iLength","length","sort","j","i","indexOf","splice"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-localization/dist/sap/base/util/array/uniqueSort.js"],"sourcesContent":["/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\nimport assert from \"../../assert.js\";\n/**\n * Sorts the given array in-place and removes any duplicates (identified by \"===\").\n *\n * Uses Array#sort()\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n *\n * Use <code>jQuery.uniqueSort()</code> for arrays of DOMElements.\n *\n * @function\n * @since 1.58\n * @param {any[]} aArray An Array of any type\n * @alias module:sap/base/util/array/uniqueSort\n * @return {any[]} Same array as given (for chaining)\n * @public\n */\nvar fnUniqueSort = function (aArray) {\n  assert(Array.isArray(aArray), \"uniqueSort: input parameter must be an Array\");\n  var iLength = aArray.length;\n  if (iLength > 1) {\n    aArray.sort();\n    var j = 0;\n    for (var i = 1; i < iLength; i++) {\n      // invariant: i is the entry to check, j is the last unique entry known so far\n      if (aArray.indexOf(aArray[i]) === i) {\n        aArray[++j] = aArray[i];\n      }\n    }\n    // cut off the rest - if any\n    if (++j < iLength) {\n      aArray.splice(j, iLength - j);\n    }\n  }\n  return aArray;\n};\nexport default fnUniqueSort;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,YAAY,GAAG,SAAAA,CAAUC,MAAM,EAAE;EACnCF,MAAM,CAACG,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EAAE,8CAA8C,CAAC;EAC7E,IAAIG,OAAO,GAAGH,MAAM,CAACI,MAAM;EAC3B,IAAID,OAAO,GAAG,CAAC,EAAE;IACfH,MAAM,CAACK,IAAI,CAAC,CAAC;IACb,IAAIC,CAAC,GAAG,CAAC;IACT,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,EAAEI,CAAC,EAAE,EAAE;MAChC;MACA,IAAIP,MAAM,CAACQ,OAAO,CAACR,MAAM,CAACO,CAAC,CAAC,CAAC,KAAKA,CAAC,EAAE;QACnCP,MAAM,CAAC,EAAEM,CAAC,CAAC,GAAGN,MAAM,CAACO,CAAC,CAAC;MACzB;IACF;IACA;IACA,IAAI,EAAED,CAAC,GAAGH,OAAO,EAAE;MACjBH,MAAM,CAACS,MAAM,CAACH,CAAC,EAAEH,OAAO,GAAGG,CAAC,CAAC;IAC/B;EACF;EACA,OAAON,MAAM;AACf,CAAC;AACD,eAAeD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}