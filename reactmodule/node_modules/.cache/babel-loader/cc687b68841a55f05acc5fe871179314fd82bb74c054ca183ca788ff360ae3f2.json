{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\n// Template\nimport FormTemplate from \"./generated/templates/FormTemplate.lit.js\";\n// Styles\nimport FormCss from \"./generated/themes/Form.css.js\";\nimport Title from \"./Title.js\";\nconst additionalStylesMap = new Map();\nconst StepColumn = {\n  \"S\": 1,\n  \"M\": 2,\n  \"L\": 3,\n  \"XL\": 6\n};\n/**\n * @class\n *\n * ### Overview\n *\n * The Form is a layout component that arranges labels and form fields (like input fields) pairs\n * into a specific number of columns.\n *\n * ### Structure\n *\n * - **Form** (`ui5-form`) is the top-level container component, responsible for the content layout and responsiveness.\n * - **FormGroup** (`ui5-form-group`) enables the grouping of the Form content.\n * - **FormItem** (`ui5-form-item`) is a pair of label and form fields and can be used directly in a Form, or as part of a FormGroup.\n *\n * The simplest Form (`ui5-form`) consists of a header area on top,\n * displaying a header text (see the `headingText` property) and content below - an arbitrary number of FormItems (ui5-form-item),\n * representing the pairs of label and form fields.\n *\n * And, there is also \"grouping\" available to assist the implementation of richer UIs.\n * This is enabled by the FormGroup (`ui5-form-group`) component.\n * In this case, the Form is structured into FormGroups and each FormGroup consists of FormItems.\n *\n *  ### Responsiveness\n *\n * The Form component reacts and changes its layout on predefined breakpoints.\n * Depending on its size, the Form content (FormGroups and FormItems) gets divided into one or more columns as follows:\n * - **S** (< 600px) – 1 column is recommended (default: 1)\n * - **M** (600px - 1022px) – up to 2 columns are recommended (default: 1)\n * - **L** (1023px - 1439px) - up to 3 columns are recommended (default: 2)\n * - **XL** (> 1439px) – up to 6 columns are recommended (default: 2)\n *\n * To change the layout, use the `layout` property - f.e. layout=\"S1 M2 L3 XL6\".\n *\n * ### Groups\n *\n * To make better use of screen space, there is built-in logic to determine how many columns should a FormGroup occupy.\n *\n * - **Example #1** (perfect match):\n * 4 columns and 4 groups: each group will use 1 column.\n *\n * - **Example #2** (balanced distribution):\n * 4 columns and 2 groups: each group will use 2 columns.\n * 6 columns and 2 groups: each group will use 3 columns.\n *\n * - **Example #3** (unbalanced distribution):\n * 3 columns and 2 groups: the larger one will use 2 columns, the smaller 1 column.\n * 5 columns and 3 groups: two of the groups will use 2 columns each, the smallest 1 column.\n *\n * **Note:** The size of a group element is determined by the number of FormItems assigned to it.\n * In the case of equality, the first in the DOM will use more columns, and the last - fewer columns.\n *\n * - **Example #4** (more groups than columns):\n * 3 columns and 4 groups: each FormGroup uses only 1 column, the last FormGroup will wrap on the second row.\n *\n * ### Groups Column Span\n *\n * To influence the built-in group distribution, described in the previous section,\n * you can use the FormGroup's `columnSpan` property, that defines how many columns the group should expand to.\n *\n * ### Items Column Span\n *\n * FormItem's columnSpan property defines how many columns the form item should expand to inside a form group or the form.\n *\n * ### Items Label Span\n *\n * The placement of the labels depends on the size of the used column.\n * If there is enough space, the labels are next to their associated fields, otherwise  - above the fields.\n * By default, the labels take 4/12 of the FormItem, leaving 8/12 parts to associated fields.\n * You can control what space the labels should take via the `labelSpan` property.\n *\n * **For example:** To always place the labels on top set: `labelSpan=\"S12 M12 L12 XL12\"` property.\n *\n * ### ES6 Module Import\n *\n * - import @ui5/webcomponents/dist/Form.js\";\n * - import @ui5/webcomponents/dist/FormGroup.js\";\n * - import @ui5/webcomponents/dist/FormItem.js\";\n *\n * @csspart header - Used to style the wrapper of the header.\n * @csspart layout - Used to style the element defining the form column layout.\n * @csspart column - Used to style a single column of the form column layout.\n *\n * @public\n * @since 2.0.0\n * @experimental This component is availabe since 2.0 under an experimental flag and its API and behaviour are subject to change.\n * @extends UI5Element\n */\nlet Form = class Form extends UI5Element {\n  constructor() {\n    super(...arguments);\n    /**\n     * Defines the number of columns to distribute the form content by breakpoint.\n     *\n     * Supported values:\n     * - `S` - 1 column by default (1 column is recommended)\n     * - `M` - 1 column by default (up to 2 columns are recommended)\n     * - `L` - 2 columns by default (up to 3 columns are recommended)\n     * - `XL` - 2 columns by default (up to 6 columns  are recommended)\n     *\n     * @default \"S1 M1 L2 XL2\"\n     * @public\n     */\n    this.layout = \"S1 M1 L2 XL2\";\n    /**\n     * Defines the width proportion of the labels and fields of a FormItem by breakpoint.\n     *\n     * By default, the labels take 4/12 (or 1/3) of the form item in M,L and XL sizes,\n     * and 12/12 in S size, e.g in S the label is on top of its associated field.\n     *\n     * The supported values are between 1 and 12. Greater the number, more space the label will use.\n     *\n     * **Note:** If \"12\" is set, the label will be displayed on top of its assosiated field.\n     * @default \"S12 M4 L4 XL4\"\n     * @public\n     */\n    this.labelSpan = \"S12 M4 L4 XL4\";\n    /**\n     * Defines the vertical spacing between form items.\n     *\n     * **Note:** If the Form is meant to be switched between \"non-edit\" and \"edit\" modes,\n     * we recommend using \"Large\" item spacing in \"non-edit\" mode, and \"Normal\" - for \"edit\" mode,\n     * to avoid \"jumping\" effect, caused by the hight difference between texts in \"non-edit\" mode and the input fields in \"edit\" mode.\n     *\n     * @default \"Normal\"\n     * @public\n     */\n    this.itemSpacing = \"Normal\";\n    /**\n     * @private\n     */\n    this.columnsS = 1;\n    this.labelSpanS = 12;\n    this.columnsM = 1;\n    this.labelSpanM = 4;\n    this.columnsL = 2;\n    this.labelSpanL = 4;\n    this.columnsXl = 2;\n    this.labelSpanXl = 4;\n  }\n  onBeforeRendering() {\n    // Parse the layout and set it to the FormGroups/FormItems.\n    this.setColumnLayout();\n    // Parse the labelSpan and set it to the FormGroups/FormItems.\n    this.setLabelSpan();\n    // Define how many columns a group should take.\n    this.setGroupsColSpan();\n  }\n  onAfterRendering() {\n    // Create additional CSS for number of columns that are not supported by default.\n    this.createAdditionalCSSStyleSheet();\n  }\n  setColumnLayout() {\n    const layoutArr = this.layout.split(\" \");\n    layoutArr.forEach(breakpoint => {\n      if (breakpoint.startsWith(\"S\")) {\n        this.columnsS = parseInt(breakpoint.slice(1));\n      } else if (breakpoint.startsWith(\"M\")) {\n        this.columnsM = parseInt(breakpoint.slice(1));\n      } else if (breakpoint.startsWith(\"L\")) {\n        this.columnsL = parseInt(breakpoint.slice(1));\n      } else if (breakpoint.startsWith(\"XL\")) {\n        this.columnsXl = parseInt(breakpoint.slice(2));\n      }\n    });\n  }\n  setLabelSpan() {\n    this.labelSpan.split(\" \").forEach(breakpoint => {\n      if (breakpoint.startsWith(\"S\")) {\n        this.labelSpanS = parseInt(breakpoint.slice(1));\n      } else if (breakpoint.startsWith(\"M\")) {\n        this.labelSpanM = parseInt(breakpoint.slice(1));\n      } else if (breakpoint.startsWith(\"L\")) {\n        this.labelSpanL = parseInt(breakpoint.slice(1));\n      } else if (breakpoint.startsWith(\"XL\")) {\n        this.labelSpanXl = parseInt(breakpoint.slice(2));\n      }\n    });\n    this.items.forEach(item => {\n      item.labelSpan = this.labelSpan;\n      item.itemSpacing = this.itemSpacing;\n    });\n  }\n  setGroupsColSpan() {\n    if (!this.hasGroupItems) {\n      return;\n    }\n    const itemsCount = this.items.length;\n    const sortedItems = [...this.items].sort((itemA, itemB) => {\n      return itemB?.items.length - itemA?.items.length;\n    });\n    sortedItems.forEach((item, idx) => {\n      item.colsXl = this.getGroupsColSpan(this.columnsXl, itemsCount, idx, item);\n      item.colsL = this.getGroupsColSpan(this.columnsL, itemsCount, idx, item);\n      item.colsM = this.getGroupsColSpan(this.columnsM, itemsCount, idx, item);\n      item.colsS = this.getGroupsColSpan(this.columnsS, itemsCount, idx, item);\n    });\n  }\n  getGroupsColSpan(cols, groups, index, group) {\n    // Case 0: column span is set from outside.\n    if (group.columnSpan) {\n      return group.columnSpan;\n    }\n    // CASE 1: The number of available columns match the number of groups, or only 1 column is available - each group takes 1 column.\n    // For example: 1 column - 1 group, 2 columns - 2 groups, 3 columns - 3 groups, 4columns - 4 groups\n    if (cols === 1 || cols <= groups) {\n      return 1;\n    }\n    // CASE 2: The number of available columns IS multiple of the number of groups.\n    // For example: 2 column - 1 group, 3 columns - 1 groups, 4 columns - 1 group, 4 columns - 2 groups\n    if (cols % groups === 0) {\n      return cols / groups;\n    }\n    // CASE 3: The number of available columns IS NOT multiple of the number of groups.\n    const MIN_COL_SPAN = 1;\n    const delta = cols - groups;\n    // 7 cols & 4 groups => 2, 2, 2, 1\n    if (delta <= groups) {\n      return index < delta ? MIN_COL_SPAN + 1 : MIN_COL_SPAN;\n    }\n    // 7 cols & 3 groups => 3, 2, 2\n    return index === 0 ? MIN_COL_SPAN + (delta - groups) + 1 : MIN_COL_SPAN + 1;\n  }\n  get hasGroupItems() {\n    return this.items.some(item => item.isGroup);\n  }\n  get hasHeader() {\n    return this.hasCustomHeader || !!this.headerText;\n  }\n  get hasCustomHeader() {\n    return !!this.header.length;\n  }\n  get ariaLabelledByID() {\n    return this.hasCustomHeader ? undefined : `${this._id}-header-text`;\n  }\n  get groupItemsInfo() {\n    return this.items.map(groupItem => {\n      return {\n        groupItem,\n        classes: `ui5-form-column-spanL-${groupItem.colsL} ui5-form-column-spanXL-${groupItem.colsXl} ui5-form-column-spanM-${groupItem.colsM} ui5-form-column-spanS-${groupItem.colsS}`,\n        items: this.getItemsInfo(Array.from(groupItem.children))\n      };\n    });\n  }\n  get itemsInfo() {\n    return this.getItemsInfo();\n  }\n  getItemsInfo(items) {\n    return (items || this.items).map(item => {\n      return {\n        item,\n        classes: item.columnSpan ? `ui5-form-item-span-${item.columnSpan}` : \"\"\n      };\n    });\n  }\n  createAdditionalCSSStyleSheet() {\n    [{\n      breakpoint: \"S\",\n      columns: this.columnsS\n    }, {\n      breakpoint: \"M\",\n      columns: this.columnsM\n    }, {\n      breakpoint: \"L\",\n      columns: this.columnsL\n    }, {\n      breakpoint: \"XL\",\n      columns: this.columnsXl\n    }].forEach(step => {\n      const additionalStyle = this.getAdditionalCSS(step.breakpoint, step.columns);\n      if (additionalStyle) {\n        this.shadowRoot.adoptedStyleSheets = [...this.shadowRoot.adoptedStyleSheets, this.getCSSStyleSheet(additionalStyle)];\n      }\n    });\n  }\n  getAdditionalCSS(step, colsNumber) {\n    if (StepColumn[step] >= colsNumber) {\n      return;\n    }\n    const key = `${step}-${colsNumber}`;\n    if (!additionalStylesMap.has(key)) {\n      let containerQuery;\n      let supporedColumnsNumber = StepColumn.S;\n      let stepSpanCSS = \"\";\n      let cols = colsNumber;\n      if (step === \"S\") {\n        supporedColumnsNumber = StepColumn.S;\n        containerQuery = `@container (max-width: 599px) {`;\n      } else if (step === \"M\") {\n        supporedColumnsNumber = StepColumn.M;\n        containerQuery = `@container (width > 599px) and (width < 1024px) {`;\n      } else if (step === \"L\") {\n        supporedColumnsNumber = StepColumn.L;\n        containerQuery = `@container (width > 1023px) and (width < 1439px) {`;\n      } else if (step === \"XL\") {\n        containerQuery = `@container (min-width: 1440px) {`;\n        supporedColumnsNumber = StepColumn.XL;\n      }\n      while (cols > supporedColumnsNumber) {\n        stepSpanCSS += `\n\t\t\t\t:host([columns-${step.toLocaleLowerCase()}=\"${cols}\"]) .ui5-form-layout {\n\t\t\t\t\tgrid-template-columns: repeat(${cols}, 1fr);\n\t\t\t\t}\n\n\t\t\t\t.ui5-form-column-span${step}-${cols},\n\t\t\t\t.ui5-form-item-span-${cols} {\n\t\t\t\t\tgrid-column: span ${cols};\n\t\t\t\t}\n\n\t\t\t\t.ui5-form-column-span${step}-${cols} .ui5-form-group-layout {\n\t\t\t\t\tgrid-template-columns: repeat(${cols}, 1fr);\n\t\t\t\t}\n\t\t\t\t`;\n        cols--;\n      }\n      const css = `${containerQuery}${stepSpanCSS}}`;\n      additionalStylesMap.set(key, css);\n    }\n    return additionalStylesMap.get(key);\n  }\n  getCSSStyleSheet(cssText) {\n    const style = new CSSStyleSheet();\n    style.replaceSync(cssText);\n    return style;\n  }\n};\n__decorate([property()], Form.prototype, \"layout\", void 0);\n__decorate([property()], Form.prototype, \"labelSpan\", void 0);\n__decorate([property()], Form.prototype, \"headerText\", void 0);\n__decorate([property()], Form.prototype, \"itemSpacing\", void 0);\n__decorate([slot({\n  type: HTMLElement\n})], Form.prototype, \"header\", void 0);\n__decorate([slot({\n  type: HTMLElement,\n  \"default\": true,\n  individualSlots: true,\n  invalidateOnChildChange: true\n})], Form.prototype, \"items\", void 0);\n__decorate([property({\n  type: Number\n})], Form.prototype, \"columnsS\", void 0);\n__decorate([property({\n  type: Number\n})], Form.prototype, \"labelSpanS\", void 0);\n__decorate([property({\n  type: Number\n})], Form.prototype, \"columnsM\", void 0);\n__decorate([property({\n  type: Number\n})], Form.prototype, \"labelSpanM\", void 0);\n__decorate([property({\n  type: Number\n})], Form.prototype, \"columnsL\", void 0);\n__decorate([property({\n  type: Number\n})], Form.prototype, \"labelSpanL\", void 0);\n__decorate([property({\n  type: Number\n})], Form.prototype, \"columnsXl\", void 0);\n__decorate([property({\n  type: Number\n})], Form.prototype, \"labelSpanXl\", void 0);\nForm = __decorate([customElement({\n  tag: \"ui5-form\",\n  renderer: litRender,\n  styles: FormCss,\n  template: FormTemplate,\n  dependencies: [Title]\n})], Form);\nForm.define();\nexport default Form;","map":{"version":3,"names":["UI5Element","customElement","property","slot","litRender","FormTemplate","FormCss","Title","additionalStylesMap","Map","StepColumn","Form","constructor","layout","labelSpan","itemSpacing","columnsS","labelSpanS","columnsM","labelSpanM","columnsL","labelSpanL","columnsXl","labelSpanXl","onBeforeRendering","setColumnLayout","setLabelSpan","setGroupsColSpan","onAfterRendering","createAdditionalCSSStyleSheet","layoutArr","split","forEach","breakpoint","startsWith","parseInt","slice","items","item","hasGroupItems","itemsCount","length","sortedItems","sort","itemA","itemB","idx","colsXl","getGroupsColSpan","colsL","colsM","colsS","cols","groups","index","group","columnSpan","MIN_COL_SPAN","delta","some","isGroup","hasHeader","hasCustomHeader","headerText","header","ariaLabelledByID","undefined","_id","groupItemsInfo","map","groupItem","classes","getItemsInfo","Array","from","children","itemsInfo","columns","step","additionalStyle","getAdditionalCSS","shadowRoot","adoptedStyleSheets","getCSSStyleSheet","colsNumber","key","has","containerQuery","supporedColumnsNumber","S","stepSpanCSS","M","L","XL","toLocaleLowerCase","css","set","get","cssText","style","CSSStyleSheet","replaceSync","__decorate","type","HTMLElement","individualSlots","invalidateOnChildChange","Number","tag","renderer","styles","template","dependencies","define"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents/src/Form.ts"],"sourcesContent":["import UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\n\n// Template\nimport FormTemplate from \"./generated/templates/FormTemplate.lit.js\";\n\n// Styles\nimport FormCss from \"./generated/themes/Form.css.js\";\n\nimport Title from \"./Title.js\";\nimport type FormItemSpacing from \"./types/FormItemSpacing.js\";\nimport type FormGroup from \"./FormGroup.js\";\n\nconst additionalStylesMap = new Map<string, string>();\n\nconst StepColumn = {\n\t\"S\": 1,\n\t\"M\": 2,\n\t\"L\": 3,\n\t\"XL\": 6,\n};\n\n/**\n * Interface for components that can be slotted inside `ui5-form` as items.\n * @public\n * @experimental\n * @since 2.0.0\n */\ninterface IFormItem extends HTMLElement {\n\tlabelSpan: string\n\titemSpacing: `${FormItemSpacing}`;\n\treadonly isGroup: boolean;\n\tcolsXl?: number;\n\tcolsL?: number;\n\tcolsM?: number;\n\tcolsS?: number;\n\tcolumnSpan?: number;\n}\n\ntype GroupItemsInfo = {\n\tgroupItem: IFormItem,\n\tclasses: string,\n\titems: Array<ItemsInfo>,\n}\n\ntype ItemsInfo = {\n\titem: IFormItem,\n\tclasses: string,\n}\n\n/**\n * @class\n *\n * ### Overview\n *\n * The Form is a layout component that arranges labels and form fields (like input fields) pairs\n * into a specific number of columns.\n *\n * ### Structure\n *\n * - **Form** (`ui5-form`) is the top-level container component, responsible for the content layout and responsiveness.\n * - **FormGroup** (`ui5-form-group`) enables the grouping of the Form content.\n * - **FormItem** (`ui5-form-item`) is a pair of label and form fields and can be used directly in a Form, or as part of a FormGroup.\n *\n * The simplest Form (`ui5-form`) consists of a header area on top,\n * displaying a header text (see the `headingText` property) and content below - an arbitrary number of FormItems (ui5-form-item),\n * representing the pairs of label and form fields.\n *\n * And, there is also \"grouping\" available to assist the implementation of richer UIs.\n * This is enabled by the FormGroup (`ui5-form-group`) component.\n * In this case, the Form is structured into FormGroups and each FormGroup consists of FormItems.\n *\n *  ### Responsiveness\n *\n * The Form component reacts and changes its layout on predefined breakpoints.\n * Depending on its size, the Form content (FormGroups and FormItems) gets divided into one or more columns as follows:\n * - **S** (< 600px) – 1 column is recommended (default: 1)\n * - **M** (600px - 1022px) – up to 2 columns are recommended (default: 1)\n * - **L** (1023px - 1439px) - up to 3 columns are recommended (default: 2)\n * - **XL** (> 1439px) – up to 6 columns are recommended (default: 2)\n *\n * To change the layout, use the `layout` property - f.e. layout=\"S1 M2 L3 XL6\".\n *\n * ### Groups\n *\n * To make better use of screen space, there is built-in logic to determine how many columns should a FormGroup occupy.\n *\n * - **Example #1** (perfect match):\n * 4 columns and 4 groups: each group will use 1 column.\n *\n * - **Example #2** (balanced distribution):\n * 4 columns and 2 groups: each group will use 2 columns.\n * 6 columns and 2 groups: each group will use 3 columns.\n *\n * - **Example #3** (unbalanced distribution):\n * 3 columns and 2 groups: the larger one will use 2 columns, the smaller 1 column.\n * 5 columns and 3 groups: two of the groups will use 2 columns each, the smallest 1 column.\n *\n * **Note:** The size of a group element is determined by the number of FormItems assigned to it.\n * In the case of equality, the first in the DOM will use more columns, and the last - fewer columns.\n *\n * - **Example #4** (more groups than columns):\n * 3 columns and 4 groups: each FormGroup uses only 1 column, the last FormGroup will wrap on the second row.\n *\n * ### Groups Column Span\n *\n * To influence the built-in group distribution, described in the previous section,\n * you can use the FormGroup's `columnSpan` property, that defines how many columns the group should expand to.\n *\n * ### Items Column Span\n *\n * FormItem's columnSpan property defines how many columns the form item should expand to inside a form group or the form.\n *\n * ### Items Label Span\n *\n * The placement of the labels depends on the size of the used column.\n * If there is enough space, the labels are next to their associated fields, otherwise  - above the fields.\n * By default, the labels take 4/12 of the FormItem, leaving 8/12 parts to associated fields.\n * You can control what space the labels should take via the `labelSpan` property.\n *\n * **For example:** To always place the labels on top set: `labelSpan=\"S12 M12 L12 XL12\"` property.\n *\n * ### ES6 Module Import\n *\n * - import @ui5/webcomponents/dist/Form.js\";\n * - import @ui5/webcomponents/dist/FormGroup.js\";\n * - import @ui5/webcomponents/dist/FormItem.js\";\n *\n * @csspart header - Used to style the wrapper of the header.\n * @csspart layout - Used to style the element defining the form column layout.\n * @csspart column - Used to style a single column of the form column layout.\n *\n * @public\n * @since 2.0.0\n * @experimental This component is availabe since 2.0 under an experimental flag and its API and behaviour are subject to change.\n * @extends UI5Element\n */\n@customElement({\n\ttag: \"ui5-form\",\n\trenderer: litRender,\n\tstyles: FormCss,\n\ttemplate: FormTemplate,\n\tdependencies: [Title],\n})\nclass Form extends UI5Element {\n\t/**\n\t * Defines the number of columns to distribute the form content by breakpoint.\n\t *\n\t * Supported values:\n\t * - `S` - 1 column by default (1 column is recommended)\n\t * - `M` - 1 column by default (up to 2 columns are recommended)\n\t * - `L` - 2 columns by default (up to 3 columns are recommended)\n\t * - `XL` - 2 columns by default (up to 6 columns  are recommended)\n\t *\n\t * @default \"S1 M1 L2 XL2\"\n\t * @public\n\t */\n\t@property()\n\tlayout = \"S1 M1 L2 XL2\"\n\n\t/**\n\t * Defines the width proportion of the labels and fields of a FormItem by breakpoint.\n\t *\n\t * By default, the labels take 4/12 (or 1/3) of the form item in M,L and XL sizes,\n\t * and 12/12 in S size, e.g in S the label is on top of its associated field.\n\t *\n\t * The supported values are between 1 and 12. Greater the number, more space the label will use.\n\t *\n\t * **Note:** If \"12\" is set, the label will be displayed on top of its assosiated field.\n\t * @default \"S12 M4 L4 XL4\"\n\t * @public\n\t */\n\t@property()\n\tlabelSpan = \"S12 M4 L4 XL4\";\n\n\t/**\n\t * Defines the header text of the component.\n\t *\n\t * **Note:** The property gets overridden by the `header` slot.\n\t *\n\t * @default undefined\n\t * @public\n\t */\n\t@property()\n\theaderText?: string;\n\n\t/**\n\t * Defines the vertical spacing between form items.\n\t *\n\t * **Note:** If the Form is meant to be switched between \"non-edit\" and \"edit\" modes,\n\t * we recommend using \"Large\" item spacing in \"non-edit\" mode, and \"Normal\" - for \"edit\" mode,\n\t * to avoid \"jumping\" effect, caused by the hight difference between texts in \"non-edit\" mode and the input fields in \"edit\" mode.\n\t *\n\t * @default \"Normal\"\n\t * @public\n\t */\n\t@property()\n\titemSpacing: `${FormItemSpacing}` = \"Normal\";\n\n\t/**\n\t * Defines the component header area.\n\t *\n\t * **Note:** When a `header` is provided, the `headerText` property is ignored.\n\t * @public\n\t */\n\t@slot({ type: HTMLElement })\n\theader!: Array<HTMLElement>;\n\n\t/**\n\t * Defines the component content - FormGroups or FormItems.\n\t *\n\t * **Note:** Mixing FormGroups and standalone FormItems (not belonging to a group) is not supported.\n\t * Either use FormGroups and make sure all FormItems are part of a FormGroup, or use just FormItems without any FormGroups.\n\t * @public\n\t */\n\t@slot({\n\t\ttype: HTMLElement,\n\t\t\"default\": true,\n\t\tindividualSlots: true,\n\t\tinvalidateOnChildChange: true,\n\t})\n\titems!: Array<IFormItem>;\n\n\t/**\n\t * @private\n\t */\n\t@property({ type: Number })\n\tcolumnsS = 1;\n\t@property({ type: Number })\n\tlabelSpanS = 12\n\n\t@property({ type: Number })\n\tcolumnsM = 1;\n\t@property({ type: Number })\n\tlabelSpanM = 4;\n\n\t@property({ type: Number })\n\tcolumnsL = 2;\n\t@property({ type: Number })\n\tlabelSpanL = 4;\n\n\t@property({ type: Number })\n\tcolumnsXl = 2;\n\t@property({ type: Number })\n\tlabelSpanXl = 4;\n\n\tonBeforeRendering() {\n\t\t// Parse the layout and set it to the FormGroups/FormItems.\n\t\tthis.setColumnLayout();\n\n\t\t// Parse the labelSpan and set it to the FormGroups/FormItems.\n\t\tthis.setLabelSpan();\n\n\t\t// Define how many columns a group should take.\n\t\tthis.setGroupsColSpan();\n\t}\n\n\tonAfterRendering() {\n\t\t// Create additional CSS for number of columns that are not supported by default.\n\t\tthis.createAdditionalCSSStyleSheet();\n\t}\n\n\tsetColumnLayout() {\n\t\tconst layoutArr = this.layout.split(\" \");\n\t\tlayoutArr.forEach((breakpoint: string) => {\n\t\t\tif (breakpoint.startsWith(\"S\")) {\n\t\t\t\tthis.columnsS = parseInt(breakpoint.slice(1));\n\t\t\t} else if (breakpoint.startsWith(\"M\")) {\n\t\t\t\tthis.columnsM = parseInt(breakpoint.slice(1));\n\t\t\t} else if (breakpoint.startsWith(\"L\")) {\n\t\t\t\tthis.columnsL = parseInt(breakpoint.slice(1));\n\t\t\t} else if (breakpoint.startsWith(\"XL\")) {\n\t\t\t\tthis.columnsXl = parseInt(breakpoint.slice(2));\n\t\t\t}\n\t\t});\n\t}\n\n\tsetLabelSpan() {\n\t\tthis.labelSpan.split(\" \").forEach((breakpoint: string) => {\n\t\t\tif (breakpoint.startsWith(\"S\")) {\n\t\t\t\tthis.labelSpanS = parseInt(breakpoint.slice(1));\n\t\t\t} else if (breakpoint.startsWith(\"M\")) {\n\t\t\t\tthis.labelSpanM = parseInt(breakpoint.slice(1));\n\t\t\t} else if (breakpoint.startsWith(\"L\")) {\n\t\t\t\tthis.labelSpanL = parseInt(breakpoint.slice(1));\n\t\t\t} else if (breakpoint.startsWith(\"XL\")) {\n\t\t\t\tthis.labelSpanXl = parseInt(breakpoint.slice(2));\n\t\t\t}\n\t\t});\n\n\t\tthis.items.forEach((item: IFormItem) => {\n\t\t\titem.labelSpan = this.labelSpan;\n\t\t\titem.itemSpacing = this.itemSpacing;\n\t\t});\n\t}\n\n\tsetGroupsColSpan() {\n\t\tif (!this.hasGroupItems) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst itemsCount = this.items.length;\n\t\tconst sortedItems = [...this.items].sort((itemA: IFormItem, itemB: IFormItem) => {\n\t\t\treturn (itemB as FormGroup)?.items.length - (itemA as FormGroup)?.items.length;\n\t\t});\n\n\t\tsortedItems.forEach((item: IFormItem, idx: number) => {\n\t\t\titem.colsXl = this.getGroupsColSpan(this.columnsXl, itemsCount, idx, item);\n\t\t\titem.colsL = this.getGroupsColSpan(this.columnsL, itemsCount, idx, item);\n\t\t\titem.colsM = this.getGroupsColSpan(this.columnsM, itemsCount, idx, item);\n\t\t\titem.colsS = this.getGroupsColSpan(this.columnsS, itemsCount, idx, item);\n\t\t});\n\t}\n\n\tgetGroupsColSpan(cols: number, groups: number, index: number, group: IFormItem): number {\n\t\t// Case 0: column span is set from outside.\n\t\tif (group.columnSpan) {\n\t\t\treturn group.columnSpan;\n\t\t}\n\n\t\t// CASE 1: The number of available columns match the number of groups, or only 1 column is available - each group takes 1 column.\n\t\t// For example: 1 column - 1 group, 2 columns - 2 groups, 3 columns - 3 groups, 4columns - 4 groups\n\t\tif (cols === 1 || cols <= groups) {\n\t\t\treturn 1;\n\t\t}\n\n\t\t// CASE 2: The number of available columns IS multiple of the number of groups.\n\t\t// For example: 2 column - 1 group, 3 columns - 1 groups, 4 columns - 1 group, 4 columns - 2 groups\n\t\tif (cols % groups === 0) {\n\t\t\treturn cols / groups;\n\t\t}\n\n\t\t// CASE 3: The number of available columns IS NOT multiple of the number of groups.\n\t\tconst MIN_COL_SPAN = 1;\n\t\tconst delta = cols - groups;\n\n\t\t// 7 cols & 4 groups => 2, 2, 2, 1\n\t\tif (delta <= groups) {\n\t\t\treturn index < delta ? MIN_COL_SPAN + 1 : MIN_COL_SPAN;\n\t\t}\n\n\t\t// 7 cols & 3 groups => 3, 2, 2\n\t\treturn index === 0 ? MIN_COL_SPAN + (delta - groups) + 1 : MIN_COL_SPAN + 1;\n\t}\n\n\tget hasGroupItems(): boolean {\n\t\treturn this.items.some((item: IFormItem) => item.isGroup);\n\t}\n\n\tget hasHeader(): boolean {\n\t\treturn this.hasCustomHeader || !!this.headerText;\n\t}\n\n\tget hasCustomHeader(): boolean {\n\t\treturn !!this.header.length;\n\t}\n\n\tget ariaLabelledByID(): string | undefined {\n\t\treturn this.hasCustomHeader ? undefined : `${this._id}-header-text`;\n\t}\n\n\tget groupItemsInfo(): Array<GroupItemsInfo> {\n\t\treturn this.items.map((groupItem: IFormItem) => {\n\t\t\treturn {\n\t\t\t\tgroupItem,\n\t\t\t\tclasses: `ui5-form-column-spanL-${groupItem.colsL} ui5-form-column-spanXL-${groupItem.colsXl} ui5-form-column-spanM-${groupItem.colsM} ui5-form-column-spanS-${groupItem.colsS}`,\n\t\t\t\titems: this.getItemsInfo((Array.from(groupItem.children) as Array<IFormItem>)),\n\t\t\t};\n\t\t});\n\t}\n\n\tget itemsInfo(): Array<ItemsInfo> {\n\t\treturn this.getItemsInfo();\n\t}\n\n\tgetItemsInfo(items?: Array<IFormItem>): Array<ItemsInfo> {\n\t\treturn (items || this.items).map((item: IFormItem) => {\n\t\t\treturn {\n\t\t\t\titem,\n\t\t\t\tclasses: item.columnSpan ? `ui5-form-item-span-${item.columnSpan}` : \"\",\n\t\t\t};\n\t\t});\n\t}\n\n\tcreateAdditionalCSSStyleSheet() {\n\t\t[\n\t\t\t{ breakpoint: \"S\", columns: this.columnsS },\n\t\t\t{ breakpoint: \"M\", columns: this.columnsM },\n\t\t\t{ breakpoint: \"L\", columns: this.columnsL },\n\t\t\t{ breakpoint: \"XL\", columns: this.columnsXl },\n\t\t].forEach(step => {\n\t\t\tconst additionalStyle: string | undefined = this.getAdditionalCSS(step.breakpoint, step.columns);\n\n\t\t\tif (additionalStyle) {\n\t\t\t\tthis.shadowRoot!.adoptedStyleSheets = [...this.shadowRoot!.adoptedStyleSheets, this.getCSSStyleSheet(additionalStyle)];\n\t\t\t}\n\t\t});\n\t}\n\n\tgetAdditionalCSS(step: string, colsNumber: number): string | undefined {\n\t\tif (StepColumn[step as keyof typeof StepColumn] >= colsNumber) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst key = `${step}-${colsNumber}`;\n\n\t\tif (!additionalStylesMap.has(key)) {\n\t\t\tlet containerQuery;\n\t\t\tlet supporedColumnsNumber = StepColumn.S;\n\t\t\tlet stepSpanCSS = \"\";\n\t\t\tlet cols = colsNumber;\n\n\t\t\tif (step === \"S\") {\n\t\t\t\tsupporedColumnsNumber = StepColumn.S;\n\t\t\t\tcontainerQuery = `@container (max-width: 599px) {`;\n\t\t\t} else if (step === \"M\") {\n\t\t\t\tsupporedColumnsNumber = StepColumn.M;\n\t\t\t\tcontainerQuery = `@container (width > 599px) and (width < 1024px) {`;\n\t\t\t} else if (step === \"L\") {\n\t\t\t\tsupporedColumnsNumber = StepColumn.L;\n\t\t\t\tcontainerQuery = `@container (width > 1023px) and (width < 1439px) {`;\n\t\t\t} else if (step === \"XL\") {\n\t\t\t\tcontainerQuery = `@container (min-width: 1440px) {`;\n\t\t\t\tsupporedColumnsNumber = StepColumn.XL;\n\t\t\t}\n\n\t\t\twhile (cols > supporedColumnsNumber) {\n\t\t\t\tstepSpanCSS += `\n\t\t\t\t:host([columns-${step.toLocaleLowerCase()}=\"${cols}\"]) .ui5-form-layout {\n\t\t\t\t\tgrid-template-columns: repeat(${cols}, 1fr);\n\t\t\t\t}\n\n\t\t\t\t.ui5-form-column-span${step}-${cols},\n\t\t\t\t.ui5-form-item-span-${cols} {\n\t\t\t\t\tgrid-column: span ${cols};\n\t\t\t\t}\n\n\t\t\t\t.ui5-form-column-span${step}-${cols} .ui5-form-group-layout {\n\t\t\t\t\tgrid-template-columns: repeat(${cols}, 1fr);\n\t\t\t\t}\n\t\t\t\t`;\n\t\t\t\tcols--;\n\t\t\t}\n\n\t\t\tconst css = `${containerQuery}${stepSpanCSS}}`;\n\t\t\tadditionalStylesMap.set(key, css);\n\t\t}\n\n\t\treturn additionalStylesMap.get(key)!;\n\t}\n\n\tgetCSSStyleSheet(cssText: string): CSSStyleSheet {\n\t\tconst style = new CSSStyleSheet();\n\t\tstyle.replaceSync(cssText);\n\t\treturn style;\n\t}\n}\n\nForm.define();\n\nexport default Form;\nexport {\n\tIFormItem,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}