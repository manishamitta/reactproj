{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar DateRangePicker_1;\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport { renderFinished } from \"@ui5/webcomponents-base/dist/Render.js\";\nimport CalendarDate from \"@ui5/webcomponents-localization/dist/dates/CalendarDate.js\";\nimport modifyDateBy from \"@ui5/webcomponents-localization/dist/dates/modifyDateBy.js\";\nimport getTodayUTCTimestamp from \"@ui5/webcomponents-localization/dist/dates/getTodayUTCTimestamp.js\";\nimport { DATERANGE_DESCRIPTION, DATERANGEPICKER_POPOVER_ACCESSIBLE_NAME } from \"./generated/i18n/i18n-defaults.js\";\nimport DateRangePickerTemplate from \"./generated/templates/DateRangePickerTemplate.lit.js\";\n// Styles\nimport DateRangePickerCss from \"./generated/themes/DateRangePicker.css.js\";\nimport DatePicker from \"./DatePicker.js\";\nimport CalendarDateRange from \"./CalendarDateRange.js\";\nconst DEFAULT_DELIMITER = \"-\";\n/**\n * @class\n *\n * ### Overview\n * The DateRangePicker enables the users to enter a localized date range using touch, mouse, keyboard input, or by selecting a date range in the calendar.\n *\n * ### Usage\n * The user can enter a date by:\n * Using the calendar that opens in a popup or typing it in directly in the input field (not available for mobile devices).\n * For the `ui5-daterange-picker`\n * ### ES6 Module Import\n *\n * `import \"@ui5/webcomponents/dist/DateRangePicker.js\";`\n *\n * ### Keyboard Handling\n * The `ui5-daterange-picker` provides advanced keyboard handling.\n *\n * When the `ui5-daterange-picker` input field is focused the user can\n * increment or decrement respectively the range start or end date, depending on where the cursor is.\n * The following shortcuts are available:\n *\n * - [Page Down] - Decrements the corresponding day of the month by one\n * - [Shift] + [Page Down] - Decrements the corresponding month by one\n * - [Shift] + [Ctrl] + [Page Down] - Decrements the corresponding year by one\n * - [Page Up] - Increments the corresponding day of the month by one\n * - [Shift] + [Page Up] - Increments the corresponding month by one\n * - [Shift] + [Ctrl] + [Page Up] - Increments the corresponding year by one\n * @constructor\n * @extends DatePicker\n * @since 1.0.0-rc.8\n * @public\n */\nlet DateRangePicker = DateRangePicker_1 = class DateRangePicker extends DatePicker {\n  get formFormattedValue() {\n    const values = this._splitValueByDelimiter(this.value || \"\").filter(Boolean);\n    if (values.length && this.name) {\n      const formData = new FormData();\n      for (let i = 0; i < values.length; i++) {\n        formData.append(this.name, values[i]);\n      }\n      return formData;\n    }\n    return this.value;\n  }\n  constructor() {\n    super();\n    /**\n    * Determines the symbol which separates the dates.\n    * If not supplied, the default time interval delimiter for the current locale will be used.\n    * @default \"-\"\n    * @public\n    */\n    this.delimiter = \"-\";\n    this._prevDelimiter = null;\n  }\n  /**\n   * **Note:** The getter method is inherited and not supported. If called it will return an empty value.\n   * @public\n   * @default null\n   */\n  get dateValue() {\n    return null;\n  }\n  /**\n   * **Note:** The getter method is inherited and not supported. If called it will return an empty value.\n   * @public\n   * @default null\n   */\n  get dateValueUTC() {\n    return null;\n  }\n  get _startDateTimestamp() {\n    return this._extractFirstTimestamp(this.value);\n  }\n  get _endDateTimestamp() {\n    return this._extractLastTimestamp(this.value);\n  }\n  get _tempTimestamp() {\n    return this._tempValue && this.getFormat().parse(this._tempValue, true).getTime() / 1000;\n  }\n  /**\n   * Required by DatePicker.js\n   * @override\n   */\n  get _calendarSelectionMode() {\n    return \"Range\";\n  }\n  /**\n   * Required by DatePicker.js - set the calendar focus on the first selected date (or today if not set)\n   * @override\n   */\n  get _calendarTimestamp() {\n    return this._tempTimestamp || this._startDateTimestamp || getTodayUTCTimestamp(this._primaryCalendarType);\n  }\n  /**\n   * Required by DatePicker.js\n   * @override\n   */\n  get _calendarSelectedDates() {\n    if (this._tempValue) {\n      return [this._tempValue];\n    }\n    if (this.value && this._checkValueValidity(this.value)) {\n      return this._splitValueByDelimiter(this.value);\n    }\n    return [];\n  }\n  /**\n   * Returns the start date of the currently selected range as JavaScript Date instance.\n   * @public\n   * @default null\n   */\n  get startDateValue() {\n    return CalendarDate.fromTimestamp(this._startDateTimestamp * 1000).toLocalJSDate();\n  }\n  /**\n   * Returns the end date of the currently selected range as JavaScript Date instance.\n   * @public\n   * @default null\n   */\n  get endDateValue() {\n    return CalendarDate.fromTimestamp(this._endDateTimestamp * 1000).toLocalJSDate();\n  }\n  get startValue() {\n    return this._calendarSelectedDates[0] || \"\";\n  }\n  get endValue() {\n    return this._calendarSelectedDates[1] || \"\";\n  }\n  /**\n   * @override\n   */\n  get _placeholder() {\n    return this.placeholder !== undefined ? this.placeholder : `${this._displayFormat} ${this._effectiveDelimiter} ${this._displayFormat}`;\n  }\n  /**\n   * @override\n   */\n  get dateAriaDescription() {\n    return DateRangePicker_1.i18nBundle.getText(DATERANGE_DESCRIPTION);\n  }\n  /**\n   * @override\n   */\n  get pickerAccessibleName() {\n    return DateRangePicker_1.i18nBundle.getText(DATERANGEPICKER_POPOVER_ACCESSIBLE_NAME);\n  }\n  /**\n   * @override\n   */\n  async _onInputSubmit() {\n    const input = this._getInput();\n    const caretPos = input.getCaretPosition();\n    await renderFinished();\n    input.setCaretPosition(caretPos); // Return the caret on the previous position after rendering\n  }\n  /**\n   * @override\n   */\n  onResponsivePopoverAfterClose() {\n    this._tempValue = \"\"; // reset _tempValue on popover close\n    super.onResponsivePopoverAfterClose();\n  }\n  /**\n   * @override\n   */\n  isValid(value) {\n    const parts = this._splitValueByDelimiter(value);\n    return parts.length <= 2 && parts.every(dateString => super.isValid(dateString)); // must be at most 2 dates and each must be valid\n  }\n  /**\n   * @override\n   */\n  isInValidRange(value) {\n    return this._splitValueByDelimiter(value).every(dateString => super.isInValidRange(dateString));\n  }\n  /**\n   * Extract both dates as timestamps, flip if necessary, and build (which will use the desired format so we enforce the format too)\n   * @override\n   */\n  normalizeValue(value) {\n    const firstDateTimestamp = this._extractFirstTimestamp(value);\n    const lastDateTimestamp = this._extractLastTimestamp(value);\n    if (firstDateTimestamp && lastDateTimestamp && firstDateTimestamp > lastDateTimestamp) {\n      // if both are timestamps (not undefined), flip if necessary\n      return this._buildValue(lastDateTimestamp, firstDateTimestamp);\n    }\n    return this._buildValue(firstDateTimestamp, lastDateTimestamp);\n  }\n  /**\n   * @override\n   */\n  onSelectedDatesChange(event) {\n    event.preventDefault(); // never let the calendar update its own dates, the parent component controls them\n    const values = event.detail.selectedValues;\n    if (values.length === 0) {\n      return;\n    }\n    if (values.length === 1) {\n      // Do nothing until the user selects 2 dates, we don't change any state at all for one date\n      this._tempValue = values[0];\n      return;\n    }\n    const newValue = this._buildValue(event.detail.selectedDates[0], event.detail.selectedDates[1]); // the value will be normalized so we don't need to order them here\n    this._updateValueAndFireEvents(newValue, true, [\"change\", \"value-changed\"]);\n    this._togglePicker();\n  }\n  /**\n   * @override\n   */\n  async _modifyDateValue(amount, unit, preserveDate) {\n    if (!this._endDateTimestamp) {\n      // If empty or only one date -> treat as datepicker entirely\n      return super._modifyDateValue(amount, unit, preserveDate);\n    }\n    const input = this._getInput();\n    let caretPos = input.getCaretPosition(); // caret position is always number for input of type text;\n    let newValue;\n    if (caretPos <= this.value.indexOf(this._effectiveDelimiter)) {\n      // The user is focusing the first date -> change it and keep the second date\n      const startDateModified = modifyDateBy(CalendarDate.fromTimestamp(this._startDateTimestamp * 1000), amount, unit, preserveDate, this._minDate, this._maxDate);\n      const newStartDateTimestamp = startDateModified.valueOf() / 1000;\n      if (newStartDateTimestamp > this._endDateTimestamp) {\n        // dates flipped -> move the caret to the same position but on the last date\n        caretPos += Math.ceil(this.value.length / 2);\n      }\n      newValue = this._buildValue(newStartDateTimestamp, this._endDateTimestamp); // the value will be normalized so we don't try to order them here\n    } else {\n      const endDateModified = modifyDateBy(CalendarDate.fromTimestamp(this._endDateTimestamp * 1000), amount, unit, preserveDate, this._minDate, this._maxDate);\n      const newEndDateTimestamp = endDateModified.valueOf() / 1000;\n      newValue = this._buildValue(this._startDateTimestamp, newEndDateTimestamp); // the value will be normalized so we don't try to order them here\n      if (newEndDateTimestamp < this._startDateTimestamp) {\n        // dates flipped -> move the caret to the same position but on the first date\n        caretPos -= Math.ceil(this.value.length / 2);\n      }\n    }\n    this._updateValueAndFireEvents(newValue, true, [\"change\", \"value-changed\"]);\n    await renderFinished();\n    input.setCaretPosition(caretPos); // Return the caret to the previous (or the adjusted, if dates flipped) position after rendering\n  }\n  get _effectiveDelimiter() {\n    return this.delimiter || DEFAULT_DELIMITER;\n  }\n  _splitValueByDelimiter(value) {\n    const valuesArray = [];\n    const partsArray = value.split(this._prevDelimiter || this._effectiveDelimiter);\n    // if format successfully parse the value, the value contains only single date\n    if (this.getFormat().parse(value)) {\n      valuesArray[0] = partsArray.join(this._effectiveDelimiter);\n      valuesArray[1] = \"\";\n    } else {\n      valuesArray[0] = partsArray.slice(0, partsArray.length / 2).join(this._effectiveDelimiter);\n      valuesArray[1] = partsArray.slice(partsArray.length / 2).join(this._effectiveDelimiter);\n    }\n    return valuesArray;\n  }\n  /**\n   * Returns a UTC timestamp, representing the first date in the value string or undefined if the value is empty\n   * @private\n   */\n  _extractFirstTimestamp(value) {\n    if (!value || !this._checkValueValidity(value)) {\n      return undefined;\n    }\n    const dateStrings = this._splitValueByDelimiter(value); // at least one item guaranteed due to the checks above (non-empty and valid)\n    const parsedDate = this.getFormat().parse(dateStrings[0], true);\n    return parsedDate.getTime() / 1000;\n  }\n  /**\n   * Returns a UTC timestamp, representing the last date in the value string or undefined if the value is empty or there is just one date\n   * @private\n   */\n  _extractLastTimestamp(value) {\n    if (!value || !this._checkValueValidity(value)) {\n      return undefined;\n    }\n    const dateStrings = this._splitValueByDelimiter(value);\n    if (dateStrings[1]) {\n      const parsedDate = this.getFormat().parse(dateStrings[1], true);\n      return parsedDate.getTime() / 1000;\n    }\n    return undefined;\n  }\n  /**\n   * Builds a string value out of two UTC timestamps - this method is the counterpart to _extractFirstTimestamp/_extractLastTimestamp\n   * @private\n   */\n  _buildValue(firstDateTimestamp, lastDateTimestamp) {\n    this._prevDelimiter = this._effectiveDelimiter;\n    if (firstDateTimestamp) {\n      const firstDateString = this._getStringFromTimestamp(firstDateTimestamp * 1000);\n      if (!lastDateTimestamp) {\n        return firstDateString;\n      }\n      const lastDateString = this._getStringFromTimestamp(lastDateTimestamp * 1000);\n      return `${firstDateString} ${this._effectiveDelimiter} ${lastDateString}`;\n    }\n    return \"\";\n  }\n};\n__decorate([property()], DateRangePicker.prototype, \"delimiter\", void 0);\n__decorate([property()], DateRangePicker.prototype, \"_tempValue\", void 0);\nDateRangePicker = DateRangePicker_1 = __decorate([customElement({\n  tag: \"ui5-daterange-picker\",\n  styles: [DatePicker.styles, DateRangePickerCss],\n  template: DateRangePickerTemplate,\n  dependencies: [...DatePicker.dependencies, CalendarDateRange]\n})], DateRangePicker);\nDateRangePicker.define();\nexport default DateRangePicker;","map":{"version":3,"names":["customElement","property","renderFinished","CalendarDate","modifyDateBy","getTodayUTCTimestamp","DATERANGE_DESCRIPTION","DATERANGEPICKER_POPOVER_ACCESSIBLE_NAME","DateRangePickerTemplate","DateRangePickerCss","DatePicker","CalendarDateRange","DEFAULT_DELIMITER","DateRangePicker","DateRangePicker_1","formFormattedValue","values","_splitValueByDelimiter","value","filter","Boolean","length","name","formData","FormData","i","append","constructor","delimiter","_prevDelimiter","dateValue","dateValueUTC","_startDateTimestamp","_extractFirstTimestamp","_endDateTimestamp","_extractLastTimestamp","_tempTimestamp","_tempValue","getFormat","parse","getTime","_calendarSelectionMode","_calendarTimestamp","_primaryCalendarType","_calendarSelectedDates","_checkValueValidity","startDateValue","fromTimestamp","toLocalJSDate","endDateValue","startValue","endValue","_placeholder","placeholder","undefined","_displayFormat","_effectiveDelimiter","dateAriaDescription","i18nBundle","getText","pickerAccessibleName","_onInputSubmit","input","_getInput","caretPos","getCaretPosition","setCaretPosition","onResponsivePopoverAfterClose","isValid","parts","every","dateString","isInValidRange","normalizeValue","firstDateTimestamp","lastDateTimestamp","_buildValue","onSelectedDatesChange","event","preventDefault","detail","selectedValues","newValue","selectedDates","_updateValueAndFireEvents","_togglePicker","_modifyDateValue","amount","unit","preserveDate","indexOf","startDateModified","_minDate","_maxDate","newStartDateTimestamp","valueOf","Math","ceil","endDateModified","newEndDateTimestamp","valuesArray","partsArray","split","join","slice","dateStrings","parsedDate","firstDateString","_getStringFromTimestamp","lastDateString","__decorate","tag","styles","template","dependencies","define"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents/src/DateRangePicker.ts"],"sourcesContent":["import customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport { renderFinished } from \"@ui5/webcomponents-base/dist/Render.js\";\nimport type { IFormInputElement } from \"@ui5/webcomponents-base/dist/features/InputElementsFormSupport.js\";\nimport CalendarDate from \"@ui5/webcomponents-localization/dist/dates/CalendarDate.js\";\nimport modifyDateBy from \"@ui5/webcomponents-localization/dist/dates/modifyDateBy.js\";\nimport getTodayUTCTimestamp from \"@ui5/webcomponents-localization/dist/dates/getTodayUTCTimestamp.js\";\nimport {\n\tDATERANGE_DESCRIPTION,\n\tDATERANGEPICKER_POPOVER_ACCESSIBLE_NAME,\n} from \"./generated/i18n/i18n-defaults.js\";\nimport DateRangePickerTemplate from \"./generated/templates/DateRangePickerTemplate.lit.js\";\n\n// Styles\nimport DateRangePickerCss from \"./generated/themes/DateRangePicker.css.js\";\nimport DatePicker from \"./DatePicker.js\";\nimport CalendarDateRange from \"./CalendarDateRange.js\";\n\nimport type {\n\tDatePickerChangeEventDetail as DateRangePickerChangeEventDetail,\n\tDatePickerInputEventDetail as DateRangePickerInputEventDetail,\n} from \"./DatePicker.js\";\nimport type { CalendarSelectionChangeEventDetail } from \"./Calendar.js\";\n\nconst DEFAULT_DELIMITER = \"-\";\n\n/**\n * @class\n *\n * ### Overview\n * The DateRangePicker enables the users to enter a localized date range using touch, mouse, keyboard input, or by selecting a date range in the calendar.\n *\n * ### Usage\n * The user can enter a date by:\n * Using the calendar that opens in a popup or typing it in directly in the input field (not available for mobile devices).\n * For the `ui5-daterange-picker`\n * ### ES6 Module Import\n *\n * `import \"@ui5/webcomponents/dist/DateRangePicker.js\";`\n *\n * ### Keyboard Handling\n * The `ui5-daterange-picker` provides advanced keyboard handling.\n *\n * When the `ui5-daterange-picker` input field is focused the user can\n * increment or decrement respectively the range start or end date, depending on where the cursor is.\n * The following shortcuts are available:\n *\n * - [Page Down] - Decrements the corresponding day of the month by one\n * - [Shift] + [Page Down] - Decrements the corresponding month by one\n * - [Shift] + [Ctrl] + [Page Down] - Decrements the corresponding year by one\n * - [Page Up] - Increments the corresponding day of the month by one\n * - [Shift] + [Page Up] - Increments the corresponding month by one\n * - [Shift] + [Ctrl] + [Page Up] - Increments the corresponding year by one\n * @constructor\n * @extends DatePicker\n * @since 1.0.0-rc.8\n * @public\n */\n@customElement({\n\ttag: \"ui5-daterange-picker\",\n\tstyles: [DatePicker.styles, DateRangePickerCss],\n\ttemplate: DateRangePickerTemplate,\n\tdependencies: [...DatePicker.dependencies, CalendarDateRange],\n})\nclass DateRangePicker extends DatePicker implements IFormInputElement {\n\t /**\n\t * Determines the symbol which separates the dates.\n\t * If not supplied, the default time interval delimiter for the current locale will be used.\n\t * @default \"-\"\n\t * @public\n\t */\n\t@property()\n\tdelimiter = \"-\";\n\n\t /**\n\t * The first date in the range during selection (this is a temporary value, not the first date in the value range)\n\t * @private\n\t */\n\t@property()\n\t_tempValue?: string;\n\n\tprivate _prevDelimiter: string | null;\n\n\tget formFormattedValue() {\n\t\tconst values = this._splitValueByDelimiter(this.value || \"\").filter(Boolean);\n\n\t\tif (values.length && this.name) {\n\t\t\tconst formData = new FormData();\n\n\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\tformData.append(this.name, values[i]);\n\t\t\t}\n\n\t\t\treturn formData;\n\t\t}\n\n\t\treturn this.value;\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._prevDelimiter = null;\n\t}\n\n\t/**\n\t * **Note:** The getter method is inherited and not supported. If called it will return an empty value.\n\t * @public\n\t * @default null\n\t */\n\tget dateValue(): Date | null {\n\t\treturn null;\n\t}\n\n\t/**\n\t * **Note:** The getter method is inherited and not supported. If called it will return an empty value.\n\t * @public\n\t * @default null\n\t */\n\tget dateValueUTC(): Date | null {\n\t\treturn null;\n\t}\n\n\tget _startDateTimestamp() {\n\t\treturn this._extractFirstTimestamp(this.value);\n\t}\n\n\tget _endDateTimestamp() {\n\t\treturn this._extractLastTimestamp(this.value);\n\t}\n\n\tget _tempTimestamp() {\n\t\treturn this._tempValue && (this.getFormat().parse(this._tempValue, true) as Date).getTime() / 1000;\n\t}\n\n\t/**\n\t * Required by DatePicker.js\n\t * @override\n\t */\n\tget _calendarSelectionMode() {\n\t\treturn \"Range\";\n\t}\n\n\t/**\n\t * Required by DatePicker.js - set the calendar focus on the first selected date (or today if not set)\n\t * @override\n\t */\n\tget _calendarTimestamp() {\n\t\treturn this._tempTimestamp || this._startDateTimestamp || getTodayUTCTimestamp(this._primaryCalendarType);\n\t}\n\n\t/**\n\t * Required by DatePicker.js\n\t * @override\n\t */\n\tget _calendarSelectedDates() {\n\t\tif (this._tempValue) {\n\t\t\treturn [this._tempValue];\n\t\t}\n\t\tif (this.value && this._checkValueValidity(this.value)) {\n\t\t\treturn this._splitValueByDelimiter(this.value);\n\t\t}\n\t\treturn [];\n\t}\n\n\t/**\n\t * Returns the start date of the currently selected range as JavaScript Date instance.\n\t * @public\n\t * @default null\n\t */\n\tget startDateValue(): Date | null {\n\t\treturn CalendarDate.fromTimestamp(this._startDateTimestamp! * 1000).toLocalJSDate();\n\t}\n\n\t/**\n\t * Returns the end date of the currently selected range as JavaScript Date instance.\n\t * @public\n\t * @default null\n\t */\n\tget endDateValue(): Date | null {\n\t\treturn CalendarDate.fromTimestamp(this._endDateTimestamp! * 1000).toLocalJSDate();\n\t}\n\n\tget startValue(): string {\n\t\treturn this._calendarSelectedDates[0] || \"\";\n\t}\n\n\tget endValue(): string {\n\t\treturn this._calendarSelectedDates[1] || \"\";\n\t}\n\n\t/**\n\t * @override\n\t */\n\tget _placeholder() {\n\t\treturn this.placeholder !== undefined ? this.placeholder : `${this._displayFormat} ${this._effectiveDelimiter} ${this._displayFormat}`;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tget dateAriaDescription() {\n\t\treturn DateRangePicker.i18nBundle.getText(DATERANGE_DESCRIPTION);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tget pickerAccessibleName() {\n\t\treturn DateRangePicker.i18nBundle.getText(DATERANGEPICKER_POPOVER_ACCESSIBLE_NAME);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tasync _onInputSubmit() {\n\t\tconst input = this._getInput();\n\t\tconst caretPos = input.getCaretPosition();\n\t\tawait renderFinished();\n\t\tinput.setCaretPosition(caretPos); // Return the caret on the previous position after rendering\n\t}\n\n\t/**\n\t * @override\n\t */\n\t onResponsivePopoverAfterClose() {\n\t\tthis._tempValue = \"\"; // reset _tempValue on popover close\n\t\tsuper.onResponsivePopoverAfterClose();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tisValid(value: string): boolean {\n\t\tconst parts = this._splitValueByDelimiter(value);\n\t\treturn parts.length <= 2 && parts.every(dateString => super.isValid(dateString)); // must be at most 2 dates and each must be valid\n\t}\n\n\t/**\n\t * @override\n\t */\n\tisInValidRange(value: string): boolean {\n\t\treturn this._splitValueByDelimiter(value).every(dateString => super.isInValidRange(dateString));\n\t}\n\n\t/**\n\t * Extract both dates as timestamps, flip if necessary, and build (which will use the desired format so we enforce the format too)\n\t * @override\n\t */\n\tnormalizeValue(value: string) {\n\t\tconst firstDateTimestamp = this._extractFirstTimestamp(value);\n\t\tconst lastDateTimestamp = this._extractLastTimestamp(value);\n\t\tif (firstDateTimestamp && lastDateTimestamp && firstDateTimestamp > lastDateTimestamp) { // if both are timestamps (not undefined), flip if necessary\n\t\t\treturn this._buildValue(lastDateTimestamp, firstDateTimestamp);\n\t\t}\n\t\treturn this._buildValue(firstDateTimestamp, lastDateTimestamp);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tonSelectedDatesChange(event: CustomEvent<CalendarSelectionChangeEventDetail>) {\n\t\tevent.preventDefault(); // never let the calendar update its own dates, the parent component controls them\n\t\tconst values = event.detail.selectedValues;\n\n\t\tif (values.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (values.length === 1) { // Do nothing until the user selects 2 dates, we don't change any state at all for one date\n\t\t\tthis._tempValue = values[0];\n\t\t\treturn;\n\t\t}\n\t\tconst newValue = this._buildValue(event.detail.selectedDates[0], event.detail.selectedDates[1]); // the value will be normalized so we don't need to order them here\n\t\tthis._updateValueAndFireEvents(newValue, true, [\"change\", \"value-changed\"]);\n\t\tthis._togglePicker();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tasync _modifyDateValue(amount: number, unit: string, preserveDate?: boolean) {\n\t\tif (!this._endDateTimestamp) { // If empty or only one date -> treat as datepicker entirely\n\t\t\treturn super._modifyDateValue(amount, unit, preserveDate);\n\t\t}\n\n\t\tconst input = this._getInput();\n\t\tlet caretPos: number = input.getCaretPosition()!; // caret position is always number for input of type text;\n\t\tlet newValue: string;\n\n\t\tif (caretPos <= this.value.indexOf(this._effectiveDelimiter)) { // The user is focusing the first date -> change it and keep the second date\n\t\t\tconst startDateModified = modifyDateBy(CalendarDate.fromTimestamp(this._startDateTimestamp! * 1000), amount, unit, preserveDate, this._minDate, this._maxDate);\n\t\t\tconst newStartDateTimestamp = startDateModified.valueOf() / 1000;\n\t\t\tif (newStartDateTimestamp > this._endDateTimestamp) { // dates flipped -> move the caret to the same position but on the last date\n\t\t\t\tcaretPos += Math.ceil(this.value.length / 2);\n\t\t\t}\n\t\t\tnewValue = this._buildValue(newStartDateTimestamp, this._endDateTimestamp); // the value will be normalized so we don't try to order them here\n\t\t} else {\n\t\t\tconst endDateModified = modifyDateBy(CalendarDate.fromTimestamp(this._endDateTimestamp * 1000), amount, unit, preserveDate, this._minDate, this._maxDate);\n\t\t\tconst newEndDateTimestamp = endDateModified.valueOf() / 1000;\n\t\t\tnewValue = this._buildValue(this._startDateTimestamp, newEndDateTimestamp); // the value will be normalized so we don't try to order them here\n\t\t\tif (newEndDateTimestamp < this._startDateTimestamp!) { // dates flipped -> move the caret to the same position but on the first date\n\t\t\t\tcaretPos -= Math.ceil(this.value.length / 2);\n\t\t\t}\n\t\t}\n\t\tthis._updateValueAndFireEvents(newValue, true, [\"change\", \"value-changed\"]);\n\n\t\tawait renderFinished();\n\t\tinput.setCaretPosition(caretPos); // Return the caret to the previous (or the adjusted, if dates flipped) position after rendering\n\t}\n\n\tget _effectiveDelimiter(): string {\n\t\treturn this.delimiter || DEFAULT_DELIMITER;\n\t}\n\n\t_splitValueByDelimiter(value: string) {\n\t\tconst valuesArray: Array<string> = [];\n\t\tconst partsArray = value.split(this._prevDelimiter || this._effectiveDelimiter);\n\n\t\t// if format successfully parse the value, the value contains only single date\n\t\tif (this.getFormat().parse(value)) {\n\t\t\tvaluesArray[0] = partsArray.join(this._effectiveDelimiter);\n\t\t\tvaluesArray[1] = \"\";\n\t\t} else {\n\t\t\tvaluesArray[0] = partsArray.slice(0, partsArray.length / 2).join(this._effectiveDelimiter);\n\t\t\tvaluesArray[1] = partsArray.slice(partsArray.length / 2).join(this._effectiveDelimiter);\n\t\t}\n\n\t\treturn valuesArray;\n\t}\n\n\t/**\n\t * Returns a UTC timestamp, representing the first date in the value string or undefined if the value is empty\n\t * @private\n\t */\n\t_extractFirstTimestamp(value: string) {\n\t\tif (!value || !this._checkValueValidity(value)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst dateStrings = this._splitValueByDelimiter(value); // at least one item guaranteed due to the checks above (non-empty and valid)\n\n\t\tconst parsedDate = this.getFormat().parse(dateStrings[0], true) as Date;\n\t\treturn parsedDate.getTime() / 1000;\n\t}\n\n\t/**\n\t * Returns a UTC timestamp, representing the last date in the value string or undefined if the value is empty or there is just one date\n\t * @private\n\t */\n\t_extractLastTimestamp(value: string) {\n\t\tif (!value || !this._checkValueValidity(value)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst dateStrings = this._splitValueByDelimiter(value);\n\t\tif (dateStrings[1]) {\n\t\t\tconst parsedDate = this.getFormat().parse(dateStrings[1], true) as Date;\n\t\t\treturn parsedDate.getTime() / 1000;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Builds a string value out of two UTC timestamps - this method is the counterpart to _extractFirstTimestamp/_extractLastTimestamp\n\t * @private\n\t */\n\t_buildValue(firstDateTimestamp: number | undefined, lastDateTimestamp: number | undefined) {\n\t\tthis._prevDelimiter = this._effectiveDelimiter;\n\t\tif (firstDateTimestamp) {\n\t\t\tconst firstDateString = this._getStringFromTimestamp(firstDateTimestamp * 1000);\n\n\t\t\tif (!lastDateTimestamp) {\n\t\t\t\treturn firstDateString;\n\t\t\t}\n\n\t\t\tconst lastDateString = this._getStringFromTimestamp(lastDateTimestamp * 1000);\n\t\t\treturn `${firstDateString} ${this._effectiveDelimiter} ${lastDateString}`;\n\t\t}\n\n\t\treturn \"\";\n\t}\n}\n\nDateRangePicker.define();\n\nexport default DateRangePicker;\nexport type {\n\tDateRangePickerChangeEventDetail,\n\tDateRangePickerInputEventDetail,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}