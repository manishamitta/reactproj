{"ast":null,"code":"/**\n * A regular expression that describes language tags according to BCP-47.\n * @see BCP47 \"Tags for Identifying Languages\" (http://www.ietf.org/rfc/bcp/bcp47.txt)\n *\n * The matching groups are\n *  0=all\n *  1=language (shortest ISO639 code + ext. language sub tags | 4digits (reserved) | registered language sub tags)\n *  2=script (4 letters)\n *  3=region (2 letter language or 3 digits)\n *  4=variants (separated by '-', Note: capturing group contains leading '-' to shorten the regex!)\n *  5=extensions (including leading singleton, multiple extensions separated by '-'.Note: capturing group contains leading '-' to shorten the regex!)\n *  6=private use section (including leading 'x', multiple sections separated by '-')\n *\n *              [-------------------- language ----------------------][--- script ---][------- region --------][------------- variants --------------][----------- extensions ------------][------ private use -------]\n */ /*!\n     * OpenUI5\n     * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n     * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n     */\n\n//Provides the LanguageTag object module:sap/base/i18n/LanguageTag\n\nvar rLanguageTag = /^((?:[A-Z]{2,3}(?:-[A-Z]{3}){0,3})|[A-Z]{4}|[A-Z]{5,8})(?:-([A-Z]{4}))?(?:-([A-Z]{2}|[0-9]{3}))?((?:-[0-9A-Z]{5,8}|-[0-9][0-9A-Z]{3})*)((?:-[0-9A-WYZ](?:-[0-9A-Z]{2,8})+)*)(?:-(X(?:-[0-9A-Z]{1,8})+))?$/i;\n\n/**\n * Creates an LanguageTag instance.\n * LanguageTag represents a BCP-47 language tag, consisting of a language, script, region, variants, extensions and private use section.\n *\n * @class\n *\n * @param {string} sLanguageTag the language tag identifier, in format en-US or en_US.\n *\n * @author SAP SE\n * @version 1.120.17\n * @public\n * @alias module:sap/base/i18n/LanguageTag\n */\nclass LanguageTag {\n  /**\n   * Get the language.\n   *\n   * Note that the case might differ from the original script tag\n   * (Lower case is enforced as recommended by BCP47/ISO639).\n   *\n   * @type {string}\n   * @public\n   */\n  language;\n\n  /**\n   * Get the script or <code>null</code> if none was specified.\n   *\n   * Note that the case might differ from the original language tag\n   * (Upper case first letter and lower case reminder enforced as\n   * recommended by BCP47/ISO15924)\n   *\n   * @type {string|null}\n   * @public\n   */\n  script;\n\n  /**\n   * Get the region or <code>null</code> if none was specified.\n   *\n   * Note that the case might differ from the original script tag\n   * (Upper case is enforced as recommended by BCP47/ISO3166-1).\n   *\n   * @type {string}\n   * @public\n   */\n  region;\n\n  /**\n   * Get the variants as a single string or <code>null</code>.\n   *\n   * Multiple variants are separated by a dash '-'.\n   *\n   * @type {string|null}\n   * @public\n   */\n  variant;\n\n  /**\n   * Get the variants as an array of individual variants.\n   *\n   * The separating dashes are not part of the result.\n   * If there is no variant section in the language tag, an empty array is returned.\n   *\n   * @type {string[]}\n   * @public\n   */\n  variantSubtags;\n\n  /**\n   * Get the extension as a single string or <code>null</code>.\n   *\n   * The extension always consists of a singleton character (not 'x'),\n   * a dash '-' and one or more extension token, each separated\n   * again with a dash.\n   *\n   * @type {string|null}\n   * @public\n   */\n  extension;\n\n  /**\n   * Get the extensions as an array of tokens.\n   *\n   * The leading singleton and the separating dashes are not part of the result.\n   * If there is no extensions section in the language tag, an empty array is returned.\n   *\n   * @type {string[]}\n   * @public\n   */\n  extensionSubtags;\n\n  /**\n   * Get the private use section or <code>null</code>.\n   *\n   * @type {string}\n   */\n  privateUse;\n\n  /**\n   * Get the private use section as an array of tokens.\n   *\n   * The leading singleton and the separating dashes are not part of the result.\n   * If there is no private use section in the language tag, an empty array is returned.\n   *\n   * @type {string[]}\n   */\n  privateUseSubtags;\n  constructor(sLanguageTag) {\n    var aResult = rLanguageTag.exec(sLanguageTag.replace(/_/g, \"-\"));\n    // If the given language tag string cannot be parsed by the regular expression above,\n    // we should at least tell the developer why the Core fails to load.\n    if (aResult === null) {\n      throw new TypeError(\"The given language tag'\" + sLanguageTag + \"' does not adhere to BCP-47.\");\n    }\n    this.language = aResult[1] || null;\n    this.script = aResult[2] || null;\n    this.region = aResult[3] || null;\n    this.variant = aResult[4] && aResult[4].slice(1) || null; // remove leading dash from capturing group\n    this.variantSubtags = this.variant ? this.variant.split('-') : [];\n    this.extension = aResult[5] && aResult[5].slice(1) || null; // remove leading dash from capturing group\n    this.extensionSubtags = this.variant ? this.variant.split('-') : [];\n    this.privateUse = aResult[6] || null;\n    this.privateUseSubtags = this.privateUse ? this.privateUse.slice(2).split('-') : [];\n    // convert subtags according to the BCP47 recommendations\n    // - language: all lower case\n    // - script: lower case with the first letter capitalized\n    // - region: all upper case\n    if (this.language) {\n      this.language = this.language.toLowerCase();\n    }\n    if (this.script) {\n      this.script = this.script.toLowerCase().replace(/^[a-z]/, function ($) {\n        return $.toUpperCase();\n      });\n    }\n    if (this.region) {\n      this.region = this.region.toUpperCase();\n    }\n    Object.freeze(this);\n  }\n  toString() {\n    return this.#join(this.language, this.script, this.region, this.variant, this.extension, this.privateUse);\n  }\n  #join() {\n    return Array.prototype.filter.call(arguments, Boolean).join(\"-\");\n  }\n}\nexport default LanguageTag;","map":{"version":3,"names":["rLanguageTag","LanguageTag","language","script","region","variant","variantSubtags","extension","extensionSubtags","privateUse","privateUseSubtags","constructor","sLanguageTag","aResult","exec","replace","TypeError","slice","split","toLowerCase","$","toUpperCase","Object","freeze","toString","join","#join","Array","prototype","filter","call","arguments","Boolean"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-localization/dist/sap/base/i18n/LanguageTag.js"],"sourcesContent":["/**\n * A regular expression that describes language tags according to BCP-47.\n * @see BCP47 \"Tags for Identifying Languages\" (http://www.ietf.org/rfc/bcp/bcp47.txt)\n *\n * The matching groups are\n *  0=all\n *  1=language (shortest ISO639 code + ext. language sub tags | 4digits (reserved) | registered language sub tags)\n *  2=script (4 letters)\n *  3=region (2 letter language or 3 digits)\n *  4=variants (separated by '-', Note: capturing group contains leading '-' to shorten the regex!)\n *  5=extensions (including leading singleton, multiple extensions separated by '-'.Note: capturing group contains leading '-' to shorten the regex!)\n *  6=private use section (including leading 'x', multiple sections separated by '-')\n *\n *              [-------------------- language ----------------------][--- script ---][------- region --------][------------- variants --------------][----------- extensions ------------][------ private use -------]\n */ /*!\n     * OpenUI5\n     * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n     * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n     */\n\n//Provides the LanguageTag object module:sap/base/i18n/LanguageTag\n\nvar rLanguageTag = /^((?:[A-Z]{2,3}(?:-[A-Z]{3}){0,3})|[A-Z]{4}|[A-Z]{5,8})(?:-([A-Z]{4}))?(?:-([A-Z]{2}|[0-9]{3}))?((?:-[0-9A-Z]{5,8}|-[0-9][0-9A-Z]{3})*)((?:-[0-9A-WYZ](?:-[0-9A-Z]{2,8})+)*)(?:-(X(?:-[0-9A-Z]{1,8})+))?$/i;\n\n/**\n * Creates an LanguageTag instance.\n * LanguageTag represents a BCP-47 language tag, consisting of a language, script, region, variants, extensions and private use section.\n *\n * @class\n *\n * @param {string} sLanguageTag the language tag identifier, in format en-US or en_US.\n *\n * @author SAP SE\n * @version 1.120.17\n * @public\n * @alias module:sap/base/i18n/LanguageTag\n */\nclass LanguageTag {\n  /**\n   * Get the language.\n   *\n   * Note that the case might differ from the original script tag\n   * (Lower case is enforced as recommended by BCP47/ISO639).\n   *\n   * @type {string}\n   * @public\n   */\n  language;\n\n  /**\n   * Get the script or <code>null</code> if none was specified.\n   *\n   * Note that the case might differ from the original language tag\n   * (Upper case first letter and lower case reminder enforced as\n   * recommended by BCP47/ISO15924)\n   *\n   * @type {string|null}\n   * @public\n   */\n  script;\n\n  /**\n   * Get the region or <code>null</code> if none was specified.\n   *\n   * Note that the case might differ from the original script tag\n   * (Upper case is enforced as recommended by BCP47/ISO3166-1).\n   *\n   * @type {string}\n   * @public\n   */\n  region;\n\n  /**\n   * Get the variants as a single string or <code>null</code>.\n   *\n   * Multiple variants are separated by a dash '-'.\n   *\n   * @type {string|null}\n   * @public\n   */\n  variant;\n\n  /**\n   * Get the variants as an array of individual variants.\n   *\n   * The separating dashes are not part of the result.\n   * If there is no variant section in the language tag, an empty array is returned.\n   *\n   * @type {string[]}\n   * @public\n   */\n  variantSubtags;\n\n  /**\n   * Get the extension as a single string or <code>null</code>.\n   *\n   * The extension always consists of a singleton character (not 'x'),\n   * a dash '-' and one or more extension token, each separated\n   * again with a dash.\n   *\n   * @type {string|null}\n   * @public\n   */\n  extension;\n\n  /**\n   * Get the extensions as an array of tokens.\n   *\n   * The leading singleton and the separating dashes are not part of the result.\n   * If there is no extensions section in the language tag, an empty array is returned.\n   *\n   * @type {string[]}\n   * @public\n   */\n  extensionSubtags;\n\n  /**\n   * Get the private use section or <code>null</code>.\n   *\n   * @type {string}\n   */\n  privateUse;\n\n  /**\n   * Get the private use section as an array of tokens.\n   *\n   * The leading singleton and the separating dashes are not part of the result.\n   * If there is no private use section in the language tag, an empty array is returned.\n   *\n   * @type {string[]}\n   */\n  privateUseSubtags;\n  constructor(sLanguageTag) {\n    var aResult = rLanguageTag.exec(sLanguageTag.replace(/_/g, \"-\"));\n    // If the given language tag string cannot be parsed by the regular expression above,\n    // we should at least tell the developer why the Core fails to load.\n    if (aResult === null) {\n      throw new TypeError(\"The given language tag'\" + sLanguageTag + \"' does not adhere to BCP-47.\");\n    }\n    this.language = aResult[1] || null;\n    this.script = aResult[2] || null;\n    this.region = aResult[3] || null;\n    this.variant = aResult[4] && aResult[4].slice(1) || null; // remove leading dash from capturing group\n    this.variantSubtags = this.variant ? this.variant.split('-') : [];\n    this.extension = aResult[5] && aResult[5].slice(1) || null; // remove leading dash from capturing group\n    this.extensionSubtags = this.variant ? this.variant.split('-') : [];\n    this.privateUse = aResult[6] || null;\n    this.privateUseSubtags = this.privateUse ? this.privateUse.slice(2).split('-') : [];\n    // convert subtags according to the BCP47 recommendations\n    // - language: all lower case\n    // - script: lower case with the first letter capitalized\n    // - region: all upper case\n    if (this.language) {\n      this.language = this.language.toLowerCase();\n    }\n    if (this.script) {\n      this.script = this.script.toLowerCase().replace(/^[a-z]/, function ($) {\n        return $.toUpperCase();\n      });\n    }\n    if (this.region) {\n      this.region = this.region.toUpperCase();\n    }\n    Object.freeze(this);\n  }\n  toString() {\n    return this.#join(this.language, this.script, this.region, this.variant, this.extension, this.privateUse);\n  }\n  #join() {\n    return Array.prototype.filter.call(arguments, Boolean).join(\"-\");\n  }\n}\nexport default LanguageTag;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAdA,CAcI;AACJ;AACA;AACA;AACA;;AAEA;;AAEA,IAAIA,YAAY,GAAG,4MAA4M;;AAE/N;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,CAAC;EAChB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQ;;EAER;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,MAAM;;EAEN;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,MAAM;;EAEN;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,OAAO;;EAEP;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,cAAc;;EAEd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,SAAS;;EAET;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,gBAAgB;;EAEhB;AACF;AACA;AACA;AACA;EACEC,UAAU;;EAEV;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,iBAAiB;EACjBC,WAAWA,CAACC,YAAY,EAAE;IACxB,IAAIC,OAAO,GAAGb,YAAY,CAACc,IAAI,CAACF,YAAY,CAACG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAChE;IACA;IACA,IAAIF,OAAO,KAAK,IAAI,EAAE;MACpB,MAAM,IAAIG,SAAS,CAAC,yBAAyB,GAAGJ,YAAY,GAAG,8BAA8B,CAAC;IAChG;IACA,IAAI,CAACV,QAAQ,GAAGW,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI;IAClC,IAAI,CAACV,MAAM,GAAGU,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI;IAChC,IAAI,CAACT,MAAM,GAAGS,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI;IAChC,IAAI,CAACR,OAAO,GAAGQ,OAAO,CAAC,CAAC,CAAC,IAAIA,OAAO,CAAC,CAAC,CAAC,CAACI,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC;IAC1D,IAAI,CAACX,cAAc,GAAG,IAAI,CAACD,OAAO,GAAG,IAAI,CAACA,OAAO,CAACa,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;IACjE,IAAI,CAACX,SAAS,GAAGM,OAAO,CAAC,CAAC,CAAC,IAAIA,OAAO,CAAC,CAAC,CAAC,CAACI,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC;IAC5D,IAAI,CAACT,gBAAgB,GAAG,IAAI,CAACH,OAAO,GAAG,IAAI,CAACA,OAAO,CAACa,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;IACnE,IAAI,CAACT,UAAU,GAAGI,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI;IACpC,IAAI,CAACH,iBAAiB,GAAG,IAAI,CAACD,UAAU,GAAG,IAAI,CAACA,UAAU,CAACQ,KAAK,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;IACnF;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAChB,QAAQ,EAAE;MACjB,IAAI,CAACA,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACiB,WAAW,CAAC,CAAC;IAC7C;IACA,IAAI,IAAI,CAAChB,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,GAAG,IAAI,CAACA,MAAM,CAACgB,WAAW,CAAC,CAAC,CAACJ,OAAO,CAAC,QAAQ,EAAE,UAAUK,CAAC,EAAE;QACrE,OAAOA,CAAC,CAACC,WAAW,CAAC,CAAC;MACxB,CAAC,CAAC;IACJ;IACA,IAAI,IAAI,CAACjB,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,GAAG,IAAI,CAACA,MAAM,CAACiB,WAAW,CAAC,CAAC;IACzC;IACAC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACrB;EACAC,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAAC,CAACC,IAAI,CAAC,IAAI,CAACvB,QAAQ,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAACE,SAAS,EAAE,IAAI,CAACE,UAAU,CAAC;EAC3G;EACA,CAACgB,IAAIC,CAAA,EAAG;IACN,OAAOC,KAAK,CAACC,SAAS,CAACC,MAAM,CAACC,IAAI,CAACC,SAAS,EAAEC,OAAO,CAAC,CAACP,IAAI,CAAC,GAAG,CAAC;EAClE;AACF;AACA,eAAexB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}