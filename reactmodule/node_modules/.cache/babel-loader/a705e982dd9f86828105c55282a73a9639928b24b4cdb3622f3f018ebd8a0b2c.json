{"ast":null,"code":"\"use strict\";\n\nimport { getAllRegisteredTags as g } from \"./CustomElementsRegistry.js\";\nimport { getCustomElementsScopingRules as p, getCustomElementsScopingSuffix as R } from \"./CustomElementsScopeUtils.js\";\nimport d from \"./generated/VersionInfo.js\";\nimport h from \"./getSharedResource.js\";\nlet i,\n  s = \"\";\nconst u = new Map(),\n  r = h(\"Runtimes\", []),\n  x = () => {\n    if (i === void 0) {\n      i = r.length;\n      const e = d;\n      r.push({\n        ...e,\n        get scopingSuffix() {\n          return R();\n        },\n        get registeredTags() {\n          return g();\n        },\n        get scopingRules() {\n          return p();\n        },\n        alias: s,\n        description: `Runtime ${i} - ver ${e.version}${s ? ` (${s})` : \"\"}`\n      });\n    }\n  },\n  I = () => i,\n  b = (e, m) => {\n    const o = `${e},${m}`;\n    if (u.has(o)) return u.get(o);\n    const t = r[e],\n      n = r[m];\n    if (!t || !n) throw new Error(\"Invalid runtime index supplied\");\n    if (t.isNext || n.isNext) return t.buildTime - n.buildTime;\n    const c = t.major - n.major;\n    if (c) return c;\n    const a = t.minor - n.minor;\n    if (a) return a;\n    const f = t.patch - n.patch;\n    if (f) return f;\n    const l = new Intl.Collator(void 0, {\n      numeric: !0,\n      sensitivity: \"base\"\n    }).compare(t.suffix, n.suffix);\n    return u.set(o, l), l;\n  },\n  C = e => {\n    s = e;\n  },\n  $ = () => r;\nexport { I as getCurrentRuntimeIndex, x as registerCurrentRuntime, b as compareRuntimes, C as setRuntimeAlias, $ as getAllRuntimes };","map":{"version":3,"names":["getAllRegisteredTags","g","getCustomElementsScopingRules","p","getCustomElementsScopingSuffix","R","d","h","i","s","u","Map","r","x","registerCurrentRuntime","length","e","push","scopingSuffix","registeredTags","scopingRules","alias","description","version","I","getCurrentRuntimeIndex","b","compareRuntimes","m","o","has","get","t","n","Error","isNext","buildTime","c","major","a","minor","f","patch","l","Intl","Collator","numeric","sensitivity","compare","suffix","set","C","$","getAllRuntimes","setRuntimeAlias"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-base/src/Runtimes.ts"],"sourcesContent":["import { getAllRegisteredTags } from \"./CustomElementsRegistry.js\";\nimport { getCustomElementsScopingRules, getCustomElementsScopingSuffix } from \"./CustomElementsScopeUtils.js\";\nimport VersionInfo from \"./generated/VersionInfo.js\";\nimport getSharedResource from \"./getSharedResource.js\";\n\ntype RuntimeData = VersionInfo & {\n\talias: string,\n\tdescription: string,\n};\n\nlet currentRuntimeIndex: number;\nlet currentRuntimeAlias = \"\";\n\nconst compareCache = new Map<string, number>();\n\n/**\n * Central registry where all runtimes register themselves by pushing an object.\n * The index in the registry servers as an ID for the runtime.\n * @type {*}\n */\nconst Runtimes = getSharedResource<Array<RuntimeData>>(\"Runtimes\", []);\n\n/**\n * Registers the current runtime in the shared runtimes resource registry\n */\nconst registerCurrentRuntime = () => {\n\tif (currentRuntimeIndex === undefined) {\n\t\tcurrentRuntimeIndex = Runtimes.length;\n\t\tconst versionInfo = VersionInfo;\n\n\t\tRuntimes.push({\n\t\t\t...versionInfo,\n\t\t\tget scopingSuffix() {\n\t\t\t\treturn getCustomElementsScopingSuffix();\n\t\t\t},\n\t\t\tget registeredTags() {\n\t\t\t\treturn getAllRegisteredTags();\n\t\t\t},\n\t\t\tget scopingRules() {\n\t\t\t\treturn getCustomElementsScopingRules();\n\t\t\t},\n\t\t\talias: currentRuntimeAlias,\n\t\t\tdescription: `Runtime ${currentRuntimeIndex} - ver ${versionInfo.version}${currentRuntimeAlias ? ` (${currentRuntimeAlias})` : \"\"}`,\n\t\t});\n\t}\n};\n\n/**\n * Returns the index of the current runtime's object in the shared runtimes resource registry\n * @returns {*}\n */\nconst getCurrentRuntimeIndex = () => {\n\treturn currentRuntimeIndex;\n};\n\n/**\n * Compares two runtimes and returns 1 if the first is of a bigger version, -1 if the second is of a bigger version, and 0 if equal\n * @param index1 The index of the first runtime to compare\n * @param index2 The index of the second runtime to compare\n * @returns {number}\n */\nconst compareRuntimes = (index1: number, index2: number) => {\n\tconst cacheIndex = `${index1},${index2}`;\n\tif (compareCache.has(cacheIndex)) {\n\t\treturn compareCache.get(cacheIndex)!;\n\t}\n\n\tconst runtime1 = Runtimes[index1];\n\tconst runtime2 = Runtimes[index2];\n\n\tif (!runtime1 || !runtime2) {\n\t\tthrow new Error(\"Invalid runtime index supplied\");\n\t}\n\n\t// If any of the two is a next version, bigger buildTime wins\n\tif (runtime1.isNext || runtime2.isNext) {\n\t\treturn runtime1.buildTime - runtime2.buildTime;\n\t}\n\n\t// If major versions differ, bigger one wins\n\tconst majorDiff = runtime1.major - runtime2.major;\n\tif (majorDiff) {\n\t\treturn majorDiff;\n\t}\n\n\t// If minor versions differ, bigger one wins\n\tconst minorDiff = runtime1.minor - runtime2.minor;\n\tif (minorDiff) {\n\t\treturn minorDiff;\n\t}\n\n\t// If patch versions differ, bigger one wins\n\tconst patchDiff = runtime1.patch - runtime2.patch;\n\tif (patchDiff) {\n\t\treturn patchDiff;\n\t}\n\n\t// Bigger suffix wins, f.e. rc10 > rc9\n\t// Important: suffix is alphanumeric, must use natural compare\n\tconst collator = new Intl.Collator(undefined, { numeric: true, sensitivity: \"base\" });\n\tconst result = collator.compare(runtime1.suffix, runtime2.suffix);\n\n\tcompareCache.set(cacheIndex, result);\n\treturn result;\n};\n\n/**\n * Set an alias for the the current app/library/microfrontend which will appear in debug messages and console warnings\n * @param alias\n */\nconst setRuntimeAlias = (alias: string) => {\n\tcurrentRuntimeAlias = alias;\n};\n\nconst getAllRuntimes = () => {\n\treturn Runtimes;\n};\n\nexport {\n\tgetCurrentRuntimeIndex,\n\tregisterCurrentRuntime,\n\tcompareRuntimes,\n\tsetRuntimeAlias,\n\tgetAllRuntimes,\n};\n"],"mappings":";;AAAA,SAASA,oBAAA,IAAAC,CAAA,QAA4B;AACrC,SAASC,6BAAA,IAAAC,CAAA,EAA+BC,8BAAA,IAAAC,CAAA,QAAsC;AAC9E,OAAOC,CAAA,MAAiB;AACxB,OAAOC,CAAA,MAAuB;AAO9B,IAAIC,CAAA;EACAC,CAAA,GAAsB;AAE1B,MAAMC,CAAA,GAAe,IAAIC,GAAA;EAOnBC,CAAA,GAAWL,CAAA,CAAsC,YAAY,EAAE;EAK/DM,CAAA,GAAyBC,CAAA,KAAM;IACpC,IAAIN,CAAA,KAAwB,QAAW;MACtCA,CAAA,GAAsBI,CAAA,CAASG,MAAA;MAC/B,MAAMC,CAAA,GAAcV,CAAA;MAEpBM,CAAA,CAASK,IAAA,CAAK;QACb,GAAGD,CAAA;QACH,IAAIE,cAAA,EAAgB;UACnB,OAAOb,CAAA,CAA+B,CACvC;QAAA;QACA,IAAIc,eAAA,EAAiB;UACpB,OAAOlB,CAAA,CAAqB,CAC7B;QAAA;QACA,IAAImB,aAAA,EAAe;UAClB,OAAOjB,CAAA,CAA8B,CACtC;QAAA;QACAkB,KAAA,EAAOZ,CAAA;QACPa,WAAA,EAAa,WAAWd,CAAmB,UAAUQ,CAAA,CAAYO,OAAO,GAAGd,CAAA,GAAsB,KAAKA,CAAmB,MAAM,EAAE;MAClI,CAAC,CACF;IAAA;EACD;EAMMe,CAAA,GAAyBC,CAAA,KACvBjB,CAAA;EASFkB,CAAA,GAAkBC,CAACX,CAAA,EAAgBY,CAAA,KAAmB;IAC3D,MAAMC,CAAA,GAAa,GAAGb,CAAM,IAAIY,CAAM;IACtC,IAAIlB,CAAA,CAAaoB,GAAA,CAAID,CAAU,GAC9B,OAAOnB,CAAA,CAAaqB,GAAA,CAAIF,CAAU;IAGnC,MAAMG,CAAA,GAAWpB,CAAA,CAASI,CAAM;MAC1BiB,CAAA,GAAWrB,CAAA,CAASgB,CAAM;IAEhC,IAAI,CAACI,CAAA,IAAY,CAACC,CAAA,EACjB,MAAM,IAAIC,KAAA,CAAM,gCAAgC;IAIjD,IAAIF,CAAA,CAASG,MAAA,IAAUF,CAAA,CAASE,MAAA,EAC/B,OAAOH,CAAA,CAASI,SAAA,GAAYH,CAAA,CAASG,SAAA;IAItC,MAAMC,CAAA,GAAYL,CAAA,CAASM,KAAA,GAAQL,CAAA,CAASK,KAAA;IAC5C,IAAID,CAAA,EACH,OAAOA,CAAA;IAIR,MAAME,CAAA,GAAYP,CAAA,CAASQ,KAAA,GAAQP,CAAA,CAASO,KAAA;IAC5C,IAAID,CAAA,EACH,OAAOA,CAAA;IAIR,MAAME,CAAA,GAAYT,CAAA,CAASU,KAAA,GAAQT,CAAA,CAASS,KAAA;IAC5C,IAAID,CAAA,EACH,OAAOA,CAAA;IAMR,MAAME,CAAA,GADW,IAAIC,IAAA,CAAKC,QAAA,CAAS,QAAW;MAAEC,OAAA,EAAS;MAAMC,WAAA,EAAa;IAAO,CAAC,EAC5DC,OAAA,CAAQhB,CAAA,CAASiB,MAAA,EAAQhB,CAAA,CAASgB,MAAM;IAEhE,OAAAvC,CAAA,CAAawC,GAAA,CAAIrB,CAAA,EAAYc,CAAM,GAC5BA,CACR;EAAA;EAMMQ,CAAA,GAAmBnC,CAAA,IAAkB;IAC1CP,CAAA,GAAsBO,CACvB;EAAA;EAEMoC,CAAA,GAAiBC,CAAA,KACfzC,CAAA;AAGR,SACCY,CAAA,IAAAC,sBAAA,EACAZ,CAAA,IAAAC,sBAAA,EACAY,CAAA,IAAAC,eAAA,EACAwB,CAAA,IAAAG,eAAA,EACAF,CAAA,IAAAC,cAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}