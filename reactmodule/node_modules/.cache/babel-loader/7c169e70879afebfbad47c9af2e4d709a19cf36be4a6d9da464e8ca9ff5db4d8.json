{"ast":null,"code":"/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n/**\n * SAPUI5 base classes\n *\n * @namespace\n * @name sap.ui.base\n * @public\n */\n// Provides class sap.ui.base.Object\nimport Metadata from \"./Metadata.js\";\nimport Log from \"../../base/Log.js\";\n/**\n * Constructor for an <code>sap.ui.base.Object</code>.\n *\n * Subclasses of this class should always call the constructor of their base class.\n *\n * @class Base class for all SAPUI5 Objects.\n * @abstract\n * @author Malte Wedel\n * @version 1.120.17\n * @public\n * @alias sap.ui.base.Object\n * @throws {Error} When an instance of the class or its subclasses is created without the <code>new</code> operator.\n */\nvar BaseObject = Metadata.createClass(\"sap.ui.base.Object\", {\n  constructor: function () {\n    // complain if 'this' is not an instance of a subclass\n    if (!(this instanceof BaseObject)) {\n      throw Error(\"Cannot instantiate object: \\\"new\\\" is missing!\");\n    }\n  }\n});\n\n/**\n * Destructor method for objects.\n * @public\n */\nBaseObject.prototype.destroy = function () {};\n\n/**\n * Returns the public facade of this object.\n *\n * By default, the public facade is implemented as an instance of {@link sap.ui.base.Interface},\n * exposing the <code>publicMethods</code> as defined in the metadata of the class of this object.\n *\n * See the documentation of the {@link #.extend extend} method for an explanation of <code>publicMethods</code>.\n *\n * The facade is created on the first call of <code>getInterface</code> and reused for all later calls.\n *\n * @public\n * @returns {sap.ui.base.Object} A facade for this object, with at least the public methods of the class of this.\n */\nBaseObject.prototype.getInterface = function () {\n  // New implementation that avoids the overhead of a dedicated member for the interface\n  // initially, an Object instance has no associated Interface and the getInterface\n  // method is defined only in the prototype. So the code here will be executed.\n  // It creates an interface (basically the same code as in the old implementation)\n  var oInterface = new BaseObject._Interface(this, this.getMetadata().getAllPublicMethods());\n  // Now this Object instance gets a new, private implementation of getInterface\n  // that returns the newly created oInterface. Future calls of getInterface on the\n  // same Object therefore will return the already created interface\n  this.getInterface = function () {\n    return oInterface;\n  };\n  // as the first caller doesn't benefit from the new method implementation we have to\n  // return the created interface as well.\n  return oInterface;\n};\n\n/**\n * Returns the metadata for the class that this object belongs to.\n *\n * This method is only defined when metadata has been declared by using {@link sap.ui.base.Object.defineClass}\n * or {@link sap.ui.base.Object.extend}.\n *\n * @return {sap.ui.base.Metadata} metadata for the class of the object\n * @name sap.ui.base.Object#getMetadata\n * @function\n * @public\n */\n\n/**\n * The structure of the \"metadata\" object which is passed when inheriting from sap.ui.base.Object using its static \"extend\" method.\n * See {@link sap.ui.base.Object.extend} for details on its usage.\n *\n * @typedef {object} sap.ui.base.Object.MetadataOptions\n *\n * @property {string[]} [interfaces] set of names of implemented interfaces (defaults to no interfaces)\n * @property {boolean} [abstract=false] flag that marks the class as abstract (purely informational, defaults to false)\n * @property {boolean} [final=false] flag that marks the class as final (defaults to false)\n * @property {boolean} [deprecated=false] flag that marks the class as deprecated (defaults to false). May lead to an additional warning\n *     log message at runtime when the object is still used. For the documentation, also add a <code>@deprecated</code> tag in the JSDoc,\n *     describing since when it is deprecated and what any alternatives are.\n *\n * @public\n */\n\n/**\n * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>\n * and enriches it with the information contained in <code>oClassInfo</code>.\n *\n * <code>oClassInfo</code> might contain three kinds of information:\n * <ul>\n * <li><code>metadata:</code> an (optional) object literal with metadata about the class like implemented interfaces,\n * see {@link sap.ui.base.Object.MetadataOptions MetadataOptions} for details.\n * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}.\n * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).\n * </li>\n *\n * <li><code>constructor:</code> a function that serves as a constructor function for the new class.\n * If no constructor function is given, the framework creates a default implementation that delegates all\n * its arguments to the constructor function of the base class.\n * </li>\n *\n * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype\n * object of the newly created class. Callers can thereby add methods or properties to all instances of the\n * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't\n * make sense to use primitive values here other than to declare public constants.\n *\n * If such a property has a function as its value, and if the property name does not start with an underscore\n * or with the prefix \"on\", the property name will be automatically added to the list of public methods of the\n * class (see property <code>publicMethods</code> in the <code>metadata</code> section). If a method's name\n * matches that pattern, but is not meant to be public, it shouldn't be included in the class info object,\n * but be assigned to the prototype instead.\n * </li>\n *\n * </ul>\n *\n * The prototype object of the newly created class uses the same prototype as instances of the base class\n * (prototype chaining).\n *\n * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>\n * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)\n * itself.\n *\n * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class\n * can be specified. Instances of that class will be used to represent metadata for the newly created class\n * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the\n * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).\n *\n * @param {string} sClassName name of the class to be created\n * @param {object} [oClassInfo] structured object with information about the class\n * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.\n * @return {function} the created class / constructor function\n * @public\n * @static\n * @name sap.ui.base.Object.extend\n * @function\n * @since 1.3.1\n */\n\n/**\n * Creates metadata for a given class and attaches it to the constructor and prototype of that class.\n *\n * After creation, metadata can be retrieved with getMetadata().\n *\n * The static info can at least contain the following entries:\n * <ul>\n * <li>baseType: {string} fully qualified name of a base class or empty</li>\n * <li>publicMethods: {string} an array of method names that will be visible in the interface proxy returned by {@link #getInterface}</li>\n * </ul>\n *\n * @param {string} sClassName name of an (already declared) constructor function\n * @param {object} oStaticInfo static info used to create the metadata object\n * @param {string} oStaticInfo.baseType qualified name of a base class\n * @param {string[]} oStaticInfo.publicMethods array of names of public methods\n * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.\n *\n * @return {sap.ui.base.Metadata} the created metadata object\n * @public\n * @static\n * @deprecated Since 1.3.1. Use the static <code>extend</code> method of the desired base class (e.g. {@link sap.ui.base.Object.extend})\n */\nBaseObject.defineClass = function (sClassName, oStaticInfo, FNMetaImpl) {\n  // create Metadata object\n  var oMetadata = new (FNMetaImpl || Metadata)(sClassName, oStaticInfo);\n  var fnClass = oMetadata.getClass();\n  fnClass.getMetadata = fnClass.prototype.getMetadata = function () {\n    return oMetadata;\n  };\n  // enrich function\n  if (!oMetadata.isFinal()) {\n    fnClass.extend = function (sSCName, oSCClassInfo, fnSCMetaImpl) {\n      return Metadata.createClass(fnClass, sSCName, oSCClassInfo, fnSCMetaImpl || FNMetaImpl);\n    };\n  }\n  Log.debug(\"defined class '\" + sClassName + \"'\" + (oMetadata.getParent() ? \" as subclass of \" + oMetadata.getParent().getName() : \"\"));\n  return oMetadata;\n};\n\n/**\n * Checks whether this object is an instance of the named type.\n *\n * This check is solely based on the type names as declared in the class metadata.\n * It compares the given <code>vTypeName</code> with the name of the class of this object,\n * with the names of any base class of that class and with the names of all interfaces\n * implemented by any of the aforementioned classes.\n *\n * Instead of a single type name, an array of type names can be given and the method\n * will check if this object is an instance of any of the listed types (logical or).\n *\n * Should the UI5 class system in future implement additional means of associating classes\n * with type names (e.g. by introducing mixins), then this method might detect matches\n * for those names as well.\n *\n * @example\n * myObject.isA(\"sap.ui.core.Control\"); // true if myObject is an instance of sap.ui.core.Control\n * myObject.isA([\"sap.ui.core.Control\", \"sap.ui.core.Fragment\"]); // true if myObject is an instance of sap.ui.core.Control or sap.ui.core.Fragment\n *\n * @param {string|string[]} vTypeName Type or types to check for\n * @returns {boolean} Whether this object is an instance of the given type or of any of the given types\n * @public\n * @since 1.56\n */\nBaseObject.prototype.isA = function (vTypeName) {\n  return this.getMetadata().isA(vTypeName);\n};\n\n/**\n * Checks whether the given object is an instance of the named type.\n * This function is a short-hand convenience for {@link sap.ui.base.Object#isA}.\n *\n * Please see the API documentation of {@link sap.ui.base.Object#isA} for more details.\n *\n * @param {any} oObject Object which will be checked whether it is an instance of the given type\n * @param {string|string[]} vTypeName Type or types to check for\n * @returns {boolean} Whether the given object is an instance of the given type or of any of the given types\n * @public\n * @since 1.56\n * @static\n * @deprecated Since 1.120, please use {@link sap.ui.base.Object.isObjectA}.\n */\nBaseObject.isA = function (oObject, vTypeName) {\n  return oObject instanceof BaseObject && oObject.isA(vTypeName);\n};\n\n/**\n * Checks whether the given object is an instance of the named type.\n * This function is a short-hand convenience for {@link sap.ui.base.Object#isA}.\n *\n * Please see the API documentation of {@link sap.ui.base.Object#isA} for more details.\n *\n * @param {any} oObject Object which will be checked whether it is an instance of the given type\n * @param {string|string[]} vTypeName Type or types to check for\n * @returns {boolean} Whether the given object is an instance of the given type or of any of the given types\n * @public\n * @since 1.120\n * @static\n */\nBaseObject.isObjectA = function (oObject, vTypeName) {\n  return oObject instanceof BaseObject && oObject.isA(vTypeName);\n};\n\n/**\n * @param  {sap.ui.base.Object} [oObject] Object for which a facade should be created\n * @param  {string[]} [aMethods=[]] Names of the methods, that should be available in the new facade\n * @param  {boolean} [_bReturnFacade=false] If true, the return value of a function call is this created Interface instance instead of the BaseObject interface\n * @private\n * @static\n */\nBaseObject._Interface = function (oObject, aMethods, _bReturnFacade) {\n  // if object is null or undefined, return itself\n  if (!oObject) {\n    return oObject;\n  }\n  function fCreateDelegator(oObject, sMethodName) {\n    return function () {\n      // return oObject[sMethodName].apply(oObject, arguments);\n      var tmp = oObject[sMethodName].apply(oObject, arguments);\n      // to avoid to hide the implementation behind the interface you need\n      // to override the getInterface function in the object or create the interface with bFacade = true\n      if (_bReturnFacade) {\n        return this;\n      } else {\n        return tmp instanceof BaseObject ? tmp.getInterface() : tmp;\n      }\n    };\n  }\n\n  // if there are no methods return\n  if (!aMethods) {\n    return {};\n  }\n  var sMethodName;\n\n  // create functions for all delegated methods\n  // PERFOPT: 'cache' length of aMethods to reduce # of resolutions\n  for (var i = 0, ml = aMethods.length; i < ml; i++) {\n    sMethodName = aMethods[i];\n    //!oObject[sMethodName] for 'lazy' loading interface methods ;-)\n    if (!oObject[sMethodName] || typeof oObject[sMethodName] === \"function\") {\n      this[sMethodName] = fCreateDelegator(oObject, sMethodName);\n    }\n  }\n};\nexport default BaseObject;","map":{"version":3,"names":["Metadata","Log","BaseObject","createClass","constructor","Error","prototype","destroy","getInterface","oInterface","_Interface","getMetadata","getAllPublicMethods","defineClass","sClassName","oStaticInfo","FNMetaImpl","oMetadata","fnClass","getClass","isFinal","extend","sSCName","oSCClassInfo","fnSCMetaImpl","debug","getParent","getName","isA","vTypeName","oObject","isObjectA","aMethods","_bReturnFacade","fCreateDelegator","sMethodName","tmp","apply","arguments","i","ml","length"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-localization/dist/sap/ui/base/Object.js"],"sourcesContent":["/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n/**\n * SAPUI5 base classes\n *\n * @namespace\n * @name sap.ui.base\n * @public\n */\n// Provides class sap.ui.base.Object\nimport Metadata from \"./Metadata.js\";\nimport Log from \"../../base/Log.js\";\n/**\n * Constructor for an <code>sap.ui.base.Object</code>.\n *\n * Subclasses of this class should always call the constructor of their base class.\n *\n * @class Base class for all SAPUI5 Objects.\n * @abstract\n * @author Malte Wedel\n * @version 1.120.17\n * @public\n * @alias sap.ui.base.Object\n * @throws {Error} When an instance of the class or its subclasses is created without the <code>new</code> operator.\n */\nvar BaseObject = Metadata.createClass(\"sap.ui.base.Object\", {\n  constructor: function () {\n    // complain if 'this' is not an instance of a subclass\n    if (!(this instanceof BaseObject)) {\n      throw Error(\"Cannot instantiate object: \\\"new\\\" is missing!\");\n    }\n  }\n});\n\n/**\n * Destructor method for objects.\n * @public\n */\nBaseObject.prototype.destroy = function () {};\n\n/**\n * Returns the public facade of this object.\n *\n * By default, the public facade is implemented as an instance of {@link sap.ui.base.Interface},\n * exposing the <code>publicMethods</code> as defined in the metadata of the class of this object.\n *\n * See the documentation of the {@link #.extend extend} method for an explanation of <code>publicMethods</code>.\n *\n * The facade is created on the first call of <code>getInterface</code> and reused for all later calls.\n *\n * @public\n * @returns {sap.ui.base.Object} A facade for this object, with at least the public methods of the class of this.\n */\nBaseObject.prototype.getInterface = function () {\n  // New implementation that avoids the overhead of a dedicated member for the interface\n  // initially, an Object instance has no associated Interface and the getInterface\n  // method is defined only in the prototype. So the code here will be executed.\n  // It creates an interface (basically the same code as in the old implementation)\n  var oInterface = new BaseObject._Interface(this, this.getMetadata().getAllPublicMethods());\n  // Now this Object instance gets a new, private implementation of getInterface\n  // that returns the newly created oInterface. Future calls of getInterface on the\n  // same Object therefore will return the already created interface\n  this.getInterface = function () {\n    return oInterface;\n  };\n  // as the first caller doesn't benefit from the new method implementation we have to\n  // return the created interface as well.\n  return oInterface;\n};\n\n/**\n * Returns the metadata for the class that this object belongs to.\n *\n * This method is only defined when metadata has been declared by using {@link sap.ui.base.Object.defineClass}\n * or {@link sap.ui.base.Object.extend}.\n *\n * @return {sap.ui.base.Metadata} metadata for the class of the object\n * @name sap.ui.base.Object#getMetadata\n * @function\n * @public\n */\n\n/**\n * The structure of the \"metadata\" object which is passed when inheriting from sap.ui.base.Object using its static \"extend\" method.\n * See {@link sap.ui.base.Object.extend} for details on its usage.\n *\n * @typedef {object} sap.ui.base.Object.MetadataOptions\n *\n * @property {string[]} [interfaces] set of names of implemented interfaces (defaults to no interfaces)\n * @property {boolean} [abstract=false] flag that marks the class as abstract (purely informational, defaults to false)\n * @property {boolean} [final=false] flag that marks the class as final (defaults to false)\n * @property {boolean} [deprecated=false] flag that marks the class as deprecated (defaults to false). May lead to an additional warning\n *     log message at runtime when the object is still used. For the documentation, also add a <code>@deprecated</code> tag in the JSDoc,\n *     describing since when it is deprecated and what any alternatives are.\n *\n * @public\n */\n\n/**\n * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>\n * and enriches it with the information contained in <code>oClassInfo</code>.\n *\n * <code>oClassInfo</code> might contain three kinds of information:\n * <ul>\n * <li><code>metadata:</code> an (optional) object literal with metadata about the class like implemented interfaces,\n * see {@link sap.ui.base.Object.MetadataOptions MetadataOptions} for details.\n * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}.\n * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).\n * </li>\n *\n * <li><code>constructor:</code> a function that serves as a constructor function for the new class.\n * If no constructor function is given, the framework creates a default implementation that delegates all\n * its arguments to the constructor function of the base class.\n * </li>\n *\n * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype\n * object of the newly created class. Callers can thereby add methods or properties to all instances of the\n * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't\n * make sense to use primitive values here other than to declare public constants.\n *\n * If such a property has a function as its value, and if the property name does not start with an underscore\n * or with the prefix \"on\", the property name will be automatically added to the list of public methods of the\n * class (see property <code>publicMethods</code> in the <code>metadata</code> section). If a method's name\n * matches that pattern, but is not meant to be public, it shouldn't be included in the class info object,\n * but be assigned to the prototype instead.\n * </li>\n *\n * </ul>\n *\n * The prototype object of the newly created class uses the same prototype as instances of the base class\n * (prototype chaining).\n *\n * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>\n * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)\n * itself.\n *\n * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class\n * can be specified. Instances of that class will be used to represent metadata for the newly created class\n * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the\n * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).\n *\n * @param {string} sClassName name of the class to be created\n * @param {object} [oClassInfo] structured object with information about the class\n * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.\n * @return {function} the created class / constructor function\n * @public\n * @static\n * @name sap.ui.base.Object.extend\n * @function\n * @since 1.3.1\n */\n\n/**\n * Creates metadata for a given class and attaches it to the constructor and prototype of that class.\n *\n * After creation, metadata can be retrieved with getMetadata().\n *\n * The static info can at least contain the following entries:\n * <ul>\n * <li>baseType: {string} fully qualified name of a base class or empty</li>\n * <li>publicMethods: {string} an array of method names that will be visible in the interface proxy returned by {@link #getInterface}</li>\n * </ul>\n *\n * @param {string} sClassName name of an (already declared) constructor function\n * @param {object} oStaticInfo static info used to create the metadata object\n * @param {string} oStaticInfo.baseType qualified name of a base class\n * @param {string[]} oStaticInfo.publicMethods array of names of public methods\n * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.\n *\n * @return {sap.ui.base.Metadata} the created metadata object\n * @public\n * @static\n * @deprecated Since 1.3.1. Use the static <code>extend</code> method of the desired base class (e.g. {@link sap.ui.base.Object.extend})\n */\nBaseObject.defineClass = function (sClassName, oStaticInfo, FNMetaImpl) {\n  // create Metadata object\n  var oMetadata = new (FNMetaImpl || Metadata)(sClassName, oStaticInfo);\n  var fnClass = oMetadata.getClass();\n  fnClass.getMetadata = fnClass.prototype.getMetadata = function () {\n    return oMetadata;\n  };\n  // enrich function\n  if (!oMetadata.isFinal()) {\n    fnClass.extend = function (sSCName, oSCClassInfo, fnSCMetaImpl) {\n      return Metadata.createClass(fnClass, sSCName, oSCClassInfo, fnSCMetaImpl || FNMetaImpl);\n    };\n  }\n  Log.debug(\"defined class '\" + sClassName + \"'\" + (oMetadata.getParent() ? \" as subclass of \" + oMetadata.getParent().getName() : \"\"));\n  return oMetadata;\n};\n\n/**\n * Checks whether this object is an instance of the named type.\n *\n * This check is solely based on the type names as declared in the class metadata.\n * It compares the given <code>vTypeName</code> with the name of the class of this object,\n * with the names of any base class of that class and with the names of all interfaces\n * implemented by any of the aforementioned classes.\n *\n * Instead of a single type name, an array of type names can be given and the method\n * will check if this object is an instance of any of the listed types (logical or).\n *\n * Should the UI5 class system in future implement additional means of associating classes\n * with type names (e.g. by introducing mixins), then this method might detect matches\n * for those names as well.\n *\n * @example\n * myObject.isA(\"sap.ui.core.Control\"); // true if myObject is an instance of sap.ui.core.Control\n * myObject.isA([\"sap.ui.core.Control\", \"sap.ui.core.Fragment\"]); // true if myObject is an instance of sap.ui.core.Control or sap.ui.core.Fragment\n *\n * @param {string|string[]} vTypeName Type or types to check for\n * @returns {boolean} Whether this object is an instance of the given type or of any of the given types\n * @public\n * @since 1.56\n */\nBaseObject.prototype.isA = function (vTypeName) {\n  return this.getMetadata().isA(vTypeName);\n};\n\n/**\n * Checks whether the given object is an instance of the named type.\n * This function is a short-hand convenience for {@link sap.ui.base.Object#isA}.\n *\n * Please see the API documentation of {@link sap.ui.base.Object#isA} for more details.\n *\n * @param {any} oObject Object which will be checked whether it is an instance of the given type\n * @param {string|string[]} vTypeName Type or types to check for\n * @returns {boolean} Whether the given object is an instance of the given type or of any of the given types\n * @public\n * @since 1.56\n * @static\n * @deprecated Since 1.120, please use {@link sap.ui.base.Object.isObjectA}.\n */\nBaseObject.isA = function (oObject, vTypeName) {\n  return oObject instanceof BaseObject && oObject.isA(vTypeName);\n};\n\n/**\n * Checks whether the given object is an instance of the named type.\n * This function is a short-hand convenience for {@link sap.ui.base.Object#isA}.\n *\n * Please see the API documentation of {@link sap.ui.base.Object#isA} for more details.\n *\n * @param {any} oObject Object which will be checked whether it is an instance of the given type\n * @param {string|string[]} vTypeName Type or types to check for\n * @returns {boolean} Whether the given object is an instance of the given type or of any of the given types\n * @public\n * @since 1.120\n * @static\n */\nBaseObject.isObjectA = function (oObject, vTypeName) {\n  return oObject instanceof BaseObject && oObject.isA(vTypeName);\n};\n\n/**\n * @param  {sap.ui.base.Object} [oObject] Object for which a facade should be created\n * @param  {string[]} [aMethods=[]] Names of the methods, that should be available in the new facade\n * @param  {boolean} [_bReturnFacade=false] If true, the return value of a function call is this created Interface instance instead of the BaseObject interface\n * @private\n * @static\n */\nBaseObject._Interface = function (oObject, aMethods, _bReturnFacade) {\n  // if object is null or undefined, return itself\n  if (!oObject) {\n    return oObject;\n  }\n  function fCreateDelegator(oObject, sMethodName) {\n    return function () {\n      // return oObject[sMethodName].apply(oObject, arguments);\n      var tmp = oObject[sMethodName].apply(oObject, arguments);\n      // to avoid to hide the implementation behind the interface you need\n      // to override the getInterface function in the object or create the interface with bFacade = true\n      if (_bReturnFacade) {\n        return this;\n      } else {\n        return tmp instanceof BaseObject ? tmp.getInterface() : tmp;\n      }\n    };\n  }\n\n  // if there are no methods return\n  if (!aMethods) {\n    return {};\n  }\n  var sMethodName;\n\n  // create functions for all delegated methods\n  // PERFOPT: 'cache' length of aMethods to reduce # of resolutions\n  for (var i = 0, ml = aMethods.length; i < ml; i++) {\n    sMethodName = aMethods[i];\n    //!oObject[sMethodName] for 'lazy' loading interface methods ;-)\n    if (!oObject[sMethodName] || typeof oObject[sMethodName] === \"function\") {\n      this[sMethodName] = fCreateDelegator(oObject, sMethodName);\n    }\n  }\n};\nexport default BaseObject;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}