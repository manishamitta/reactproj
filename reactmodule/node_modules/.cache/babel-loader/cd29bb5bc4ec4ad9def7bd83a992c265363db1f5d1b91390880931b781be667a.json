{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar Button_1;\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport event from \"@ui5/webcomponents-base/dist/decorators/event.js\";\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport { isSpace, isEnter, isEscape, isShift } from \"@ui5/webcomponents-base/dist/Keys.js\";\nimport { getEffectiveAriaLabelText } from \"@ui5/webcomponents-base/dist/util/AriaLabelHelper.js\";\nimport { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport { markEvent } from \"@ui5/webcomponents-base/dist/MarkedEvents.js\";\nimport { getIconAccessibleName } from \"@ui5/webcomponents-base/dist/asset-registries/Icons.js\";\nimport { isDesktop, isSafari } from \"@ui5/webcomponents-base/dist/Device.js\";\nimport willShowContent from \"@ui5/webcomponents-base/dist/util/willShowContent.js\";\nimport { submitForm, resetForm } from \"@ui5/webcomponents-base/dist/features/InputElementsFormSupport.js\";\nimport { getEnableDefaultTooltips } from \"@ui5/webcomponents-base/dist/config/Tooltips.js\";\nimport ButtonDesign from \"./types/ButtonDesign.js\";\nimport ButtonType from \"./types/ButtonType.js\";\nimport ButtonTemplate from \"./generated/templates/ButtonTemplate.lit.js\";\nimport Icon from \"./Icon.js\";\nimport IconMode from \"./types/IconMode.js\";\nimport { BUTTON_ARIA_TYPE_ACCEPT, BUTTON_ARIA_TYPE_REJECT, BUTTON_ARIA_TYPE_EMPHASIZED } from \"./generated/i18n/i18n-defaults.js\";\n// Styles\nimport buttonCss from \"./generated/themes/Button.css.js\";\nlet isGlobalHandlerAttached = false;\nlet activeButton = null;\n/**\n * @class\n *\n * ### Overview\n *\n * The `ui5-button` component represents a simple push button.\n * It enables users to trigger actions by clicking or tapping the `ui5-button`, or by pressing\n * certain keyboard keys, such as Enter.\n *\n * ### Usage\n *\n * For the `ui5-button` UI, you can define text, icon, or both. You can also specify\n * whether the text or the icon is displayed first.\n *\n * You can choose from a set of predefined types that offer different\n * styling to correspond to the triggered action.\n *\n * You can set the `ui5-button` as enabled or disabled. An enabled\n * `ui5-button` can be pressed by clicking or tapping it. The button changes\n * its style to provide visual feedback to the user that it is pressed or hovered over with\n * the mouse cursor. A disabled `ui5-button` appears inactive and cannot be pressed.\n *\n * ### ES6 Module Import\n *\n * `import \"@ui5/webcomponents/dist/Button.js\";`\n * @csspart button - Used to style the native button element\n * @constructor\n * @extends UI5Element\n * @implements { IButton }\n * @public\n */\nlet Button = Button_1 = class Button extends UI5Element {\n  constructor() {\n    super();\n    /**\n     * Defines the component design.\n     * @default \"Default\"\n     * @public\n     */\n    this.design = \"Default\";\n    /**\n     * Defines whether the component is disabled.\n     * A disabled component can't be pressed or\n     * focused, and it is not in the tab chain.\n     * @default false\n     * @public\n     */\n    this.disabled = false;\n    /**\n     * When set to `true`, the component will\n     * automatically submit the nearest HTML form element on `press`.\n     *\n     * **Note:** This property is only applicable within the context of an HTML Form element.`\n     * @default false\n     * @public\n     * @deprecated Set the \"type\" property to \"Submit\" to achieve the same result. The \"submits\" property is ignored if \"type\" is set to any value other than \"Button\".\n     */\n    this.submits = false;\n    /**\n     * Defines the additional accessibility attributes that will be applied to the component.\n     * The following fields are supported:\n     *\n     * - **expanded**: Indicates whether the button, or another grouping element it controls, is currently expanded or collapsed.\n     * Accepts the following string values: `true` or `false`\n     *\n     * - **hasPopup**: Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by the button.\n     * Accepts the following string values: `dialog`, `grid`, `listbox`, `menu` or `tree`.\n     *\n     * - **controls**: Identifies the element (or elements) whose contents or presence are controlled by the button element.\n     * Accepts a lowercase string value.\n     *\n     * @public\n     * @since 1.2.0\n     * @default {}\n     */\n    this.accessibilityAttributes = {};\n    /**\n     * Defines whether the button has special form-related functionality.\n     *\n     * **Note:** This property is only applicable within the context of an HTML Form element.\n     * @default \"Button\"\n     * @public\n     * @since 1.15.0\n     */\n    this.type = \"Button\";\n    /**\n     * Describes the accessibility role of the button.\n     *\n     * **Note:** Use <code>ButtonAccessibleRole.Link</code> role only with a press handler, which performs a navigation. In all other scenarios the default button semantics are recommended.\n     *\n     * @default \"Button\"\n     * @public\n     * @since 1.23\n     */\n    this.accessibleRole = \"Button\";\n    /**\n     * Used to switch the active state (pressed or not) of the component.\n     * @private\n     */\n    this.active = false;\n    /**\n     * Defines if a content has been added to the default slot\n     * @private\n     */\n    this.iconOnly = false;\n    /**\n     * Indicates if the elements has a slotted icon\n     * @private\n     */\n    this.hasIcon = false;\n    /**\n     * Indicates if the elements has a slotted end icon\n     * @private\n     */\n    this.hasEndIcon = false;\n    /**\n     * Indicates if the element is focusable\n     * @private\n     */\n    this.nonInteractive = false;\n    /**\n     * @private\n     */\n    this._iconSettings = {};\n    /**\n     * Defines the tabIndex of the component.\n     * @private\n     */\n    this.forcedTabIndex = \"0\";\n    /**\n     * @since 1.0.0-rc.13\n     * @private\n     */\n    this._isTouch = false;\n    this._cancelAction = false;\n    this._deactivate = () => {\n      if (activeButton) {\n        activeButton._setActiveState(false);\n      }\n    };\n    if (!isGlobalHandlerAttached) {\n      document.addEventListener(\"mouseup\", this._deactivate);\n      isGlobalHandlerAttached = true;\n    }\n    const handleTouchStartEvent = e => {\n      markEvent(e, \"button\");\n      if (this.nonInteractive) {\n        return;\n      }\n      this._setActiveState(true);\n    };\n    this._ontouchstart = {\n      handleEvent: handleTouchStartEvent,\n      passive: true\n    };\n  }\n  onEnterDOM() {\n    if (isDesktop()) {\n      this.setAttribute(\"desktop\", \"\");\n    }\n  }\n  async onBeforeRendering() {\n    this.hasIcon = !!this.icon;\n    this.hasEndIcon = !!this.endIcon;\n    this.iconOnly = this.isIconOnly;\n    this.buttonTitle = this.tooltip || (await this.getDefaultTooltip());\n  }\n  _onclick(e) {\n    if (this.nonInteractive) {\n      return;\n    }\n    markEvent(e, \"button\");\n    if (this._isSubmit) {\n      submitForm(this);\n    }\n    if (this._isReset) {\n      resetForm(this);\n    }\n    if (isSafari()) {\n      this.getDomRef()?.focus();\n    }\n  }\n  _onmousedown(e) {\n    if (this.nonInteractive) {\n      return;\n    }\n    markEvent(e, \"button\");\n    this._setActiveState(true);\n    activeButton = this; // eslint-disable-line\n  }\n  _ontouchend(e) {\n    if (this.disabled) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    if (this.active) {\n      this._setActiveState(false);\n    }\n    if (activeButton) {\n      activeButton._setActiveState(false);\n    }\n  }\n  _onmouseup(e) {\n    markEvent(e, \"button\");\n  }\n  _onkeydown(e) {\n    this._cancelAction = isShift(e) || isEscape(e);\n    markEvent(e, \"button\");\n    if (isSpace(e) || isEnter(e)) {\n      this._setActiveState(true);\n    } else if (this._cancelAction) {\n      this._setActiveState(false);\n    }\n  }\n  _onkeyup(e) {\n    if (this._cancelAction) {\n      e.preventDefault();\n    }\n    if (isSpace(e)) {\n      markEvent(e, \"button\");\n    }\n    if (isSpace(e) || isEnter(e)) {\n      if (this.active) {\n        this._setActiveState(false);\n      }\n    }\n  }\n  _onfocusout() {\n    if (this.nonInteractive) {\n      return;\n    }\n    if (this.active) {\n      this._setActiveState(false);\n    }\n  }\n  _onfocusin(e) {\n    if (this.nonInteractive) {\n      return;\n    }\n    markEvent(e, \"button\");\n  }\n  _setActiveState(active) {\n    const eventPrevented = !this.fireEvent(\"_active-state-change\", null, true);\n    if (eventPrevented) {\n      return;\n    }\n    this.active = active;\n  }\n  get _hasPopup() {\n    return this.accessibilityAttributes.hasPopup;\n  }\n  get hasButtonType() {\n    return this.design !== ButtonDesign.Default && this.design !== ButtonDesign.Transparent;\n  }\n  get iconMode() {\n    if (!this.icon) {\n      return \"\";\n    }\n    return IconMode.Decorative;\n  }\n  get endIconMode() {\n    if (!this.endIcon) {\n      return \"\";\n    }\n    return IconMode.Decorative;\n  }\n  get isIconOnly() {\n    return !willShowContent(this.text);\n  }\n  static typeTextMappings() {\n    return {\n      \"Positive\": BUTTON_ARIA_TYPE_ACCEPT,\n      \"Negative\": BUTTON_ARIA_TYPE_REJECT,\n      \"Emphasized\": BUTTON_ARIA_TYPE_EMPHASIZED\n    };\n  }\n  getDefaultTooltip() {\n    if (!getEnableDefaultTooltips()) {\n      return;\n    }\n    return getIconAccessibleName(this.icon);\n  }\n  get buttonTypeText() {\n    return Button_1.i18nBundle.getText(Button_1.typeTextMappings()[this.design]);\n  }\n  get effectiveAccRole() {\n    return this.accessibleRole.toLowerCase();\n  }\n  get tabIndexValue() {\n    if (this.disabled) {\n      return;\n    }\n    const tabindex = this.getAttribute(\"tabindex\");\n    if (tabindex) {\n      return tabindex;\n    }\n    return this.nonInteractive ? \"-1\" : this.forcedTabIndex;\n  }\n  get showIconTooltip() {\n    return getEnableDefaultTooltips() && this.iconOnly && !this.tooltip;\n  }\n  get ariaLabelText() {\n    return getEffectiveAriaLabelText(this);\n  }\n  get ariaDescribedbyText() {\n    return this.hasButtonType ? \"ui5-button-hiddenText-type\" : undefined;\n  }\n  get _isSubmit() {\n    return this.type === ButtonType.Submit || this.submits;\n  }\n  get _isReset() {\n    return this.type === ButtonType.Reset;\n  }\n  static async onDefine() {\n    Button_1.i18nBundle = await getI18nBundle(\"@ui5/webcomponents\");\n  }\n};\n__decorate([property()], Button.prototype, \"design\", void 0);\n__decorate([property({\n  type: Boolean\n})], Button.prototype, \"disabled\", void 0);\n__decorate([property()], Button.prototype, \"icon\", void 0);\n__decorate([property()], Button.prototype, \"endIcon\", void 0);\n__decorate([property({\n  type: Boolean\n})], Button.prototype, \"submits\", void 0);\n__decorate([property()], Button.prototype, \"tooltip\", void 0);\n__decorate([property()], Button.prototype, \"accessibleName\", void 0);\n__decorate([property()], Button.prototype, \"accessibleNameRef\", void 0);\n__decorate([property({\n  type: Object\n})], Button.prototype, \"accessibilityAttributes\", void 0);\n__decorate([property()], Button.prototype, \"type\", void 0);\n__decorate([property()], Button.prototype, \"accessibleRole\", void 0);\n__decorate([property({\n  type: Boolean\n})], Button.prototype, \"active\", void 0);\n__decorate([property({\n  type: Boolean\n})], Button.prototype, \"iconOnly\", void 0);\n__decorate([property({\n  type: Boolean\n})], Button.prototype, \"hasIcon\", void 0);\n__decorate([property({\n  type: Boolean\n})], Button.prototype, \"hasEndIcon\", void 0);\n__decorate([property({\n  type: Boolean\n})], Button.prototype, \"nonInteractive\", void 0);\n__decorate([property({\n  noAttribute: true\n})], Button.prototype, \"buttonTitle\", void 0);\n__decorate([property({\n  type: Object\n})], Button.prototype, \"_iconSettings\", void 0);\n__decorate([property({\n  noAttribute: true\n})], Button.prototype, \"forcedTabIndex\", void 0);\n__decorate([property({\n  type: Boolean\n})], Button.prototype, \"_isTouch\", void 0);\n__decorate([property({\n  type: Boolean,\n  noAttribute: true\n})], Button.prototype, \"_cancelAction\", void 0);\n__decorate([slot({\n  type: Node,\n  \"default\": true\n})], Button.prototype, \"text\", void 0);\nButton = Button_1 = __decorate([customElement({\n  tag: \"ui5-button\",\n  formAssociated: true,\n  languageAware: true,\n  renderer: litRender,\n  template: ButtonTemplate,\n  styles: buttonCss,\n  dependencies: [Icon],\n  shadowRootOptions: {\n    delegatesFocus: true\n  }\n})\n/**\n * Fired when the component is activated either with a\n * mouse/tap or by using the Enter or Space key.\n *\n * **Note:** The event will not be fired if the `disabled`\n * property is set to `true`.\n * @public\n * @native\n */, event(\"click\")\n/**\n * Fired whenever the active state of the component changes.\n * @private\n */, event(\"_active-state-change\")], Button);\nButton.define();\nexport default Button;","map":{"version":3,"names":["UI5Element","customElement","property","event","slot","litRender","isSpace","isEnter","isEscape","isShift","getEffectiveAriaLabelText","getI18nBundle","markEvent","getIconAccessibleName","isDesktop","isSafari","willShowContent","submitForm","resetForm","getEnableDefaultTooltips","ButtonDesign","ButtonType","ButtonTemplate","Icon","IconMode","BUTTON_ARIA_TYPE_ACCEPT","BUTTON_ARIA_TYPE_REJECT","BUTTON_ARIA_TYPE_EMPHASIZED","buttonCss","isGlobalHandlerAttached","activeButton","Button","Button_1","constructor","design","disabled","submits","accessibilityAttributes","type","accessibleRole","active","iconOnly","hasIcon","hasEndIcon","nonInteractive","_iconSettings","forcedTabIndex","_isTouch","_cancelAction","_deactivate","_setActiveState","document","addEventListener","handleTouchStartEvent","e","_ontouchstart","handleEvent","passive","onEnterDOM","setAttribute","onBeforeRendering","icon","endIcon","isIconOnly","buttonTitle","tooltip","getDefaultTooltip","_onclick","_isSubmit","_isReset","getDomRef","focus","_onmousedown","_ontouchend","preventDefault","stopPropagation","_onmouseup","_onkeydown","_onkeyup","_onfocusout","_onfocusin","eventPrevented","fireEvent","_hasPopup","hasPopup","hasButtonType","Default","Transparent","iconMode","Decorative","endIconMode","text","typeTextMappings","buttonTypeText","i18nBundle","getText","effectiveAccRole","toLowerCase","tabIndexValue","tabindex","getAttribute","showIconTooltip","ariaLabelText","ariaDescribedbyText","undefined","Submit","Reset","onDefine","__decorate","Boolean","Object","noAttribute","Node","tag","formAssociated","languageAware","renderer","template","styles","dependencies","shadowRootOptions","delegatesFocus","define"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents/src/Button.ts"],"sourcesContent":["import UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport event from \"@ui5/webcomponents-base/dist/decorators/event.js\";\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport {\n\tisSpace,\n\tisEnter,\n\tisEscape,\n\tisShift,\n} from \"@ui5/webcomponents-base/dist/Keys.js\";\nimport { getEffectiveAriaLabelText } from \"@ui5/webcomponents-base/dist/util/AriaLabelHelper.js\";\nimport type { AccessibilityAttributes, PassiveEventListenerObject } from \"@ui5/webcomponents-base/dist/types.js\";\nimport type { ITabbable } from \"@ui5/webcomponents-base/dist/delegate/ItemNavigation.js\";\nimport { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport type I18nBundle from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport type { I18nText } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport { markEvent } from \"@ui5/webcomponents-base/dist/MarkedEvents.js\";\nimport { getIconAccessibleName } from \"@ui5/webcomponents-base/dist/asset-registries/Icons.js\";\n\nimport {\n\tisDesktop,\n\tisSafari,\n} from \"@ui5/webcomponents-base/dist/Device.js\";\nimport willShowContent from \"@ui5/webcomponents-base/dist/util/willShowContent.js\";\nimport { submitForm, resetForm } from \"@ui5/webcomponents-base/dist/features/InputElementsFormSupport.js\";\nimport { getEnableDefaultTooltips } from \"@ui5/webcomponents-base/dist/config/Tooltips.js\";\nimport ButtonDesign from \"./types/ButtonDesign.js\";\nimport ButtonType from \"./types/ButtonType.js\";\nimport type ButtonAccessibleRole from \"./types/ButtonAccessibleRole.js\";\nimport ButtonTemplate from \"./generated/templates/ButtonTemplate.lit.js\";\nimport Icon from \"./Icon.js\";\nimport IconMode from \"./types/IconMode.js\";\n\nimport { BUTTON_ARIA_TYPE_ACCEPT, BUTTON_ARIA_TYPE_REJECT, BUTTON_ARIA_TYPE_EMPHASIZED } from \"./generated/i18n/i18n-defaults.js\";\n\n// Styles\nimport buttonCss from \"./generated/themes/Button.css.js\";\n\n/**\n * Interface for components that may be used as a button inside numerous higher-order components\n * @public\n */\ninterface IButton extends HTMLElement, ITabbable {\n\tnonInteractive: boolean;\n}\n\nlet isGlobalHandlerAttached = false;\nlet activeButton: Button | null = null;\n\ntype ButtonAccessibilityAttributes = Pick<AccessibilityAttributes, \"expanded\" | \"hasPopup\" | \"controls\">;\n\n/**\n * @class\n *\n * ### Overview\n *\n * The `ui5-button` component represents a simple push button.\n * It enables users to trigger actions by clicking or tapping the `ui5-button`, or by pressing\n * certain keyboard keys, such as Enter.\n *\n * ### Usage\n *\n * For the `ui5-button` UI, you can define text, icon, or both. You can also specify\n * whether the text or the icon is displayed first.\n *\n * You can choose from a set of predefined types that offer different\n * styling to correspond to the triggered action.\n *\n * You can set the `ui5-button` as enabled or disabled. An enabled\n * `ui5-button` can be pressed by clicking or tapping it. The button changes\n * its style to provide visual feedback to the user that it is pressed or hovered over with\n * the mouse cursor. A disabled `ui5-button` appears inactive and cannot be pressed.\n *\n * ### ES6 Module Import\n *\n * `import \"@ui5/webcomponents/dist/Button.js\";`\n * @csspart button - Used to style the native button element\n * @constructor\n * @extends UI5Element\n * @implements { IButton }\n * @public\n */\n@customElement({\n\ttag: \"ui5-button\",\n\tformAssociated: true,\n\tlanguageAware: true,\n\trenderer: litRender,\n\ttemplate: ButtonTemplate,\n\tstyles: buttonCss,\n\tdependencies: [Icon],\n\tshadowRootOptions: { delegatesFocus: true },\n})\n/**\n * Fired when the component is activated either with a\n * mouse/tap or by using the Enter or Space key.\n *\n * **Note:** The event will not be fired if the `disabled`\n * property is set to `true`.\n * @public\n * @native\n */\n@event(\"click\")\n/**\n * Fired whenever the active state of the component changes.\n * @private\n */\n@event(\"_active-state-change\")\nclass Button extends UI5Element implements IButton {\n\t/**\n\t * Defines the component design.\n\t * @default \"Default\"\n\t * @public\n\t */\n\t@property()\n\tdesign: `${ButtonDesign}` = \"Default\";\n\n\t/**\n\t * Defines whether the component is disabled.\n\t * A disabled component can't be pressed or\n\t * focused, and it is not in the tab chain.\n\t * @default false\n\t * @public\n\t */\n\t@property({ type: Boolean })\n\tdisabled = false;\n\n\t/**\n\t * Defines the icon, displayed as graphical element within the component.\n\t * The SAP-icons font provides numerous options.\n\t *\n\t * Example:\n\t * See all the available icons within the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).\n\t * @default undefined\n\t * @public\n\t */\n\t@property()\n\ticon?: string;\n\n\t/**\n\t * Defines the icon, displayed as graphical element within the component after the button text.\n\t *\n\t * **Note:** It is highly recommended to use `endIcon` property only together with `icon` and/or `text` properties.\n\t * Usage of `endIcon` only should be avoided.\n\t *\n\t * The SAP-icons font provides numerous options.\n\t *\n\t * Example:\n\t * See all the available icons within the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).\n\t * @default undefined\n\t * @public\n\t */\n\t@property()\n\tendIcon?: string;\n\n\t/**\n\t * When set to `true`, the component will\n\t * automatically submit the nearest HTML form element on `press`.\n\t *\n\t * **Note:** This property is only applicable within the context of an HTML Form element.`\n\t * @default false\n\t * @public\n\t * @deprecated Set the \"type\" property to \"Submit\" to achieve the same result. The \"submits\" property is ignored if \"type\" is set to any value other than \"Button\".\n\t */\n\t@property({ type: Boolean })\n\tsubmits = false;\n\n\t/**\n\t * Defines the tooltip of the component.\n\t *\n\t * **Note:** A tooltip attribute should be provided for icon-only buttons, in order to represent their exact meaning/function.\n\t * @default undefined\n\t * @public\n\t * @since 1.2.0\n\t */\n\t@property()\n\ttooltip?: string;\n\n\t/**\n\t * Defines the accessible ARIA name of the component.\n\t * @default undefined\n\t * @public\n\t * @since 1.0.0-rc.15\n\t */\n\t@property()\n\taccessibleName?: string;\n\n\t/**\n\t * Receives id(or many ids) of the elements that label the component.\n\t * @default undefined\n\t * @public\n\t * @since 1.1.0\n\t */\n\t@property()\n\taccessibleNameRef?: string;\n\n\t/**\n\t * Defines the additional accessibility attributes that will be applied to the component.\n\t * The following fields are supported:\n\t *\n\t * - **expanded**: Indicates whether the button, or another grouping element it controls, is currently expanded or collapsed.\n\t * Accepts the following string values: `true` or `false`\n\t *\n\t * - **hasPopup**: Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by the button.\n\t * Accepts the following string values: `dialog`, `grid`, `listbox`, `menu` or `tree`.\n\t *\n\t * - **controls**: Identifies the element (or elements) whose contents or presence are controlled by the button element.\n\t * Accepts a lowercase string value.\n\t *\n\t * @public\n\t * @since 1.2.0\n\t * @default {}\n\t */\n\t@property({ type: Object })\n\taccessibilityAttributes: ButtonAccessibilityAttributes = {};\n\n\t/**\n\t * Defines whether the button has special form-related functionality.\n\t *\n\t * **Note:** This property is only applicable within the context of an HTML Form element.\n\t * @default \"Button\"\n\t * @public\n\t * @since 1.15.0\n\t */\n\t@property()\n\ttype: `${ButtonType}` = \"Button\";\n\n\t/**\n\t * Describes the accessibility role of the button.\n\t *\n\t * **Note:** Use <code>ButtonAccessibleRole.Link</code> role only with a press handler, which performs a navigation. In all other scenarios the default button semantics are recommended.\n\t *\n\t * @default \"Button\"\n\t * @public\n\t * @since 1.23\n\t */\n\t@property()\n\taccessibleRole: `${ButtonAccessibleRole}` = \"Button\";\n\n\t/**\n\t * Used to switch the active state (pressed or not) of the component.\n\t * @private\n\t */\n\t@property({ type: Boolean })\n\tactive = false;\n\n\t/**\n\t * Defines if a content has been added to the default slot\n\t * @private\n\t */\n\t@property({ type: Boolean })\n\ticonOnly = false;\n\n\t/**\n\t * Indicates if the elements has a slotted icon\n\t * @private\n\t */\n\t@property({ type: Boolean })\n\thasIcon = false;\n\n\t/**\n\t * Indicates if the elements has a slotted end icon\n\t * @private\n\t */\n\t@property({ type: Boolean })\n\thasEndIcon = false;\n\n\t/**\n\t * Indicates if the element is focusable\n\t * @private\n\t */\n\t@property({ type: Boolean })\n\tnonInteractive = false;\n\n\t/**\n\t * The current title of the button, either the tooltip property or the icons tooltip. The tooltip property with higher prio.\n\t * @private\n\t */\n\t@property({ noAttribute: true })\n\tbuttonTitle?: string;\n\n\t/**\n\t * @private\n\t */\n\t@property({ type: Object })\n\t_iconSettings: object = {};\n\n\t/**\n\t * Defines the tabIndex of the component.\n\t * @private\n\t */\n\t@property({ noAttribute: true })\n\tforcedTabIndex = \"0\";\n\n\t/**\n\t * @since 1.0.0-rc.13\n\t * @private\n\t */\n\t@property({ type: Boolean })\n\t_isTouch = false;\n\n\t@property({ type: Boolean, noAttribute: true })\n\t_cancelAction = false;\n\n\t/**\n\t * Defines the text of the component.\n\t *\n\t * **Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.\n\t * @public\n\t */\n\t@slot({ type: Node, \"default\": true })\n\ttext!: Array<Node>;\n\n\t_deactivate: () => void;\n\n\t_ontouchstart: PassiveEventListenerObject;\n\n\tstatic i18nBundle: I18nBundle;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._deactivate = () => {\n\t\t\tif (activeButton) {\n\t\t\t\tactiveButton._setActiveState(false);\n\t\t\t}\n\t\t};\n\n\t\tif (!isGlobalHandlerAttached) {\n\t\t\tdocument.addEventListener(\"mouseup\", this._deactivate);\n\n\t\t\tisGlobalHandlerAttached = true;\n\t\t}\n\n\t\tconst handleTouchStartEvent = (e: TouchEvent) => {\n\t\t\tmarkEvent(e, \"button\");\n\n\t\t\tif (this.nonInteractive) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._setActiveState(true);\n\t\t};\n\n\t\tthis._ontouchstart = {\n\t\t\thandleEvent: handleTouchStartEvent,\n\t\t\tpassive: true,\n\t\t};\n\t}\n\n\tonEnterDOM() {\n\t\tif (isDesktop()) {\n\t\t\tthis.setAttribute(\"desktop\", \"\");\n\t\t}\n\t}\n\n\tasync onBeforeRendering() {\n\t\tthis.hasIcon = !!this.icon;\n\t\tthis.hasEndIcon = !!this.endIcon;\n\t\tthis.iconOnly = this.isIconOnly;\n\n\t\tthis.buttonTitle = this.tooltip || await this.getDefaultTooltip();\n\t}\n\n\t_onclick(e: MouseEvent) {\n\t\tif (this.nonInteractive) {\n\t\t\treturn;\n\t\t}\n\n\t\tmarkEvent(e, \"button\");\n\t\tif (this._isSubmit) {\n\t\t\tsubmitForm(this);\n\t\t}\n\n\t\tif (this._isReset) {\n\t\t\tresetForm(this);\n\t\t}\n\n\t\tif (isSafari()) {\n\t\t\tthis.getDomRef()?.focus();\n\t\t}\n\t}\n\n\t_onmousedown(e: MouseEvent) {\n\t\tif (this.nonInteractive) {\n\t\t\treturn;\n\t\t}\n\n\t\tmarkEvent(e, \"button\");\n\t\tthis._setActiveState(true);\n\t\tactiveButton = this; // eslint-disable-line\n\t}\n\n\t_ontouchend(e: TouchEvent) {\n\t\tif (this.disabled) {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t}\n\n\t\tif (this.active) {\n\t\t\tthis._setActiveState(false);\n\t\t}\n\n\t\tif (activeButton) {\n\t\t\tactiveButton._setActiveState(false);\n\t\t}\n\t}\n\n\t_onmouseup(e: MouseEvent) {\n\t\tmarkEvent(e, \"button\");\n\t}\n\n\t_onkeydown(e: KeyboardEvent) {\n\t\tthis._cancelAction = isShift(e) || isEscape(e);\n\t\tmarkEvent(e, \"button\");\n\n\t\tif (isSpace(e) || isEnter(e)) {\n\t\t\tthis._setActiveState(true);\n\t\t} else if (this._cancelAction) {\n\t\t\tthis._setActiveState(false);\n\t\t}\n\t}\n\n\t_onkeyup(e: KeyboardEvent) {\n\t\tif (this._cancelAction) {\n\t\t\te.preventDefault();\n\t\t}\n\n\t\tif (isSpace(e)) {\n\t\t\tmarkEvent(e, \"button\");\n\t\t}\n\n\t\tif (isSpace(e) || isEnter(e)) {\n\t\t\tif (this.active) {\n\t\t\t\tthis._setActiveState(false);\n\t\t\t}\n\t\t}\n\t}\n\n\t_onfocusout() {\n\t\tif (this.nonInteractive) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.active) {\n\t\t\tthis._setActiveState(false);\n\t\t}\n\t}\n\n\t_onfocusin(e: FocusEvent) {\n\t\tif (this.nonInteractive) {\n\t\t\treturn;\n\t\t}\n\n\t\tmarkEvent(e, \"button\");\n\t}\n\n\t_setActiveState(active: boolean) {\n\t\tconst eventPrevented = !this.fireEvent(\"_active-state-change\", null, true);\n\n\t\tif (eventPrevented) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.active = active;\n\t}\n\n\tget _hasPopup() {\n\t\treturn this.accessibilityAttributes.hasPopup;\n\t}\n\n\tget hasButtonType() {\n\t\treturn this.design !== ButtonDesign.Default && this.design !== ButtonDesign.Transparent;\n\t}\n\n\tget iconMode() {\n\t\tif (!this.icon) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\treturn IconMode.Decorative;\n\t}\n\n\tget endIconMode() {\n\t\tif (!this.endIcon) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\treturn IconMode.Decorative;\n\t}\n\n\tget isIconOnly() {\n\t\treturn !willShowContent(this.text);\n\t}\n\n\tstatic typeTextMappings(): Record<string, I18nText> {\n\t\treturn {\n\t\t\t\"Positive\": BUTTON_ARIA_TYPE_ACCEPT,\n\t\t\t\"Negative\": BUTTON_ARIA_TYPE_REJECT,\n\t\t\t\"Emphasized\": BUTTON_ARIA_TYPE_EMPHASIZED,\n\t\t};\n\t}\n\n\tgetDefaultTooltip() {\n\t\tif (!getEnableDefaultTooltips()) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn getIconAccessibleName(this.icon);\n\t}\n\n\tget buttonTypeText() {\n\t\treturn Button.i18nBundle.getText(Button.typeTextMappings()[this.design]);\n\t}\n\n\tget effectiveAccRole() {\n\t\treturn this.accessibleRole.toLowerCase();\n\t}\n\n\tget tabIndexValue() {\n\t\tif (this.disabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tabindex = this.getAttribute(\"tabindex\");\n\n\t\tif (tabindex) {\n\t\t\treturn tabindex;\n\t\t}\n\n\t\treturn this.nonInteractive ? \"-1\" : this.forcedTabIndex;\n\t}\n\n\tget showIconTooltip() {\n\t\treturn getEnableDefaultTooltips() && this.iconOnly && !this.tooltip;\n\t}\n\n\tget ariaLabelText() {\n\t\treturn getEffectiveAriaLabelText(this);\n\t}\n\n\tget ariaDescribedbyText() {\n\t\treturn this.hasButtonType ? \"ui5-button-hiddenText-type\" : undefined;\n\t}\n\n\tget _isSubmit() {\n\t\treturn this.type === ButtonType.Submit || this.submits;\n\t}\n\n\tget _isReset() {\n\t\treturn this.type === ButtonType.Reset;\n\t}\n\n\tstatic async onDefine() {\n\t\tButton.i18nBundle = await getI18nBundle(\"@ui5/webcomponents\");\n\t}\n}\n\nButton.define();\n\nexport default Button;\nexport type {\n\tButtonAccessibilityAttributes,\n\tIButton,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}