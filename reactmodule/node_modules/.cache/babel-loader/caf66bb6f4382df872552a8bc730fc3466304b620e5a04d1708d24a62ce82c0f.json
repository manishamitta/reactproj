{"ast":null,"code":"import axios from\"axios\";// import express from \"express\";\n// import cors from \"cors\";\n// import bodyParser from \"body-parser\";\nconst baseURL=\"servicedest/\";// const app = express();\nconst instance=axios.create({baseURL});export const getTableData=async function(){var _data$d;let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{$top:100,$skip:0};const{data}=await instance.get(\"/complains\",{params});return((_data$d=data.d)===null||_data$d===void 0?void 0:_data$d.results)||data.d||data.value;};export const getTableCount=async()=>{const{data}=await instance.get(\"/complains/$count\");return data;};// export const getItemById = async (s_id) => {\n//     try {\n//         const url = `https://2ed753fbtrial-dev-cross1-srv.cfapps.us10-001.hana.ondemand.com/odata/v4/my/class/${s_id}`;\n//         const response = await axios.get(url);\n//         console.log(\"API Response:\", response.data); // Log the response data\n//         return response.data; // Return the data directly\n//     } catch (error) {\n//         console.error(`Error fetching item with ID ${s_id}:`, error);\n//         throw error; // Re-throw to handle it in the component\n//     }\n// };\nexport const createItem=async itemData=>{try{const{data}=await instance.post(\"/complains\",itemData);return data;}catch(error){console.error(\"Error creating item:\",error);throw error;// Re-throw to handle it in the component\n}};export const verifyCaptcha=async token=>{// Replace with your actual secret key\nconst url=`https://www.google.com/recaptcha/api/siteverify?secret=6Ldjq04qAAAAAGBSH2Rqul3uKNm_MpAm2XEW6yzk&response=${token}`;try{const{data}=await axios.post(url);return data.success;}catch(error){console.error(\"Error verifying reCAPTCHA:\",error);throw error;}};// export const verifyCaptcha = async (token) => {\n//   const url = `https://www.google.com/recaptcha/api/siteverify?secret=6Ldjq04qAAAAAGBSH2Rqul3uKNm_MpAm2XEW6yzk&response=${token}`;\n//   try {\n//     // Using fetch with no-cors mode and including credentials\n//     const response = await fetch(url, {\n//       method: 'POST',\n//       mode: 'no-cors', // Set to no-cors\n//       credentials: 'include', // Include cookies\n//       headers: {\n//         'Content-Type': 'application/x-www-form-urlencoded',\n//       },\n//       body: new URLSearchParams({ response: token }).toString(), // Ensure to pass the token correctly\n//     });\n//     // Since it's no-cors, you won't be able to access the response data.\n//     // The request will be considered successful if response.ok is true.\n//     return response.ok; // This will return true if the request was successful\n//   } catch (error) {\n//     console.error(\"Error verifying reCAPTCHA:\", error);\n//     throw error; // Re-throw to handle it in the component\n//   }\n// };","map":{"version":3,"names":["axios","baseURL","instance","create","getTableData","_data$d","params","arguments","length","undefined","$top","$skip","data","get","d","results","value","getTableCount","createItem","itemData","post","error","console","verifyCaptcha","token","url","success"],"sources":["/home/user/projects/reactproj/reactmodule/src/api/index.js"],"sourcesContent":["import axios from \"axios\";\n// import express from \"express\";\n// import cors from \"cors\";\n// import bodyParser from \"body-parser\";\n\n\n\n\n\nconst baseURL = \"servicedest/\";\n// const app = express();\n\n\nconst instance = axios.create({\n  baseURL\n});\n\nexport const getTableData = async (params = { $top: 100, $skip: 0 }) => {\n  const { data } = await instance.get(\"/complains\", {\n    params\n  });\n\n  return data.d?.results || data.d || data.value;\n};\n\nexport const getTableCount = async () => {\n  const { data } = await instance.get(\"/complains/$count\");\n  return data;\n};\n\n\n// export const getItemById = async (s_id) => {\n//     try {\n//         const url = `https://2ed753fbtrial-dev-cross1-srv.cfapps.us10-001.hana.ondemand.com/odata/v4/my/class/${s_id}`;\n//         const response = await axios.get(url);\n//         console.log(\"API Response:\", response.data); // Log the response data\n//         return response.data; // Return the data directly\n//     } catch (error) {\n//         console.error(`Error fetching item with ID ${s_id}:`, error);\n//         throw error; // Re-throw to handle it in the component\n//     }\n// };\nexport const createItem = async (itemData) => {\n  try {\n    const { data } = await instance.post(\"/complains\", itemData);\n    return data;\n  } catch (error) {\n    console.error(\"Error creating item:\", error);\n    throw error; // Re-throw to handle it in the component\n  }\n};\n\n\nexport const verifyCaptcha = async (token) => {\n\n   // Replace with your actual secret key\n  const url = `https://www.google.com/recaptcha/api/siteverify?secret=6Ldjq04qAAAAAGBSH2Rqul3uKNm_MpAm2XEW6yzk&response=${token}`;\n\n  try {\n    const { data } = await axios.post(url);\n    return data.success;\n  } catch (error) {\n    console.error(\"Error verifying reCAPTCHA:\", error);\n    throw error;\n  }\n};\n// export const verifyCaptcha = async (token) => {\n//   const url = `https://www.google.com/recaptcha/api/siteverify?secret=6Ldjq04qAAAAAGBSH2Rqul3uKNm_MpAm2XEW6yzk&response=${token}`;\n\n//   try {\n//     // Using fetch with no-cors mode and including credentials\n//     const response = await fetch(url, {\n//       method: 'POST',\n//       mode: 'no-cors', // Set to no-cors\n//       credentials: 'include', // Include cookies\n//       headers: {\n//         'Content-Type': 'application/x-www-form-urlencoded',\n//       },\n//       body: new URLSearchParams({ response: token }).toString(), // Ensure to pass the token correctly\n//     });\n\n//     // Since it's no-cors, you won't be able to access the response data.\n//     // The request will be considered successful if response.ok is true.\n//     return response.ok; // This will return true if the request was successful\n//   } catch (error) {\n//     console.error(\"Error verifying reCAPTCHA:\", error);\n//     throw error; // Re-throw to handle it in the component\n//   }\n// };\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB;AACA;AACA;AAMA,KAAM,CAAAC,OAAO,CAAG,cAAc,CAC9B;AAGA,KAAM,CAAAC,QAAQ,CAAGF,KAAK,CAACG,MAAM,CAAC,CAC5BF,OACF,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAG,YAAY,CAAG,cAAAA,CAAA,CAA4C,KAAAC,OAAA,IAArC,CAAAC,MAAM,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAEG,IAAI,CAAE,GAAG,CAAEC,KAAK,CAAE,CAAE,CAAC,CACjE,KAAM,CAAEC,IAAK,CAAC,CAAG,KAAM,CAAAV,QAAQ,CAACW,GAAG,CAAC,YAAY,CAAE,CAChDP,MACF,CAAC,CAAC,CAEF,MAAO,EAAAD,OAAA,CAAAO,IAAI,CAACE,CAAC,UAAAT,OAAA,iBAANA,OAAA,CAAQU,OAAO,GAAIH,IAAI,CAACE,CAAC,EAAIF,IAAI,CAACI,KAAK,CAChD,CAAC,CAED,MAAO,MAAM,CAAAC,aAAa,CAAG,KAAAA,CAAA,GAAY,CACvC,KAAM,CAAEL,IAAK,CAAC,CAAG,KAAM,CAAAV,QAAQ,CAACW,GAAG,CAAC,mBAAmB,CAAC,CACxD,MAAO,CAAAD,IAAI,CACb,CAAC,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAO,MAAM,CAAAM,UAAU,CAAG,KAAO,CAAAC,QAAQ,EAAK,CAC5C,GAAI,CACF,KAAM,CAAEP,IAAK,CAAC,CAAG,KAAM,CAAAV,QAAQ,CAACkB,IAAI,CAAC,YAAY,CAAED,QAAQ,CAAC,CAC5D,MAAO,CAAAP,IAAI,CACb,CAAE,MAAOS,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,KAAM,CAAAA,KAAK,CAAE;AACf,CACF,CAAC,CAGD,MAAO,MAAM,CAAAE,aAAa,CAAG,KAAO,CAAAC,KAAK,EAAK,CAE3C;AACD,KAAM,CAAAC,GAAG,CAAG,4GAA4GD,KAAK,EAAE,CAE/H,GAAI,CACF,KAAM,CAAEZ,IAAK,CAAC,CAAG,KAAM,CAAAZ,KAAK,CAACoB,IAAI,CAACK,GAAG,CAAC,CACtC,MAAO,CAAAb,IAAI,CAACc,OAAO,CACrB,CAAE,MAAOL,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CAClD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CACD;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}