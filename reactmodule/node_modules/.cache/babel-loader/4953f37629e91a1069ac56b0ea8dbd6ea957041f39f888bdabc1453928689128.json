{"ast":null,"code":"import { enrichEventWithDetails } from '@ui5/webcomponents-react-base';\nimport { useEffect } from 'react';\nimport { AnalyticalTableSelectionMode } from '../../../enums/index.js';\nexport const useSelectionChangeCallback = hooks => {\n  hooks.useControlledState.push((state, _ref) => {\n    let {\n      instance\n    } = _ref;\n    const {\n      selectedRowPayload,\n      selectedRowIds,\n      filters,\n      globalFilter\n    } = state;\n    const {\n      rowsById,\n      preFilteredRowsById,\n      webComponentsReactProperties,\n      dispatch\n    } = instance;\n    const isFiltered = filters?.length > 0 || !!globalFilter;\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      if (selectedRowPayload?.fired) {\n        const {\n          event: e,\n          row: selRow,\n          selectAll\n        } = selectedRowPayload;\n        const row = rowsById[selRow?.id];\n        // when selecting a row on a filtered table, `preFilteredRowsById` has to be used, otherwise filtered out rows are undefined\n        const _rowsById = isFiltered ? preFilteredRowsById : rowsById;\n        if (row || selectAll) {\n          const payload = {\n            row: row,\n            rowsById: _rowsById,\n            isSelected: row?.isSelected,\n            allRowsSelected: false,\n            selectedRowIds\n          };\n          if (webComponentsReactProperties.selectionMode === AnalyticalTableSelectionMode.Multiple) {\n            if (Object.keys(selectedRowIds).length === Object.keys(_rowsById).length) {\n              payload.allRowsSelected = true;\n            }\n            if (selectAll) {\n              dispatch({\n                type: 'SELECT_ROW_CB',\n                payload: {\n                  event: e,\n                  row,\n                  selectAll: false,\n                  fired: false\n                }\n              });\n              webComponentsReactProperties?.onRowSelect(enrichEventWithDetails(e, {\n                rowsById: payload.rowsById,\n                allRowsSelected: payload.allRowsSelected,\n                selectedRowIds: payload.selectedRowIds\n              }));\n              return;\n            }\n          }\n          dispatch({\n            type: 'SELECT_ROW_CB',\n            payload: {\n              event: e,\n              row,\n              fired: false\n            }\n          });\n          webComponentsReactProperties?.onRowSelect(enrichEventWithDetails(e, payload));\n        }\n      }\n    }, [selectedRowPayload?.fired, rowsById, webComponentsReactProperties.selectionMode, selectedRowIds, isFiltered]);\n    return state;\n  });\n};\nuseSelectionChangeCallback.pluginName = 'useSelectionChangeCallback';","map":{"version":3,"names":["enrichEventWithDetails","useEffect","AnalyticalTableSelectionMode","useSelectionChangeCallback","hooks","useControlledState","push","state","_ref","instance","selectedRowPayload","selectedRowIds","filters","globalFilter","rowsById","preFilteredRowsById","webComponentsReactProperties","dispatch","isFiltered","length","fired","event","e","row","selRow","selectAll","id","_rowsById","payload","isSelected","allRowsSelected","selectionMode","Multiple","Object","keys","type","onRowSelect","pluginName"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-react/dist/components/AnalyticalTable/hooks/useSelectionChangeCallback.js"],"sourcesContent":["import { enrichEventWithDetails } from '@ui5/webcomponents-react-base';\nimport { useEffect } from 'react';\nimport { AnalyticalTableSelectionMode } from '../../../enums/index.js';\nexport const useSelectionChangeCallback = hooks => {\n  hooks.useControlledState.push((state, {\n    instance\n  }) => {\n    const {\n      selectedRowPayload,\n      selectedRowIds,\n      filters,\n      globalFilter\n    } = state;\n    const {\n      rowsById,\n      preFilteredRowsById,\n      webComponentsReactProperties,\n      dispatch\n    } = instance;\n    const isFiltered = filters?.length > 0 || !!globalFilter;\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      if (selectedRowPayload?.fired) {\n        const {\n          event: e,\n          row: selRow,\n          selectAll\n        } = selectedRowPayload;\n        const row = rowsById[selRow?.id];\n        // when selecting a row on a filtered table, `preFilteredRowsById` has to be used, otherwise filtered out rows are undefined\n        const _rowsById = isFiltered ? preFilteredRowsById : rowsById;\n        if (row || selectAll) {\n          const payload = {\n            row: row,\n            rowsById: _rowsById,\n            isSelected: row?.isSelected,\n            allRowsSelected: false,\n            selectedRowIds\n          };\n          if (webComponentsReactProperties.selectionMode === AnalyticalTableSelectionMode.Multiple) {\n            if (Object.keys(selectedRowIds).length === Object.keys(_rowsById).length) {\n              payload.allRowsSelected = true;\n            }\n            if (selectAll) {\n              dispatch({\n                type: 'SELECT_ROW_CB',\n                payload: {\n                  event: e,\n                  row,\n                  selectAll: false,\n                  fired: false\n                }\n              });\n              webComponentsReactProperties?.onRowSelect(enrichEventWithDetails(e, {\n                rowsById: payload.rowsById,\n                allRowsSelected: payload.allRowsSelected,\n                selectedRowIds: payload.selectedRowIds\n              }));\n              return;\n            }\n          }\n          dispatch({\n            type: 'SELECT_ROW_CB',\n            payload: {\n              event: e,\n              row,\n              fired: false\n            }\n          });\n          webComponentsReactProperties?.onRowSelect(enrichEventWithDetails(e, payload));\n        }\n      }\n    }, [selectedRowPayload?.fired, rowsById, webComponentsReactProperties.selectionMode, selectedRowIds, isFiltered]);\n    return state;\n  });\n};\nuseSelectionChangeCallback.pluginName = 'useSelectionChangeCallback';"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,+BAA+B;AACtE,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,4BAA4B,QAAQ,yBAAyB;AACtE,OAAO,MAAMC,0BAA0B,GAAGC,KAAK,IAAI;EACjDA,KAAK,CAACC,kBAAkB,CAACC,IAAI,CAAC,CAACC,KAAK,EAAAC,IAAA,KAE9B;IAAA,IAFgC;MACpCC;IACF,CAAC,GAAAD,IAAA;IACC,MAAM;MACJE,kBAAkB;MAClBC,cAAc;MACdC,OAAO;MACPC;IACF,CAAC,GAAGN,KAAK;IACT,MAAM;MACJO,QAAQ;MACRC,mBAAmB;MACnBC,4BAA4B;MAC5BC;IACF,CAAC,GAAGR,QAAQ;IACZ,MAAMS,UAAU,GAAGN,OAAO,EAAEO,MAAM,GAAG,CAAC,IAAI,CAAC,CAACN,YAAY;;IAExD;IACAZ,SAAS,CAAC,MAAM;MACd,IAAIS,kBAAkB,EAAEU,KAAK,EAAE;QAC7B,MAAM;UACJC,KAAK,EAAEC,CAAC;UACRC,GAAG,EAAEC,MAAM;UACXC;QACF,CAAC,GAAGf,kBAAkB;QACtB,MAAMa,GAAG,GAAGT,QAAQ,CAACU,MAAM,EAAEE,EAAE,CAAC;QAChC;QACA,MAAMC,SAAS,GAAGT,UAAU,GAAGH,mBAAmB,GAAGD,QAAQ;QAC7D,IAAIS,GAAG,IAAIE,SAAS,EAAE;UACpB,MAAMG,OAAO,GAAG;YACdL,GAAG,EAAEA,GAAG;YACRT,QAAQ,EAAEa,SAAS;YACnBE,UAAU,EAAEN,GAAG,EAAEM,UAAU;YAC3BC,eAAe,EAAE,KAAK;YACtBnB;UACF,CAAC;UACD,IAAIK,4BAA4B,CAACe,aAAa,KAAK7B,4BAA4B,CAAC8B,QAAQ,EAAE;YACxF,IAAIC,MAAM,CAACC,IAAI,CAACvB,cAAc,CAAC,CAACQ,MAAM,KAAKc,MAAM,CAACC,IAAI,CAACP,SAAS,CAAC,CAACR,MAAM,EAAE;cACxES,OAAO,CAACE,eAAe,GAAG,IAAI;YAChC;YACA,IAAIL,SAAS,EAAE;cACbR,QAAQ,CAAC;gBACPkB,IAAI,EAAE,eAAe;gBACrBP,OAAO,EAAE;kBACPP,KAAK,EAAEC,CAAC;kBACRC,GAAG;kBACHE,SAAS,EAAE,KAAK;kBAChBL,KAAK,EAAE;gBACT;cACF,CAAC,CAAC;cACFJ,4BAA4B,EAAEoB,WAAW,CAACpC,sBAAsB,CAACsB,CAAC,EAAE;gBAClER,QAAQ,EAAEc,OAAO,CAACd,QAAQ;gBAC1BgB,eAAe,EAAEF,OAAO,CAACE,eAAe;gBACxCnB,cAAc,EAAEiB,OAAO,CAACjB;cAC1B,CAAC,CAAC,CAAC;cACH;YACF;UACF;UACAM,QAAQ,CAAC;YACPkB,IAAI,EAAE,eAAe;YACrBP,OAAO,EAAE;cACPP,KAAK,EAAEC,CAAC;cACRC,GAAG;cACHH,KAAK,EAAE;YACT;UACF,CAAC,CAAC;UACFJ,4BAA4B,EAAEoB,WAAW,CAACpC,sBAAsB,CAACsB,CAAC,EAAEM,OAAO,CAAC,CAAC;QAC/E;MACF;IACF,CAAC,EAAE,CAAClB,kBAAkB,EAAEU,KAAK,EAAEN,QAAQ,EAAEE,4BAA4B,CAACe,aAAa,EAAEpB,cAAc,EAAEO,UAAU,CAAC,CAAC;IACjH,OAAOX,KAAK;EACd,CAAC,CAAC;AACJ,CAAC;AACDJ,0BAA0B,CAACkC,UAAU,GAAG,4BAA4B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}