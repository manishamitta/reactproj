{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport useTimeout from '@mui/utils/useTimeout';\nimport { useResizeObserver } from '@mui/x-internals/useResizeObserver';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { useGridPrivateApiContext } from \"../../utils/useGridPrivateApiContext.js\";\nimport { useGridRootProps } from \"../../utils/useGridRootProps.js\";\nimport { useGridSelector } from \"../../utils/useGridSelector.js\";\nimport { useRunOnce } from \"../../utils/useRunOnce.js\";\nimport { gridVisibleColumnDefinitionsSelector, gridVisiblePinnedColumnDefinitionsSelector, gridColumnPositionsSelector, gridHasColSpanSelector } from \"../columns/gridColumnsSelector.js\";\nimport { gridDimensionsSelector } from \"../dimensions/gridDimensionsSelectors.js\";\nimport { gridPinnedRowsSelector } from \"../rows/gridRowsSelector.js\";\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from \"../focus/gridFocusStateSelector.js\";\nimport { useGridVisibleRows, getVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { useGridApiEventHandler } from \"../../utils/index.js\";\nimport * as platform from \"../../../utils/platform.js\";\nimport { clamp, range } from \"../../../utils/utils.js\";\nimport { selectedIdsLookupSelector } from \"../rowSelection/gridRowSelectionSelector.js\";\nimport { gridRowsMetaSelector } from \"../rows/gridRowsMetaSelector.js\";\nimport { getFirstNonSpannedColumnToRender } from \"../columns/gridColumnsUtils.js\";\nimport { getMinimalContentHeight } from \"../rows/gridRowsUtils.js\";\nimport { gridRenderContextSelector, gridVirtualizationRowEnabledSelector, gridVirtualizationColumnEnabledSelector } from \"./gridVirtualizationSelectors.js\";\nimport { EMPTY_RENDER_CONTEXT } from \"./useGridVirtualization.js\";\nimport { gridRowSpanningHiddenCellsOriginMapSelector } from \"../rows/gridRowSpanningSelectors.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst MINIMUM_COLUMN_WIDTH = 50;\nvar ScrollDirection = /*#__PURE__*/function (ScrollDirection) {\n  ScrollDirection[ScrollDirection[\"NONE\"] = 0] = \"NONE\";\n  ScrollDirection[ScrollDirection[\"UP\"] = 1] = \"UP\";\n  ScrollDirection[ScrollDirection[\"DOWN\"] = 2] = \"DOWN\";\n  ScrollDirection[ScrollDirection[\"LEFT\"] = 3] = \"LEFT\";\n  ScrollDirection[ScrollDirection[\"RIGHT\"] = 4] = \"RIGHT\";\n  return ScrollDirection;\n}(ScrollDirection || {});\nconst EMPTY_SCROLL_POSITION = {\n  top: 0,\n  left: 0\n};\nexport const EMPTY_DETAIL_PANELS = Object.freeze(new Map());\nconst createScrollCache = (isRtl, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer) => ({\n  direction: ScrollDirection.NONE,\n  buffer: bufferForDirection(isRtl, ScrollDirection.NONE, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer)\n});\nlet isJSDOM = false;\ntry {\n  if (typeof window !== 'undefined') {\n    isJSDOM = /jsdom/.test(window.navigator.userAgent);\n  }\n} catch (_) {\n  /* ignore */\n}\nexport const useGridVirtualScroller = () => {\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const enabledForRows = useGridSelector(apiRef, gridVirtualizationRowEnabledSelector) && !isJSDOM;\n  const enabledForColumns = useGridSelector(apiRef, gridVirtualizationColumnEnabledSelector) && !isJSDOM;\n  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);\n  const outerSize = dimensions.viewportOuterSize;\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const hasBottomPinnedRows = pinnedRows.bottom.length > 0;\n  const [panels, setPanels] = React.useState(EMPTY_DETAIL_PANELS);\n  const isRtl = useRtl();\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const gridRootRef = apiRef.current.rootElementRef;\n  const mainRef = apiRef.current.mainElementRef;\n  const scrollerRef = apiRef.current.virtualScrollerRef;\n  const scrollbarVerticalRef = React.useRef(null);\n  const scrollbarHorizontalRef = React.useRef(null);\n  const contentHeight = dimensions.contentSize.height;\n  const columnsTotalWidth = dimensions.columnsTotalWidth;\n  const hasColSpan = useGridSelector(apiRef, gridHasColSpanSelector);\n  useResizeObserver(mainRef, () => apiRef.current.resize());\n\n  /*\n   * Scroll context logic\n   * ====================\n   * We only render the cells contained in the `renderContext`. However, when the user starts scrolling the grid\n   * in a direction, we want to render as many cells as possible in that direction, as to avoid presenting white\n   * areas if the user scrolls too fast/far and the viewport ends up in a region we haven't rendered yet. To render\n   * more cells, we store some offsets to add to the viewport in `scrollCache.buffer`. Those offsets make the render\n   * context wider in the direction the user is going, but also makes the buffer around the viewport `0` for the\n   * dimension (horizontal or vertical) in which the user is not scrolling. So if the normal viewport is 8 columns\n   * wide, with a 1 column buffer (10 columns total), then we want it to be exactly 8 columns wide during vertical\n   * scroll.\n   * However, we don't want the rows in the old context to re-render from e.g. 10 columns to 8 columns, because that's\n   * work that's not necessary. Thus we store the context at the start of the scroll in `frozenContext`, and the rows\n   * that are part of this old context will keep their same render context as to avoid re-rendering.\n   */\n  const scrollPosition = React.useRef(EMPTY_SCROLL_POSITION);\n  const previousContextScrollPosition = React.useRef(EMPTY_SCROLL_POSITION);\n  const previousRowContext = React.useRef(EMPTY_RENDER_CONTEXT);\n  const renderContext = useGridSelector(apiRef, gridRenderContextSelector);\n  const scrollTimeout = useTimeout();\n  const frozenContext = React.useRef(undefined);\n  const scrollCache = useLazyRef(() => createScrollCache(isRtl, rootProps.rowBufferPx, rootProps.columnBufferPx, dimensions.rowHeight * 15, MINIMUM_COLUMN_WIDTH * 6)).current;\n  const focusedCell = {\n    rowIndex: React.useMemo(() => cellFocus ? currentPage.rows.findIndex(row => row.id === cellFocus.id) : -1, [cellFocus, currentPage.rows]),\n    columnIndex: React.useMemo(() => cellFocus ? visibleColumns.findIndex(column => column.field === cellFocus.field) : -1, [cellFocus, visibleColumns])\n  };\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    if (areRenderContextsEqual(nextRenderContext, apiRef.current.state.virtualization.renderContext)) {\n      return;\n    }\n    const didRowsIntervalChange = nextRenderContext.firstRowIndex !== previousRowContext.current.firstRowIndex || nextRenderContext.lastRowIndex !== previousRowContext.current.lastRowIndex;\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        virtualization: _extends({}, state.virtualization, {\n          renderContext: nextRenderContext\n        })\n      });\n    });\n\n    // The lazy-loading hook is listening to `renderedRowsIntervalChange`,\n    // but only does something if the dimensions are also available.\n    // So we wait until we have valid dimensions before publishing the first event.\n    if (dimensions.isReady && didRowsIntervalChange) {\n      previousRowContext.current = nextRenderContext;\n      apiRef.current.publishEvent('renderedRowsIntervalChange', nextRenderContext);\n    }\n    previousContextScrollPosition.current = scrollPosition.current;\n  }, [apiRef, dimensions.isReady]);\n  const triggerUpdateRenderContext = () => {\n    const newScroll = {\n      top: scrollerRef.current.scrollTop,\n      left: scrollerRef.current.scrollLeft\n    };\n    const dx = newScroll.left - scrollPosition.current.left;\n    const dy = newScroll.top - scrollPosition.current.top;\n    const isScrolling = dx !== 0 || dy !== 0;\n    scrollPosition.current = newScroll;\n    const direction = isScrolling ? directionForDelta(dx, dy) : ScrollDirection.NONE;\n\n    // Since previous render, we have scrolled...\n    const rowScroll = Math.abs(scrollPosition.current.top - previousContextScrollPosition.current.top);\n    const columnScroll = Math.abs(scrollPosition.current.left - previousContextScrollPosition.current.left);\n\n    // PERF: use the computed minimum column width instead of a static one\n    const didCrossThreshold = rowScroll >= dimensions.rowHeight || columnScroll >= MINIMUM_COLUMN_WIDTH;\n    const didChangeDirection = scrollCache.direction !== direction;\n    const shouldUpdate = didCrossThreshold || didChangeDirection;\n    if (!shouldUpdate) {\n      return renderContext;\n    }\n\n    // Render a new context\n\n    if (didChangeDirection) {\n      switch (direction) {\n        case ScrollDirection.NONE:\n        case ScrollDirection.LEFT:\n        case ScrollDirection.RIGHT:\n          frozenContext.current = undefined;\n          break;\n        default:\n          frozenContext.current = renderContext;\n          break;\n      }\n    }\n    scrollCache.direction = direction;\n    scrollCache.buffer = bufferForDirection(isRtl, direction, rootProps.rowBufferPx, rootProps.columnBufferPx, dimensions.rowHeight * 15, MINIMUM_COLUMN_WIDTH * 6);\n    const inputs = inputsSelector(apiRef, rootProps, enabledForRows, enabledForColumns);\n    const nextRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);\n\n    // Prevents batching render context changes\n    ReactDOM.flushSync(() => {\n      updateRenderContext(nextRenderContext);\n    });\n    scrollTimeout.start(1000, triggerUpdateRenderContext);\n    return nextRenderContext;\n  };\n  const forceUpdateRenderContext = () => {\n    const inputs = inputsSelector(apiRef, rootProps, enabledForRows, enabledForColumns);\n    const nextRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);\n    // Reset the frozen context when the render context changes, see the illustration in https://github.com/mui/mui-x/pull/12353\n    frozenContext.current = undefined;\n    updateRenderContext(nextRenderContext);\n  };\n  const handleScroll = useEventCallback(event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n\n    // On iOS and macOS, negative offsets are possible when swiping past the start\n    if (scrollTop < 0) {\n      return;\n    }\n    if (!isRtl) {\n      if (scrollLeft < 0) {\n        return;\n      }\n    }\n    if (isRtl) {\n      if (scrollLeft > 0) {\n        return;\n      }\n    }\n    const nextRenderContext = triggerUpdateRenderContext();\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: nextRenderContext\n    });\n  });\n  const handleWheel = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  });\n  const handleTouchMove = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  });\n  const getRows = function () {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!params.rows && !currentPage.range) {\n      return [];\n    }\n    const baseRenderContext = params.renderContext ?? renderContext;\n    const isLastSection = !hasBottomPinnedRows && params.position === undefined || hasBottomPinnedRows && params.position === 'bottom';\n    const isPinnedSection = params.position !== undefined;\n    let rowIndexOffset;\n    // FIXME: Why is the switch check exhaustiveness not validated with typescript-eslint?\n    // eslint-disable-next-line default-case\n    switch (params.position) {\n      case 'top':\n        rowIndexOffset = 0;\n        break;\n      case 'bottom':\n        rowIndexOffset = pinnedRows.top.length + currentPage.rows.length;\n        break;\n      case undefined:\n        rowIndexOffset = pinnedRows.top.length;\n        break;\n    }\n    const rowModels = params.rows ?? currentPage.rows;\n    const firstRowToRender = baseRenderContext.firstRowIndex;\n    const lastRowToRender = Math.min(baseRenderContext.lastRowIndex, rowModels.length);\n    const rowIndexes = params.rows ? range(0, params.rows.length) : range(firstRowToRender, lastRowToRender);\n    let virtualRowIndex = -1;\n    if (!isPinnedSection && focusedCell.rowIndex !== -1) {\n      if (focusedCell.rowIndex < firstRowToRender) {\n        virtualRowIndex = focusedCell.rowIndex;\n        rowIndexes.unshift(virtualRowIndex);\n      }\n      if (focusedCell.rowIndex >= lastRowToRender) {\n        virtualRowIndex = focusedCell.rowIndex;\n        rowIndexes.push(virtualRowIndex);\n      }\n    }\n    const rows = [];\n    const rowProps = rootProps.slotProps?.row;\n    const columnPositions = gridColumnPositionsSelector(apiRef);\n    rowIndexes.forEach(rowIndexInPage => {\n      const {\n        id,\n        model\n      } = rowModels[rowIndexInPage];\n      const rowIndex = (currentPage?.range?.firstRowIndex || 0) + rowIndexOffset + rowIndexInPage;\n\n      // NOTE: This is an expensive feature, the colSpan code could be optimized.\n      if (hasColSpan) {\n        const minFirstColumn = pinnedColumns.left.length;\n        const maxLastColumn = visibleColumns.length - pinnedColumns.right.length;\n        apiRef.current.calculateColSpan({\n          rowId: id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n        if (pinnedColumns.left.length > 0) {\n          apiRef.current.calculateColSpan({\n            rowId: id,\n            minFirstColumn: 0,\n            maxLastColumn: pinnedColumns.left.length,\n            columns: visibleColumns\n          });\n        }\n        if (pinnedColumns.right.length > 0) {\n          apiRef.current.calculateColSpan({\n            rowId: id,\n            minFirstColumn: visibleColumns.length - pinnedColumns.right.length,\n            maxLastColumn: visibleColumns.length,\n            columns: visibleColumns\n          });\n        }\n      }\n      const hasFocus = cellFocus?.id === id;\n      const baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n      let isFirstVisible = false;\n      if (params.position === undefined) {\n        isFirstVisible = rowIndexInPage === 0;\n      }\n      let isLastVisible = false;\n      const isLastVisibleInSection = rowIndexInPage === rowModels.length - 1;\n      if (isLastSection) {\n        if (!isPinnedSection) {\n          const lastIndex = currentPage.rows.length - 1;\n          const isLastVisibleRowIndex = rowIndexInPage === lastIndex;\n          if (isLastVisibleRowIndex) {\n            isLastVisible = true;\n          }\n        } else {\n          isLastVisible = isLastVisibleInSection;\n        }\n      }\n      const isVirtualRow = rowIndexInPage === virtualRowIndex;\n      const isNotVisible = isVirtualRow;\n      let tabbableCell = null;\n      if (cellTabIndex !== null && cellTabIndex.id === id) {\n        const cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);\n        tabbableCell = cellParams.cellMode === 'view' ? cellTabIndex.field : null;\n      }\n      let currentRenderContext = baseRenderContext;\n      if (!isPinnedSection && frozenContext.current && rowIndexInPage >= frozenContext.current.firstRowIndex && rowIndexInPage < frozenContext.current.lastRowIndex) {\n        currentRenderContext = frozenContext.current;\n      }\n      const offsetLeft = computeOffsetLeft(columnPositions, currentRenderContext, pinnedColumns.left.length);\n      const showBottomBorder = isLastVisibleInSection && params.position === 'top';\n      rows.push(/*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n        row: model,\n        rowId: id,\n        index: rowIndex,\n        selected: isSelected,\n        offsetTop: params.rows ? undefined : rowsMeta.positions[rowIndexInPage],\n        offsetLeft: offsetLeft,\n        dimensions: dimensions,\n        rowHeight: baseRowHeight,\n        tabbableCell: tabbableCell,\n        pinnedColumns: pinnedColumns,\n        visibleColumns: visibleColumns,\n        renderContext: currentRenderContext,\n        focusedColumnIndex: hasFocus ? focusedCell.columnIndex : undefined,\n        isFirstVisible: isFirstVisible,\n        isLastVisible: isLastVisible,\n        isNotVisible: isNotVisible,\n        showBottomBorder: showBottomBorder\n      }, rowProps), id));\n      if (isNotVisible) {\n        return;\n      }\n      const panel = panels.get(id);\n      if (panel) {\n        rows.push(panel);\n      }\n      if (params.position === undefined && isLastVisibleInSection) {\n        rows.push(apiRef.current.getInfiniteLoadingTriggerElement?.({\n          lastRowId: id\n        }));\n      }\n    });\n    return rows;\n  };\n  const needsHorizontalScrollbar = outerSize.width && columnsTotalWidth >= outerSize.width;\n  const scrollerStyle = React.useMemo(() => ({\n    overflowX: !needsHorizontalScrollbar ? 'hidden' : undefined,\n    overflowY: rootProps.autoHeight ? 'hidden' : undefined\n  }), [needsHorizontalScrollbar, rootProps.autoHeight]);\n  const contentSize = React.useMemo(() => {\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height: contentHeight\n    };\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = getMinimalContentHeight(apiRef); // Give room to show the overlay when there no rows.\n    }\n    return size;\n  }, [apiRef, columnsTotalWidth, contentHeight, needsHorizontalScrollbar, rootProps.autoHeight, currentPage.rows.length]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n  useEnhancedEffect(() => {\n    // FIXME: Is this really necessary?\n    apiRef.current.resize();\n  }, [apiRef, rowsMeta.currentPageTotalHeight]);\n  useEnhancedEffect(() => {\n    // TODO a scroll reset should not be necessary\n    if (enabledForColumns) {\n      scrollerRef.current.scrollLeft = 0;\n    }\n    if (enabledForRows) {\n      scrollerRef.current.scrollTop = 0;\n    }\n  }, [enabledForColumns, enabledForRows, gridRootRef, scrollerRef]);\n  useRunOnce(outerSize.width !== 0, () => {\n    const inputs = inputsSelector(apiRef, rootProps, enabledForRows, enabledForColumns);\n    const initialRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);\n    updateRenderContext(initialRenderContext);\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollPosition.current.top,\n      left: scrollPosition.current.left,\n      renderContext: initialRenderContext\n    });\n  });\n  apiRef.current.register('private', {\n    updateRenderContext: forceUpdateRenderContext\n  });\n  useGridApiEventHandler(apiRef, 'columnsChange', forceUpdateRenderContext);\n  useGridApiEventHandler(apiRef, 'filteredRowsSet', forceUpdateRenderContext);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', forceUpdateRenderContext);\n  return {\n    renderContext,\n    setPanels,\n    getRows,\n    getContainerProps: () => ({\n      ref: mainRef\n    }),\n    getScrollerProps: () => ({\n      ref: scrollerRef,\n      onScroll: handleScroll,\n      onWheel: handleWheel,\n      onTouchMove: handleTouchMove,\n      style: scrollerStyle,\n      role: 'presentation',\n      // `tabIndex` shouldn't be used along role=presentation, but it fixes a Firefox bug\n      // https://github.com/mui/mui-x/pull/13891#discussion_r1683416024\n      tabIndex: platform.isFirefox ? -1 : undefined\n    }),\n    getContentProps: () => ({\n      style: contentSize,\n      role: 'presentation'\n    }),\n    getRenderZoneProps: () => ({\n      role: 'rowgroup'\n    }),\n    getScrollbarVerticalProps: () => ({\n      ref: scrollbarVerticalRef,\n      role: 'presentation'\n    }),\n    getScrollbarHorizontalProps: () => ({\n      ref: scrollbarHorizontalRef,\n      role: 'presentation'\n    })\n  };\n};\nfunction inputsSelector(apiRef, rootProps, enabledForRows, enabledForColumns) {\n  const dimensions = gridDimensionsSelector(apiRef.current.state);\n  const currentPage = getVisibleRows(apiRef, rootProps);\n  const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n  const hiddenCellsOriginMap = gridRowSpanningHiddenCellsOriginMapSelector(apiRef);\n  const lastRowId = apiRef.current.state.rows.dataRowIds.at(-1);\n  const lastColumn = visibleColumns.at(-1);\n  return {\n    enabledForRows,\n    enabledForColumns,\n    apiRef,\n    autoHeight: rootProps.autoHeight,\n    rowBufferPx: rootProps.rowBufferPx,\n    columnBufferPx: rootProps.columnBufferPx,\n    leftPinnedWidth: dimensions.leftPinnedWidth,\n    columnsTotalWidth: dimensions.columnsTotalWidth,\n    viewportInnerWidth: dimensions.viewportInnerSize.width,\n    viewportInnerHeight: dimensions.viewportInnerSize.height,\n    lastRowHeight: lastRowId !== undefined ? apiRef.current.unstable_getRowHeight(lastRowId) : 0,\n    lastColumnWidth: lastColumn?.computedWidth ?? 0,\n    rowsMeta: gridRowsMetaSelector(apiRef.current.state),\n    columnPositions: gridColumnPositionsSelector(apiRef),\n    rows: currentPage.rows,\n    range: currentPage.range,\n    pinnedColumns: gridVisiblePinnedColumnDefinitionsSelector(apiRef),\n    visibleColumns,\n    hiddenCellsOriginMap\n  };\n}\nfunction computeRenderContext(inputs, scrollPosition, scrollCache) {\n  const renderContext = {\n    firstRowIndex: 0,\n    lastRowIndex: inputs.rows.length,\n    firstColumnIndex: 0,\n    lastColumnIndex: inputs.visibleColumns.length\n  };\n  const {\n    top,\n    left\n  } = scrollPosition;\n  const realLeft = Math.abs(left) + inputs.leftPinnedWidth;\n  if (inputs.enabledForRows) {\n    // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n    let firstRowIndex = Math.min(getNearestIndexToRender(inputs, top, {\n      atStart: true,\n      lastPosition: inputs.rowsMeta.positions[inputs.rowsMeta.positions.length - 1] + inputs.lastRowHeight\n    }), inputs.rowsMeta.positions.length - 1);\n\n    // If any of the cells in the `firstRowIndex` is hidden due to an extended row span,\n    // Make sure the row from where the rowSpan is originated is visible.\n    const rowSpanHiddenCellOrigin = inputs.hiddenCellsOriginMap[firstRowIndex];\n    if (rowSpanHiddenCellOrigin) {\n      const minSpannedRowIndex = Math.min(...Object.values(rowSpanHiddenCellOrigin));\n      firstRowIndex = Math.min(firstRowIndex, minSpannedRowIndex);\n    }\n    const lastRowIndex = inputs.autoHeight ? firstRowIndex + inputs.rows.length : getNearestIndexToRender(inputs, top + inputs.viewportInnerHeight);\n    renderContext.firstRowIndex = firstRowIndex;\n    renderContext.lastRowIndex = lastRowIndex;\n  }\n  if (inputs.enabledForColumns) {\n    let firstColumnIndex = 0;\n    let lastColumnIndex = inputs.columnPositions.length;\n    let hasRowWithAutoHeight = false;\n    const [firstRowToRender, lastRowToRender] = getIndexesToRender({\n      firstIndex: renderContext.firstRowIndex,\n      lastIndex: renderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: inputs.rows.length,\n      bufferBefore: scrollCache.buffer.rowBefore,\n      bufferAfter: scrollCache.buffer.rowAfter,\n      positions: inputs.rowsMeta.positions,\n      lastSize: inputs.lastRowHeight\n    });\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = inputs.rows[i];\n      hasRowWithAutoHeight = inputs.apiRef.current.rowHasAutoHeight(row.id);\n    }\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(realLeft, inputs.columnPositions, {\n        atStart: true,\n        lastPosition: inputs.columnsTotalWidth\n      });\n      lastColumnIndex = binarySearch(realLeft + inputs.viewportInnerWidth, inputs.columnPositions);\n    }\n    renderContext.firstColumnIndex = firstColumnIndex;\n    renderContext.lastColumnIndex = lastColumnIndex;\n  }\n  const actualRenderContext = deriveRenderContext(inputs, renderContext, scrollCache);\n  return actualRenderContext;\n}\nfunction getNearestIndexToRender(inputs, offset, options) {\n  const lastMeasuredIndexRelativeToAllRows = inputs.apiRef.current.getLastMeasuredRowIndex();\n  let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n  if (inputs.range?.lastRowIndex && !allRowsMeasured) {\n    // Check if all rows in this page are already measured\n    allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= inputs.range.lastRowIndex;\n  }\n  const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (inputs.range?.firstRowIndex || 0), 0, inputs.rowsMeta.positions.length);\n  if (allRowsMeasured || inputs.rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n    // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n    // were measured, then use a binary search because it's faster.\n    return binarySearch(offset, inputs.rowsMeta.positions, options);\n  }\n\n  // Otherwise, use an exponential search.\n  // If rows have \"auto\" as height, their positions will be based on estimated heights.\n  // In this case, we can skip several steps until we find a position higher than the offset.\n  // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n  return exponentialSearch(offset, inputs.rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage, options);\n}\n\n/**\n * Accepts as input a raw render context (the area visible in the viewport) and adds\n * computes the actual render context based on pinned elements, buffer dimensions and\n * spanning.\n */\nfunction deriveRenderContext(inputs, nextRenderContext, scrollCache) {\n  const [firstRowToRender, lastRowToRender] = getIndexesToRender({\n    firstIndex: nextRenderContext.firstRowIndex,\n    lastIndex: nextRenderContext.lastRowIndex,\n    minFirstIndex: 0,\n    maxLastIndex: inputs.rows.length,\n    bufferBefore: scrollCache.buffer.rowBefore,\n    bufferAfter: scrollCache.buffer.rowAfter,\n    positions: inputs.rowsMeta.positions,\n    lastSize: inputs.lastRowHeight\n  });\n  const [initialFirstColumnToRender, lastColumnToRender] = getIndexesToRender({\n    firstIndex: nextRenderContext.firstColumnIndex,\n    lastIndex: nextRenderContext.lastColumnIndex,\n    minFirstIndex: inputs.pinnedColumns.left.length,\n    maxLastIndex: inputs.visibleColumns.length - inputs.pinnedColumns.right.length,\n    bufferBefore: scrollCache.buffer.columnBefore,\n    bufferAfter: scrollCache.buffer.columnAfter,\n    positions: inputs.columnPositions,\n    lastSize: inputs.lastColumnWidth\n  });\n  const firstColumnToRender = getFirstNonSpannedColumnToRender({\n    firstColumnToRender: initialFirstColumnToRender,\n    apiRef: inputs.apiRef,\n    firstRowToRender,\n    lastRowToRender,\n    visibleRows: inputs.rows\n  });\n  return {\n    firstRowIndex: firstRowToRender,\n    lastRowIndex: lastRowToRender,\n    firstColumnIndex: firstColumnToRender,\n    lastColumnIndex: lastColumnToRender\n  };\n}\n/**\n * Use binary search to avoid looping through all possible positions.\n * The `options.atStart` provides the possibility to match for the first element that\n * intersects the screen, even if said element's start position is before `offset`. In\n * other words, we search for `offset + width`.\n */\nfunction binarySearch(offset, positions) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  let sliceStart = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  let sliceEnd = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : positions.length;\n  if (positions.length <= 0) {\n    return -1;\n  }\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const position = positions[pivot];\n  let isBefore;\n  if (options?.atStart) {\n    const width = (pivot === positions.length - 1 ? options.lastPosition : positions[pivot + 1]) - position;\n    isBefore = offset - width < position;\n  } else {\n    isBefore = offset <= position;\n  }\n  return isBefore ? binarySearch(offset, positions, options, sliceStart, pivot) : binarySearch(offset, positions, options, pivot + 1, sliceEnd);\n}\nfunction exponentialSearch(offset, positions, index) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n  let interval = 1;\n  while (index < positions.length && Math.abs(positions[index]) < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return binarySearch(offset, positions, options, Math.floor(index / 2), Math.min(index, positions.length));\n}\nfunction getIndexesToRender(_ref) {\n  let {\n    firstIndex,\n    lastIndex,\n    bufferBefore,\n    bufferAfter,\n    minFirstIndex,\n    maxLastIndex,\n    positions,\n    lastSize\n  } = _ref;\n  const firstPosition = positions[firstIndex] - bufferBefore;\n  const lastPosition = positions[lastIndex] + bufferAfter;\n  const firstIndexPadded = binarySearch(firstPosition, positions, {\n    atStart: true,\n    lastPosition: positions[positions.length - 1] + lastSize\n  });\n  const lastIndexPadded = binarySearch(lastPosition, positions);\n  return [clamp(firstIndexPadded, minFirstIndex, maxLastIndex), clamp(lastIndexPadded, minFirstIndex, maxLastIndex)];\n}\nexport function areRenderContextsEqual(context1, context2) {\n  if (context1 === context2) {\n    return true;\n  }\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n}\nexport function computeOffsetLeft(columnPositions, renderContext, pinnedLeftLength) {\n  const left = (columnPositions[renderContext.firstColumnIndex] ?? 0) - (columnPositions[pinnedLeftLength] ?? 0);\n  return Math.abs(left);\n}\nfunction directionForDelta(dx, dy) {\n  if (dx === 0 && dy === 0) {\n    return ScrollDirection.NONE;\n  }\n  /* eslint-disable */\n  if (Math.abs(dy) >= Math.abs(dx)) {\n    if (dy > 0) {\n      return ScrollDirection.DOWN;\n    } else {\n      return ScrollDirection.UP;\n    }\n  } else {\n    if (dx > 0) {\n      return ScrollDirection.RIGHT;\n    } else {\n      return ScrollDirection.LEFT;\n    }\n  }\n  /* eslint-enable */\n}\nfunction bufferForDirection(isRtl, direction, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer) {\n  if (isRtl) {\n    switch (direction) {\n      case ScrollDirection.LEFT:\n        direction = ScrollDirection.RIGHT;\n        break;\n      case ScrollDirection.RIGHT:\n        direction = ScrollDirection.LEFT;\n        break;\n      default:\n    }\n  }\n  switch (direction) {\n    case ScrollDirection.NONE:\n      return {\n        rowAfter: rowBufferPx,\n        rowBefore: rowBufferPx,\n        columnAfter: columnBufferPx,\n        columnBefore: columnBufferPx\n      };\n    case ScrollDirection.LEFT:\n      return {\n        rowAfter: 0,\n        rowBefore: 0,\n        columnAfter: 0,\n        columnBefore: horizontalBuffer\n      };\n    case ScrollDirection.RIGHT:\n      return {\n        rowAfter: 0,\n        rowBefore: 0,\n        columnAfter: horizontalBuffer,\n        columnBefore: 0\n      };\n    case ScrollDirection.UP:\n      return {\n        rowAfter: 0,\n        rowBefore: verticalBuffer,\n        columnAfter: 0,\n        columnBefore: 0\n      };\n    case ScrollDirection.DOWN:\n      return {\n        rowAfter: verticalBuffer,\n        rowBefore: 0,\n        columnAfter: 0,\n        columnBefore: 0\n      };\n    default:\n      // eslint unable to figure out enum exhaustiveness\n      throw new Error('unreachable');\n  }\n}","map":{"version":3,"names":["_extends","React","ReactDOM","unstable_useEnhancedEffect","useEnhancedEffect","unstable_useEventCallback","useEventCallback","useLazyRef","useTimeout","useResizeObserver","useRtl","useGridPrivateApiContext","useGridRootProps","useGridSelector","useRunOnce","gridVisibleColumnDefinitionsSelector","gridVisiblePinnedColumnDefinitionsSelector","gridColumnPositionsSelector","gridHasColSpanSelector","gridDimensionsSelector","gridPinnedRowsSelector","gridFocusCellSelector","gridTabIndexCellSelector","useGridVisibleRows","getVisibleRows","useGridApiEventHandler","platform","clamp","range","selectedIdsLookupSelector","gridRowsMetaSelector","getFirstNonSpannedColumnToRender","getMinimalContentHeight","gridRenderContextSelector","gridVirtualizationRowEnabledSelector","gridVirtualizationColumnEnabledSelector","EMPTY_RENDER_CONTEXT","gridRowSpanningHiddenCellsOriginMapSelector","jsx","_jsx","MINIMUM_COLUMN_WIDTH","ScrollDirection","EMPTY_SCROLL_POSITION","top","left","EMPTY_DETAIL_PANELS","Object","freeze","Map","createScrollCache","isRtl","rowBufferPx","columnBufferPx","verticalBuffer","horizontalBuffer","direction","NONE","buffer","bufferForDirection","isJSDOM","window","test","navigator","userAgent","_","useGridVirtualScroller","apiRef","rootProps","visibleColumns","enabledForRows","enabledForColumns","dimensions","outerSize","viewportOuterSize","pinnedRows","pinnedColumns","hasBottomPinnedRows","bottom","length","panels","setPanels","useState","cellFocus","cellTabIndex","rowsMeta","selectedRowsLookup","currentPage","gridRootRef","current","rootElementRef","mainRef","mainElementRef","scrollerRef","virtualScrollerRef","scrollbarVerticalRef","useRef","scrollbarHorizontalRef","contentHeight","contentSize","height","columnsTotalWidth","hasColSpan","resize","scrollPosition","previousContextScrollPosition","previousRowContext","renderContext","scrollTimeout","frozenContext","undefined","scrollCache","rowHeight","focusedCell","rowIndex","useMemo","rows","findIndex","row","id","columnIndex","column","field","updateRenderContext","useCallback","nextRenderContext","areRenderContextsEqual","state","virtualization","didRowsIntervalChange","firstRowIndex","lastRowIndex","setState","isReady","publishEvent","triggerUpdateRenderContext","newScroll","scrollTop","scrollLeft","dx","dy","isScrolling","directionForDelta","rowScroll","Math","abs","columnScroll","didCrossThreshold","didChangeDirection","shouldUpdate","LEFT","RIGHT","inputs","inputsSelector","computeRenderContext","flushSync","start","forceUpdateRenderContext","handleScroll","event","currentTarget","handleWheel","handleTouchMove","getRows","params","arguments","baseRenderContext","isLastSection","position","isPinnedSection","rowIndexOffset","rowModels","firstRowToRender","lastRowToRender","min","rowIndexes","virtualRowIndex","unshift","push","rowProps","slotProps","columnPositions","forEach","rowIndexInPage","model","minFirstColumn","maxLastColumn","right","calculateColSpan","rowId","columns","hasFocus","baseRowHeight","rowHasAutoHeight","unstable_getRowHeight","isSelected","isRowSelectable","isFirstVisible","isLastVisible","isLastVisibleInSection","lastIndex","isLastVisibleRowIndex","isVirtualRow","isNotVisible","tabbableCell","cellParams","getCellParams","cellMode","currentRenderContext","offsetLeft","computeOffsetLeft","showBottomBorder","slots","index","selected","offsetTop","positions","focusedColumnIndex","panel","get","getInfiniteLoadingTriggerElement","lastRowId","needsHorizontalScrollbar","width","scrollerStyle","overflowX","overflowY","autoHeight","size","useEffect","currentPageTotalHeight","initialRenderContext","register","getContainerProps","ref","getScrollerProps","onScroll","onWheel","onTouchMove","style","role","tabIndex","isFirefox","getContentProps","getRenderZoneProps","getScrollbarVerticalProps","getScrollbarHorizontalProps","hiddenCellsOriginMap","dataRowIds","at","lastColumn","leftPinnedWidth","viewportInnerWidth","viewportInnerSize","viewportInnerHeight","lastRowHeight","lastColumnWidth","computedWidth","firstColumnIndex","lastColumnIndex","realLeft","getNearestIndexToRender","atStart","lastPosition","rowSpanHiddenCellOrigin","minSpannedRowIndex","values","hasRowWithAutoHeight","getIndexesToRender","firstIndex","minFirstIndex","maxLastIndex","bufferBefore","rowBefore","bufferAfter","rowAfter","lastSize","i","binarySearch","actualRenderContext","deriveRenderContext","offset","options","lastMeasuredIndexRelativeToAllRows","getLastMeasuredRowIndex","allRowsMeasured","Infinity","lastMeasuredIndexRelativeToCurrentPage","exponentialSearch","initialFirstColumnToRender","lastColumnToRender","columnBefore","columnAfter","firstColumnToRender","visibleRows","sliceStart","sliceEnd","pivot","floor","isBefore","interval","_ref","firstPosition","firstIndexPadded","lastIndexPadded","context1","context2","pinnedLeftLength","DOWN","UP","Error"],"sources":["/home/user/projects/reactproj/reactmodule/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport useTimeout from '@mui/utils/useTimeout';\nimport { useResizeObserver } from '@mui/x-internals/useResizeObserver';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { useGridPrivateApiContext } from \"../../utils/useGridPrivateApiContext.js\";\nimport { useGridRootProps } from \"../../utils/useGridRootProps.js\";\nimport { useGridSelector } from \"../../utils/useGridSelector.js\";\nimport { useRunOnce } from \"../../utils/useRunOnce.js\";\nimport { gridVisibleColumnDefinitionsSelector, gridVisiblePinnedColumnDefinitionsSelector, gridColumnPositionsSelector, gridHasColSpanSelector } from \"../columns/gridColumnsSelector.js\";\nimport { gridDimensionsSelector } from \"../dimensions/gridDimensionsSelectors.js\";\nimport { gridPinnedRowsSelector } from \"../rows/gridRowsSelector.js\";\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from \"../focus/gridFocusStateSelector.js\";\nimport { useGridVisibleRows, getVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { useGridApiEventHandler } from \"../../utils/index.js\";\nimport * as platform from \"../../../utils/platform.js\";\nimport { clamp, range } from \"../../../utils/utils.js\";\nimport { selectedIdsLookupSelector } from \"../rowSelection/gridRowSelectionSelector.js\";\nimport { gridRowsMetaSelector } from \"../rows/gridRowsMetaSelector.js\";\nimport { getFirstNonSpannedColumnToRender } from \"../columns/gridColumnsUtils.js\";\nimport { getMinimalContentHeight } from \"../rows/gridRowsUtils.js\";\nimport { gridRenderContextSelector, gridVirtualizationRowEnabledSelector, gridVirtualizationColumnEnabledSelector } from \"./gridVirtualizationSelectors.js\";\nimport { EMPTY_RENDER_CONTEXT } from \"./useGridVirtualization.js\";\nimport { gridRowSpanningHiddenCellsOriginMapSelector } from \"../rows/gridRowSpanningSelectors.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst MINIMUM_COLUMN_WIDTH = 50;\nvar ScrollDirection = /*#__PURE__*/function (ScrollDirection) {\n  ScrollDirection[ScrollDirection[\"NONE\"] = 0] = \"NONE\";\n  ScrollDirection[ScrollDirection[\"UP\"] = 1] = \"UP\";\n  ScrollDirection[ScrollDirection[\"DOWN\"] = 2] = \"DOWN\";\n  ScrollDirection[ScrollDirection[\"LEFT\"] = 3] = \"LEFT\";\n  ScrollDirection[ScrollDirection[\"RIGHT\"] = 4] = \"RIGHT\";\n  return ScrollDirection;\n}(ScrollDirection || {});\nconst EMPTY_SCROLL_POSITION = {\n  top: 0,\n  left: 0\n};\nexport const EMPTY_DETAIL_PANELS = Object.freeze(new Map());\nconst createScrollCache = (isRtl, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer) => ({\n  direction: ScrollDirection.NONE,\n  buffer: bufferForDirection(isRtl, ScrollDirection.NONE, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer)\n});\nlet isJSDOM = false;\ntry {\n  if (typeof window !== 'undefined') {\n    isJSDOM = /jsdom/.test(window.navigator.userAgent);\n  }\n} catch (_) {\n  /* ignore */\n}\nexport const useGridVirtualScroller = () => {\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const enabledForRows = useGridSelector(apiRef, gridVirtualizationRowEnabledSelector) && !isJSDOM;\n  const enabledForColumns = useGridSelector(apiRef, gridVirtualizationColumnEnabledSelector) && !isJSDOM;\n  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);\n  const outerSize = dimensions.viewportOuterSize;\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const hasBottomPinnedRows = pinnedRows.bottom.length > 0;\n  const [panels, setPanels] = React.useState(EMPTY_DETAIL_PANELS);\n  const isRtl = useRtl();\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const gridRootRef = apiRef.current.rootElementRef;\n  const mainRef = apiRef.current.mainElementRef;\n  const scrollerRef = apiRef.current.virtualScrollerRef;\n  const scrollbarVerticalRef = React.useRef(null);\n  const scrollbarHorizontalRef = React.useRef(null);\n  const contentHeight = dimensions.contentSize.height;\n  const columnsTotalWidth = dimensions.columnsTotalWidth;\n  const hasColSpan = useGridSelector(apiRef, gridHasColSpanSelector);\n  useResizeObserver(mainRef, () => apiRef.current.resize());\n\n  /*\n   * Scroll context logic\n   * ====================\n   * We only render the cells contained in the `renderContext`. However, when the user starts scrolling the grid\n   * in a direction, we want to render as many cells as possible in that direction, as to avoid presenting white\n   * areas if the user scrolls too fast/far and the viewport ends up in a region we haven't rendered yet. To render\n   * more cells, we store some offsets to add to the viewport in `scrollCache.buffer`. Those offsets make the render\n   * context wider in the direction the user is going, but also makes the buffer around the viewport `0` for the\n   * dimension (horizontal or vertical) in which the user is not scrolling. So if the normal viewport is 8 columns\n   * wide, with a 1 column buffer (10 columns total), then we want it to be exactly 8 columns wide during vertical\n   * scroll.\n   * However, we don't want the rows in the old context to re-render from e.g. 10 columns to 8 columns, because that's\n   * work that's not necessary. Thus we store the context at the start of the scroll in `frozenContext`, and the rows\n   * that are part of this old context will keep their same render context as to avoid re-rendering.\n   */\n  const scrollPosition = React.useRef(EMPTY_SCROLL_POSITION);\n  const previousContextScrollPosition = React.useRef(EMPTY_SCROLL_POSITION);\n  const previousRowContext = React.useRef(EMPTY_RENDER_CONTEXT);\n  const renderContext = useGridSelector(apiRef, gridRenderContextSelector);\n  const scrollTimeout = useTimeout();\n  const frozenContext = React.useRef(undefined);\n  const scrollCache = useLazyRef(() => createScrollCache(isRtl, rootProps.rowBufferPx, rootProps.columnBufferPx, dimensions.rowHeight * 15, MINIMUM_COLUMN_WIDTH * 6)).current;\n  const focusedCell = {\n    rowIndex: React.useMemo(() => cellFocus ? currentPage.rows.findIndex(row => row.id === cellFocus.id) : -1, [cellFocus, currentPage.rows]),\n    columnIndex: React.useMemo(() => cellFocus ? visibleColumns.findIndex(column => column.field === cellFocus.field) : -1, [cellFocus, visibleColumns])\n  };\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    if (areRenderContextsEqual(nextRenderContext, apiRef.current.state.virtualization.renderContext)) {\n      return;\n    }\n    const didRowsIntervalChange = nextRenderContext.firstRowIndex !== previousRowContext.current.firstRowIndex || nextRenderContext.lastRowIndex !== previousRowContext.current.lastRowIndex;\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        virtualization: _extends({}, state.virtualization, {\n          renderContext: nextRenderContext\n        })\n      });\n    });\n\n    // The lazy-loading hook is listening to `renderedRowsIntervalChange`,\n    // but only does something if the dimensions are also available.\n    // So we wait until we have valid dimensions before publishing the first event.\n    if (dimensions.isReady && didRowsIntervalChange) {\n      previousRowContext.current = nextRenderContext;\n      apiRef.current.publishEvent('renderedRowsIntervalChange', nextRenderContext);\n    }\n    previousContextScrollPosition.current = scrollPosition.current;\n  }, [apiRef, dimensions.isReady]);\n  const triggerUpdateRenderContext = () => {\n    const newScroll = {\n      top: scrollerRef.current.scrollTop,\n      left: scrollerRef.current.scrollLeft\n    };\n    const dx = newScroll.left - scrollPosition.current.left;\n    const dy = newScroll.top - scrollPosition.current.top;\n    const isScrolling = dx !== 0 || dy !== 0;\n    scrollPosition.current = newScroll;\n    const direction = isScrolling ? directionForDelta(dx, dy) : ScrollDirection.NONE;\n\n    // Since previous render, we have scrolled...\n    const rowScroll = Math.abs(scrollPosition.current.top - previousContextScrollPosition.current.top);\n    const columnScroll = Math.abs(scrollPosition.current.left - previousContextScrollPosition.current.left);\n\n    // PERF: use the computed minimum column width instead of a static one\n    const didCrossThreshold = rowScroll >= dimensions.rowHeight || columnScroll >= MINIMUM_COLUMN_WIDTH;\n    const didChangeDirection = scrollCache.direction !== direction;\n    const shouldUpdate = didCrossThreshold || didChangeDirection;\n    if (!shouldUpdate) {\n      return renderContext;\n    }\n\n    // Render a new context\n\n    if (didChangeDirection) {\n      switch (direction) {\n        case ScrollDirection.NONE:\n        case ScrollDirection.LEFT:\n        case ScrollDirection.RIGHT:\n          frozenContext.current = undefined;\n          break;\n        default:\n          frozenContext.current = renderContext;\n          break;\n      }\n    }\n    scrollCache.direction = direction;\n    scrollCache.buffer = bufferForDirection(isRtl, direction, rootProps.rowBufferPx, rootProps.columnBufferPx, dimensions.rowHeight * 15, MINIMUM_COLUMN_WIDTH * 6);\n    const inputs = inputsSelector(apiRef, rootProps, enabledForRows, enabledForColumns);\n    const nextRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);\n\n    // Prevents batching render context changes\n    ReactDOM.flushSync(() => {\n      updateRenderContext(nextRenderContext);\n    });\n    scrollTimeout.start(1000, triggerUpdateRenderContext);\n    return nextRenderContext;\n  };\n  const forceUpdateRenderContext = () => {\n    const inputs = inputsSelector(apiRef, rootProps, enabledForRows, enabledForColumns);\n    const nextRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);\n    // Reset the frozen context when the render context changes, see the illustration in https://github.com/mui/mui-x/pull/12353\n    frozenContext.current = undefined;\n    updateRenderContext(nextRenderContext);\n  };\n  const handleScroll = useEventCallback(event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n\n    // On iOS and macOS, negative offsets are possible when swiping past the start\n    if (scrollTop < 0) {\n      return;\n    }\n    if (!isRtl) {\n      if (scrollLeft < 0) {\n        return;\n      }\n    }\n    if (isRtl) {\n      if (scrollLeft > 0) {\n        return;\n      }\n    }\n    const nextRenderContext = triggerUpdateRenderContext();\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: nextRenderContext\n    });\n  });\n  const handleWheel = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  });\n  const handleTouchMove = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  });\n  const getRows = (params = {}) => {\n    if (!params.rows && !currentPage.range) {\n      return [];\n    }\n    const baseRenderContext = params.renderContext ?? renderContext;\n    const isLastSection = !hasBottomPinnedRows && params.position === undefined || hasBottomPinnedRows && params.position === 'bottom';\n    const isPinnedSection = params.position !== undefined;\n    let rowIndexOffset;\n    // FIXME: Why is the switch check exhaustiveness not validated with typescript-eslint?\n    // eslint-disable-next-line default-case\n    switch (params.position) {\n      case 'top':\n        rowIndexOffset = 0;\n        break;\n      case 'bottom':\n        rowIndexOffset = pinnedRows.top.length + currentPage.rows.length;\n        break;\n      case undefined:\n        rowIndexOffset = pinnedRows.top.length;\n        break;\n    }\n    const rowModels = params.rows ?? currentPage.rows;\n    const firstRowToRender = baseRenderContext.firstRowIndex;\n    const lastRowToRender = Math.min(baseRenderContext.lastRowIndex, rowModels.length);\n    const rowIndexes = params.rows ? range(0, params.rows.length) : range(firstRowToRender, lastRowToRender);\n    let virtualRowIndex = -1;\n    if (!isPinnedSection && focusedCell.rowIndex !== -1) {\n      if (focusedCell.rowIndex < firstRowToRender) {\n        virtualRowIndex = focusedCell.rowIndex;\n        rowIndexes.unshift(virtualRowIndex);\n      }\n      if (focusedCell.rowIndex >= lastRowToRender) {\n        virtualRowIndex = focusedCell.rowIndex;\n        rowIndexes.push(virtualRowIndex);\n      }\n    }\n    const rows = [];\n    const rowProps = rootProps.slotProps?.row;\n    const columnPositions = gridColumnPositionsSelector(apiRef);\n    rowIndexes.forEach(rowIndexInPage => {\n      const {\n        id,\n        model\n      } = rowModels[rowIndexInPage];\n      const rowIndex = (currentPage?.range?.firstRowIndex || 0) + rowIndexOffset + rowIndexInPage;\n\n      // NOTE: This is an expensive feature, the colSpan code could be optimized.\n      if (hasColSpan) {\n        const minFirstColumn = pinnedColumns.left.length;\n        const maxLastColumn = visibleColumns.length - pinnedColumns.right.length;\n        apiRef.current.calculateColSpan({\n          rowId: id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n        if (pinnedColumns.left.length > 0) {\n          apiRef.current.calculateColSpan({\n            rowId: id,\n            minFirstColumn: 0,\n            maxLastColumn: pinnedColumns.left.length,\n            columns: visibleColumns\n          });\n        }\n        if (pinnedColumns.right.length > 0) {\n          apiRef.current.calculateColSpan({\n            rowId: id,\n            minFirstColumn: visibleColumns.length - pinnedColumns.right.length,\n            maxLastColumn: visibleColumns.length,\n            columns: visibleColumns\n          });\n        }\n      }\n      const hasFocus = cellFocus?.id === id;\n      const baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n      let isFirstVisible = false;\n      if (params.position === undefined) {\n        isFirstVisible = rowIndexInPage === 0;\n      }\n      let isLastVisible = false;\n      const isLastVisibleInSection = rowIndexInPage === rowModels.length - 1;\n      if (isLastSection) {\n        if (!isPinnedSection) {\n          const lastIndex = currentPage.rows.length - 1;\n          const isLastVisibleRowIndex = rowIndexInPage === lastIndex;\n          if (isLastVisibleRowIndex) {\n            isLastVisible = true;\n          }\n        } else {\n          isLastVisible = isLastVisibleInSection;\n        }\n      }\n      const isVirtualRow = rowIndexInPage === virtualRowIndex;\n      const isNotVisible = isVirtualRow;\n      let tabbableCell = null;\n      if (cellTabIndex !== null && cellTabIndex.id === id) {\n        const cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);\n        tabbableCell = cellParams.cellMode === 'view' ? cellTabIndex.field : null;\n      }\n      let currentRenderContext = baseRenderContext;\n      if (!isPinnedSection && frozenContext.current && rowIndexInPage >= frozenContext.current.firstRowIndex && rowIndexInPage < frozenContext.current.lastRowIndex) {\n        currentRenderContext = frozenContext.current;\n      }\n      const offsetLeft = computeOffsetLeft(columnPositions, currentRenderContext, pinnedColumns.left.length);\n      const showBottomBorder = isLastVisibleInSection && params.position === 'top';\n      rows.push(/*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n        row: model,\n        rowId: id,\n        index: rowIndex,\n        selected: isSelected,\n        offsetTop: params.rows ? undefined : rowsMeta.positions[rowIndexInPage],\n        offsetLeft: offsetLeft,\n        dimensions: dimensions,\n        rowHeight: baseRowHeight,\n        tabbableCell: tabbableCell,\n        pinnedColumns: pinnedColumns,\n        visibleColumns: visibleColumns,\n        renderContext: currentRenderContext,\n        focusedColumnIndex: hasFocus ? focusedCell.columnIndex : undefined,\n        isFirstVisible: isFirstVisible,\n        isLastVisible: isLastVisible,\n        isNotVisible: isNotVisible,\n        showBottomBorder: showBottomBorder\n      }, rowProps), id));\n      if (isNotVisible) {\n        return;\n      }\n      const panel = panels.get(id);\n      if (panel) {\n        rows.push(panel);\n      }\n      if (params.position === undefined && isLastVisibleInSection) {\n        rows.push(apiRef.current.getInfiniteLoadingTriggerElement?.({\n          lastRowId: id\n        }));\n      }\n    });\n    return rows;\n  };\n  const needsHorizontalScrollbar = outerSize.width && columnsTotalWidth >= outerSize.width;\n  const scrollerStyle = React.useMemo(() => ({\n    overflowX: !needsHorizontalScrollbar ? 'hidden' : undefined,\n    overflowY: rootProps.autoHeight ? 'hidden' : undefined\n  }), [needsHorizontalScrollbar, rootProps.autoHeight]);\n  const contentSize = React.useMemo(() => {\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height: contentHeight\n    };\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = getMinimalContentHeight(apiRef); // Give room to show the overlay when there no rows.\n    }\n    return size;\n  }, [apiRef, columnsTotalWidth, contentHeight, needsHorizontalScrollbar, rootProps.autoHeight, currentPage.rows.length]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n  useEnhancedEffect(() => {\n    // FIXME: Is this really necessary?\n    apiRef.current.resize();\n  }, [apiRef, rowsMeta.currentPageTotalHeight]);\n  useEnhancedEffect(() => {\n    // TODO a scroll reset should not be necessary\n    if (enabledForColumns) {\n      scrollerRef.current.scrollLeft = 0;\n    }\n    if (enabledForRows) {\n      scrollerRef.current.scrollTop = 0;\n    }\n  }, [enabledForColumns, enabledForRows, gridRootRef, scrollerRef]);\n  useRunOnce(outerSize.width !== 0, () => {\n    const inputs = inputsSelector(apiRef, rootProps, enabledForRows, enabledForColumns);\n    const initialRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);\n    updateRenderContext(initialRenderContext);\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollPosition.current.top,\n      left: scrollPosition.current.left,\n      renderContext: initialRenderContext\n    });\n  });\n  apiRef.current.register('private', {\n    updateRenderContext: forceUpdateRenderContext\n  });\n  useGridApiEventHandler(apiRef, 'columnsChange', forceUpdateRenderContext);\n  useGridApiEventHandler(apiRef, 'filteredRowsSet', forceUpdateRenderContext);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', forceUpdateRenderContext);\n  return {\n    renderContext,\n    setPanels,\n    getRows,\n    getContainerProps: () => ({\n      ref: mainRef\n    }),\n    getScrollerProps: () => ({\n      ref: scrollerRef,\n      onScroll: handleScroll,\n      onWheel: handleWheel,\n      onTouchMove: handleTouchMove,\n      style: scrollerStyle,\n      role: 'presentation',\n      // `tabIndex` shouldn't be used along role=presentation, but it fixes a Firefox bug\n      // https://github.com/mui/mui-x/pull/13891#discussion_r1683416024\n      tabIndex: platform.isFirefox ? -1 : undefined\n    }),\n    getContentProps: () => ({\n      style: contentSize,\n      role: 'presentation'\n    }),\n    getRenderZoneProps: () => ({\n      role: 'rowgroup'\n    }),\n    getScrollbarVerticalProps: () => ({\n      ref: scrollbarVerticalRef,\n      role: 'presentation'\n    }),\n    getScrollbarHorizontalProps: () => ({\n      ref: scrollbarHorizontalRef,\n      role: 'presentation'\n    })\n  };\n};\nfunction inputsSelector(apiRef, rootProps, enabledForRows, enabledForColumns) {\n  const dimensions = gridDimensionsSelector(apiRef.current.state);\n  const currentPage = getVisibleRows(apiRef, rootProps);\n  const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n  const hiddenCellsOriginMap = gridRowSpanningHiddenCellsOriginMapSelector(apiRef);\n  const lastRowId = apiRef.current.state.rows.dataRowIds.at(-1);\n  const lastColumn = visibleColumns.at(-1);\n  return {\n    enabledForRows,\n    enabledForColumns,\n    apiRef,\n    autoHeight: rootProps.autoHeight,\n    rowBufferPx: rootProps.rowBufferPx,\n    columnBufferPx: rootProps.columnBufferPx,\n    leftPinnedWidth: dimensions.leftPinnedWidth,\n    columnsTotalWidth: dimensions.columnsTotalWidth,\n    viewportInnerWidth: dimensions.viewportInnerSize.width,\n    viewportInnerHeight: dimensions.viewportInnerSize.height,\n    lastRowHeight: lastRowId !== undefined ? apiRef.current.unstable_getRowHeight(lastRowId) : 0,\n    lastColumnWidth: lastColumn?.computedWidth ?? 0,\n    rowsMeta: gridRowsMetaSelector(apiRef.current.state),\n    columnPositions: gridColumnPositionsSelector(apiRef),\n    rows: currentPage.rows,\n    range: currentPage.range,\n    pinnedColumns: gridVisiblePinnedColumnDefinitionsSelector(apiRef),\n    visibleColumns,\n    hiddenCellsOriginMap\n  };\n}\nfunction computeRenderContext(inputs, scrollPosition, scrollCache) {\n  const renderContext = {\n    firstRowIndex: 0,\n    lastRowIndex: inputs.rows.length,\n    firstColumnIndex: 0,\n    lastColumnIndex: inputs.visibleColumns.length\n  };\n  const {\n    top,\n    left\n  } = scrollPosition;\n  const realLeft = Math.abs(left) + inputs.leftPinnedWidth;\n  if (inputs.enabledForRows) {\n    // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n    let firstRowIndex = Math.min(getNearestIndexToRender(inputs, top, {\n      atStart: true,\n      lastPosition: inputs.rowsMeta.positions[inputs.rowsMeta.positions.length - 1] + inputs.lastRowHeight\n    }), inputs.rowsMeta.positions.length - 1);\n\n    // If any of the cells in the `firstRowIndex` is hidden due to an extended row span,\n    // Make sure the row from where the rowSpan is originated is visible.\n    const rowSpanHiddenCellOrigin = inputs.hiddenCellsOriginMap[firstRowIndex];\n    if (rowSpanHiddenCellOrigin) {\n      const minSpannedRowIndex = Math.min(...Object.values(rowSpanHiddenCellOrigin));\n      firstRowIndex = Math.min(firstRowIndex, minSpannedRowIndex);\n    }\n    const lastRowIndex = inputs.autoHeight ? firstRowIndex + inputs.rows.length : getNearestIndexToRender(inputs, top + inputs.viewportInnerHeight);\n    renderContext.firstRowIndex = firstRowIndex;\n    renderContext.lastRowIndex = lastRowIndex;\n  }\n  if (inputs.enabledForColumns) {\n    let firstColumnIndex = 0;\n    let lastColumnIndex = inputs.columnPositions.length;\n    let hasRowWithAutoHeight = false;\n    const [firstRowToRender, lastRowToRender] = getIndexesToRender({\n      firstIndex: renderContext.firstRowIndex,\n      lastIndex: renderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: inputs.rows.length,\n      bufferBefore: scrollCache.buffer.rowBefore,\n      bufferAfter: scrollCache.buffer.rowAfter,\n      positions: inputs.rowsMeta.positions,\n      lastSize: inputs.lastRowHeight\n    });\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = inputs.rows[i];\n      hasRowWithAutoHeight = inputs.apiRef.current.rowHasAutoHeight(row.id);\n    }\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(realLeft, inputs.columnPositions, {\n        atStart: true,\n        lastPosition: inputs.columnsTotalWidth\n      });\n      lastColumnIndex = binarySearch(realLeft + inputs.viewportInnerWidth, inputs.columnPositions);\n    }\n    renderContext.firstColumnIndex = firstColumnIndex;\n    renderContext.lastColumnIndex = lastColumnIndex;\n  }\n  const actualRenderContext = deriveRenderContext(inputs, renderContext, scrollCache);\n  return actualRenderContext;\n}\nfunction getNearestIndexToRender(inputs, offset, options) {\n  const lastMeasuredIndexRelativeToAllRows = inputs.apiRef.current.getLastMeasuredRowIndex();\n  let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n  if (inputs.range?.lastRowIndex && !allRowsMeasured) {\n    // Check if all rows in this page are already measured\n    allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= inputs.range.lastRowIndex;\n  }\n  const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (inputs.range?.firstRowIndex || 0), 0, inputs.rowsMeta.positions.length);\n  if (allRowsMeasured || inputs.rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n    // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n    // were measured, then use a binary search because it's faster.\n    return binarySearch(offset, inputs.rowsMeta.positions, options);\n  }\n\n  // Otherwise, use an exponential search.\n  // If rows have \"auto\" as height, their positions will be based on estimated heights.\n  // In this case, we can skip several steps until we find a position higher than the offset.\n  // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n  return exponentialSearch(offset, inputs.rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage, options);\n}\n\n/**\n * Accepts as input a raw render context (the area visible in the viewport) and adds\n * computes the actual render context based on pinned elements, buffer dimensions and\n * spanning.\n */\nfunction deriveRenderContext(inputs, nextRenderContext, scrollCache) {\n  const [firstRowToRender, lastRowToRender] = getIndexesToRender({\n    firstIndex: nextRenderContext.firstRowIndex,\n    lastIndex: nextRenderContext.lastRowIndex,\n    minFirstIndex: 0,\n    maxLastIndex: inputs.rows.length,\n    bufferBefore: scrollCache.buffer.rowBefore,\n    bufferAfter: scrollCache.buffer.rowAfter,\n    positions: inputs.rowsMeta.positions,\n    lastSize: inputs.lastRowHeight\n  });\n  const [initialFirstColumnToRender, lastColumnToRender] = getIndexesToRender({\n    firstIndex: nextRenderContext.firstColumnIndex,\n    lastIndex: nextRenderContext.lastColumnIndex,\n    minFirstIndex: inputs.pinnedColumns.left.length,\n    maxLastIndex: inputs.visibleColumns.length - inputs.pinnedColumns.right.length,\n    bufferBefore: scrollCache.buffer.columnBefore,\n    bufferAfter: scrollCache.buffer.columnAfter,\n    positions: inputs.columnPositions,\n    lastSize: inputs.lastColumnWidth\n  });\n  const firstColumnToRender = getFirstNonSpannedColumnToRender({\n    firstColumnToRender: initialFirstColumnToRender,\n    apiRef: inputs.apiRef,\n    firstRowToRender,\n    lastRowToRender,\n    visibleRows: inputs.rows\n  });\n  return {\n    firstRowIndex: firstRowToRender,\n    lastRowIndex: lastRowToRender,\n    firstColumnIndex: firstColumnToRender,\n    lastColumnIndex: lastColumnToRender\n  };\n}\n/**\n * Use binary search to avoid looping through all possible positions.\n * The `options.atStart` provides the possibility to match for the first element that\n * intersects the screen, even if said element's start position is before `offset`. In\n * other words, we search for `offset + width`.\n */\nfunction binarySearch(offset, positions, options = undefined, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const position = positions[pivot];\n  let isBefore;\n  if (options?.atStart) {\n    const width = (pivot === positions.length - 1 ? options.lastPosition : positions[pivot + 1]) - position;\n    isBefore = offset - width < position;\n  } else {\n    isBefore = offset <= position;\n  }\n  return isBefore ? binarySearch(offset, positions, options, sliceStart, pivot) : binarySearch(offset, positions, options, pivot + 1, sliceEnd);\n}\nfunction exponentialSearch(offset, positions, index, options = undefined) {\n  let interval = 1;\n  while (index < positions.length && Math.abs(positions[index]) < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return binarySearch(offset, positions, options, Math.floor(index / 2), Math.min(index, positions.length));\n}\nfunction getIndexesToRender({\n  firstIndex,\n  lastIndex,\n  bufferBefore,\n  bufferAfter,\n  minFirstIndex,\n  maxLastIndex,\n  positions,\n  lastSize\n}) {\n  const firstPosition = positions[firstIndex] - bufferBefore;\n  const lastPosition = positions[lastIndex] + bufferAfter;\n  const firstIndexPadded = binarySearch(firstPosition, positions, {\n    atStart: true,\n    lastPosition: positions[positions.length - 1] + lastSize\n  });\n  const lastIndexPadded = binarySearch(lastPosition, positions);\n  return [clamp(firstIndexPadded, minFirstIndex, maxLastIndex), clamp(lastIndexPadded, minFirstIndex, maxLastIndex)];\n}\nexport function areRenderContextsEqual(context1, context2) {\n  if (context1 === context2) {\n    return true;\n  }\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n}\nexport function computeOffsetLeft(columnPositions, renderContext, pinnedLeftLength) {\n  const left = (columnPositions[renderContext.firstColumnIndex] ?? 0) - (columnPositions[pinnedLeftLength] ?? 0);\n  return Math.abs(left);\n}\nfunction directionForDelta(dx, dy) {\n  if (dx === 0 && dy === 0) {\n    return ScrollDirection.NONE;\n  }\n  /* eslint-disable */\n  if (Math.abs(dy) >= Math.abs(dx)) {\n    if (dy > 0) {\n      return ScrollDirection.DOWN;\n    } else {\n      return ScrollDirection.UP;\n    }\n  } else {\n    if (dx > 0) {\n      return ScrollDirection.RIGHT;\n    } else {\n      return ScrollDirection.LEFT;\n    }\n  }\n  /* eslint-enable */\n}\nfunction bufferForDirection(isRtl, direction, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer) {\n  if (isRtl) {\n    switch (direction) {\n      case ScrollDirection.LEFT:\n        direction = ScrollDirection.RIGHT;\n        break;\n      case ScrollDirection.RIGHT:\n        direction = ScrollDirection.LEFT;\n        break;\n      default:\n    }\n  }\n  switch (direction) {\n    case ScrollDirection.NONE:\n      return {\n        rowAfter: rowBufferPx,\n        rowBefore: rowBufferPx,\n        columnAfter: columnBufferPx,\n        columnBefore: columnBufferPx\n      };\n    case ScrollDirection.LEFT:\n      return {\n        rowAfter: 0,\n        rowBefore: 0,\n        columnAfter: 0,\n        columnBefore: horizontalBuffer\n      };\n    case ScrollDirection.RIGHT:\n      return {\n        rowAfter: 0,\n        rowBefore: 0,\n        columnAfter: horizontalBuffer,\n        columnBefore: 0\n      };\n    case ScrollDirection.UP:\n      return {\n        rowAfter: 0,\n        rowBefore: verticalBuffer,\n        columnAfter: 0,\n        columnBefore: 0\n      };\n    case ScrollDirection.DOWN:\n      return {\n        rowAfter: verticalBuffer,\n        rowBefore: 0,\n        columnAfter: 0,\n        columnBefore: 0\n      };\n    default:\n      // eslint unable to figure out enum exhaustiveness\n      throw new Error('unreachable');\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}