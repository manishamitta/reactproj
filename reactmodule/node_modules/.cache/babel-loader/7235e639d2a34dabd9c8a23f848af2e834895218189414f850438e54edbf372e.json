{"ast":null,"code":"\"use strict\";\n\nconst u = new Map([[\"aliceblue\", \"f0f8ff\"], [\"antiquewhite\", \"faebd7\"], [\"aqua\", \"00ffff\"], [\"aquamarine\", \"7fffd4\"], [\"azure\", \"f0ffff\"], [\"beige\", \"f5f5dc\"], [\"bisque\", \"ffe4c4\"], [\"black\", \"000000\"], [\"blanchedalmond\", \"ffebcd\"], [\"blue\", \"0000ff\"], [\"blueviolet\", \"8a2be2\"], [\"brown\", \"a52a2a\"], [\"burlywood\", \"deb887\"], [\"cadetblue\", \"5f9ea0\"], [\"chartreuse\", \"7fff00\"], [\"chocolate\", \"d2691e\"], [\"coral\", \"ff7f50\"], [\"cornflowerblue\", \"6495ed\"], [\"cornsilk\", \"fff8dc\"], [\"crimson\", \"dc143c\"], [\"cyan\", \"00ffff\"], [\"darkblue\", \"00008b\"], [\"darkcyan\", \"008b8b\"], [\"darkgoldenrod\", \"b8860b\"], [\"darkgray\", \"a9a9a9\"], [\"darkgrey\", \"a9a9a9\"], [\"darkgreen\", \"006400\"], [\"darkkhaki\", \"bdb76b\"], [\"darkmagenta\", \"8b008b\"], [\"darkolivegreen\", \"556b2f\"], [\"darkorange\", \"ff8c00\"], [\"darkorchid\", \"9932cc\"], [\"darkred\", \"8b0000\"], [\"darksalmon\", \"e9967a\"], [\"darkseagreen\", \"8fbc8f\"], [\"darkslateblue\", \"483d8b\"], [\"darkslategray\", \"2f4f4f\"], [\"darkslategrey\", \"2f4f4f\"], [\"darkturquoise\", \"00ced1\"], [\"darkviolet\", \"9400d3\"], [\"deeppink\", \"ff1493\"], [\"deepskyblue\", \"00bfff\"], [\"dimgray\", \"696969\"], [\"dimgrey\", \"696969\"], [\"dodgerblue\", \"1e90ff\"], [\"firebrick\", \"b22222\"], [\"floralwhite\", \"fffaf0\"], [\"forestgreen\", \"228b22\"], [\"fuchsia\", \"ff00ff\"], [\"gainsboro\", \"dcdcdc\"], [\"ghostwhite\", \"f8f8ff\"], [\"gold\", \"ffd700\"], [\"goldenrod\", \"daa520\"], [\"gray\", \"808080\"], [\"grey\", \"808080\"], [\"green\", \"008000\"], [\"greenyellow\", \"adff2f\"], [\"honeydew\", \"f0fff0\"], [\"hotpink\", \"ff69b4\"], [\"indianred\", \"cd5c5c\"], [\"indigo\", \"4b0082\"], [\"ivory\", \"fffff0\"], [\"khaki\", \"f0e68c\"], [\"lavender\", \"e6e6fa\"], [\"lavenderblush\", \"fff0f5\"], [\"lawngreen\", \"7cfc00\"], [\"lemonchiffon\", \"fffacd\"], [\"lightblue\", \"add8e6\"], [\"lightcoral\", \"f08080\"], [\"lightcyan\", \"e0ffff\"], [\"lightgoldenrodyellow\", \"fafad2\"], [\"lightgray\", \"d3d3d3\"], [\"lightgrey\", \"d3d3d3\"], [\"lightgreen\", \"90ee90\"], [\"lightpink\", \"ffb6c1\"], [\"lightsalmon\", \"ffa07a\"], [\"lightseagreen\", \"20b2aa\"], [\"lightskyblue\", \"87cefa\"], [\"lightslategray\", \"778899\"], [\"lightslategrey\", \"778899\"], [\"lightsteelblue\", \"b0c4de\"], [\"lightyellow\", \"ffffe0\"], [\"lime\", \"00ff00\"], [\"limegreen\", \"32cd32\"], [\"linen\", \"faf0e6\"], [\"magenta\", \"ff00ff\"], [\"maroon\", \"800000\"], [\"mediumaquamarine\", \"66cdaa\"], [\"mediumblue\", \"0000cd\"], [\"mediumorchid\", \"ba55d3\"], [\"mediumpurple\", \"9370db\"], [\"mediumseagreen\", \"3cb371\"], [\"mediumslateblue\", \"7b68ee\"], [\"mediumspringgreen\", \"00fa9a\"], [\"mediumturquoise\", \"48d1cc\"], [\"mediumvioletred\", \"c71585\"], [\"midnightblue\", \"191970\"], [\"mintcream\", \"f5fffa\"], [\"mistyrose\", \"ffe4e1\"], [\"moccasin\", \"ffe4b5\"], [\"navajowhite\", \"ffdead\"], [\"navy\", \"000080\"], [\"oldlace\", \"fdf5e6\"], [\"olive\", \"808000\"], [\"olivedrab\", \"6b8e23\"], [\"orange\", \"ffa500\"], [\"orangered\", \"ff4500\"], [\"orchid\", \"da70d6\"], [\"palegoldenrod\", \"eee8aa\"], [\"palegreen\", \"98fb98\"], [\"paleturquoise\", \"afeeee\"], [\"palevioletred\", \"db7093\"], [\"papayawhip\", \"ffefd5\"], [\"peachpuff\", \"ffdab9\"], [\"peru\", \"cd853f\"], [\"pink\", \"ffc0cb\"], [\"plum\", \"dda0dd\"], [\"powderblue\", \"b0e0e6\"], [\"purple\", \"800080\"], [\"red\", \"ff0000\"], [\"rosybrown\", \"bc8f8f\"], [\"royalblue\", \"4169e1\"], [\"saddlebrown\", \"8b4513\"], [\"salmon\", \"fa8072\"], [\"sandybrown\", \"f4a460\"], [\"seagreen\", \"2e8b57\"], [\"seashell\", \"fff5ee\"], [\"sienna\", \"a0522d\"], [\"silver\", \"c0c0c0\"], [\"skyblue\", \"87ceeb\"], [\"slateblue\", \"6a5acd\"], [\"slategray\", \"708090\"], [\"slategrey\", \"708090\"], [\"snow\", \"fffafa\"], [\"springgreen\", \"00ff7f\"], [\"steelblue\", \"4682b4\"], [\"tan\", \"d2b48c\"], [\"teal\", \"008080\"], [\"thistle\", \"d8bfd8\"], [\"tomato\", \"ff6347\"], [\"turquoise\", \"40e0d0\"], [\"violet\", \"ee82ee\"], [\"wheat\", \"f5deb3\"], [\"white\", \"ffffff\"], [\"whitesmoke\", \"f5f5f5\"], [\"yellow\", \"ffff00\"], [\"yellowgreen\", \"9acd32\"], [\"transparent\", \"00000000\"]]),\n  c = e => e.startsWith(\"rgba\") ? p(e) : e.startsWith(\"rgb\") ? o(e) : (e.indexOf(\"#\") === 0 && (e.length === 4 ? e = `${e[1]}${e[1]}${e[2]}${e[2]}${e[3]}${e[3]}` : e = e.slice(1, e.length)), u.has(e) && (e = u.get(e)), h(e)),\n  p = e => {\n    const t = e.indexOf(\"(\"),\n      a = [];\n    for (let f = 0; f < e.length; f++) e[f] === \",\" && a.push(f);\n    return {\n      r: parseInt(e.slice(t + 1, a[0]).trim()),\n      g: parseInt(e.slice(a[0] + 1, a[1]).trim()),\n      b: parseInt(e.slice(a[1] + 1, a[2]).trim())\n    };\n  },\n  o = e => {\n    const t = e.indexOf(\"(\"),\n      a = e.indexOf(\")\"),\n      f = [];\n    for (let r = 0; r < e.length; r++) e[r] === \",\" && f.push(r);\n    return {\n      r: parseInt(e.slice(t + 1, f[0]).trim()),\n      g: parseInt(e.slice(f[0] + 1, f[1]).trim()),\n      b: parseInt(e.slice(f[1] + 1, a).trim())\n    };\n  },\n  k = e => {\n    let t = e.s * 100,\n      a = e.l * 100,\n      f,\n      r,\n      i;\n    t > 100 ? t = 1 : t < 0 ? t = 0 : t /= 100, a > 100 ? a = 1 : a < 0 ? a = 0 : a /= 100;\n    const d = e.h,\n      s = t * (1 - Math.abs(2 * a - 1)),\n      n = 255 * (a - .5 * s),\n      g = s * (1 - Math.abs(d / 60 % 2 - 1)),\n      m = Math.floor(d / 60),\n      l = n + 255 * g,\n      b = n + 255 * s;\n    switch (m) {\n      case 0:\n        f = b, r = l, i = n;\n        break;\n      case 1:\n        f = l, r = b, i = n;\n        break;\n      case 2:\n        f = n, r = b, i = l;\n        break;\n      case 3:\n        f = n, r = l, i = b;\n        break;\n      case 4:\n        f = l, r = n, i = b;\n        break;\n      case 5:\n        f = b, r = n, i = l;\n        break;\n      default:\n        f = 0, r = 0, i = 0;\n        break;\n    }\n    return {\n      r: Math.round(f),\n      g: Math.round(r),\n      b: Math.round(i)\n    };\n  },\n  h = e => ({\n    r: parseInt(e.substr(0, 2), 16),\n    g: parseInt(e.substr(2, 2), 16),\n    b: parseInt(e.substr(4, 2), 16)\n  }),\n  y = e => {\n    const t = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\"];\n    let a = \"#\",\n      f = e.r / 16,\n      r = e.r % 16;\n    return a += String(t[Math.floor(f)]), a += String(t[r]), f = e.g / 16, r = e.g % 16, a += String(t[Math.floor(f)]), a += String(t[r]), f = e.b / 16, r = e.b % 16, a += String(t[Math.floor(f)]), a += String(t[r]), a;\n  },\n  w = e => {\n    const t = e.r / 255,\n      a = e.g / 255,\n      f = e.b / 255,\n      r = Math.max(t, a, f),\n      i = Math.min(t, a, f),\n      d = r - i;\n    let s = 0,\n      n;\n    d === 0 ? s = 0 : r === t ? s = 60 * ((a - f) / d % 6) : r === a ? s = 60 * ((f - t) / d + 2) : r === f && (s = 60 * ((t - a) / d + 4));\n    const g = (r + i) / 2;\n    return d === 0 ? n = 0 : n = d / (1 - Math.abs(2 * g - 1)), {\n      h: s,\n      s: n,\n      l: g\n    };\n  };\nexport { c as getRGBColor, k as HSLToRGB, h as HEXToRGB, w as RGBToHSL, o as RGBStringToRGBObject, y as RGBtoHEX };","map":{"version":3,"names":["u","Map","c","e","startsWith","p","o","indexOf","length","slice","has","get","h","t","a","f","push","r","parseInt","trim","g","b","k","s","l","i","d","Math","abs","n","m","floor","round","substr","y","String","w","max","min","getRGBColor","HSLToRGB","HEXToRGB","RGBToHSL","RGBStringToRGBObject","RGBtoHEX"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-base/src/util/ColorConversion.ts"],"sourcesContent":["/**\n *\n * @param {String} color Color in one of the following formats: RGBA or HEX\n */\n\ntype ColorHSL = {\n\th: number,\n\ts: number,\n\tl: number,\n};\n\ntype ColorRGB = {\n\tr: number,\n\tb: number,\n\tg: number,\n};\n\n/**\n * Map of CSS colors to hex representation\n */\nconst CSSColors = new Map([\n\t[\"aliceblue\", \"f0f8ff\"],\n\t[\"antiquewhite\", \"faebd7\"],\n\t[\"aqua\", \"00ffff\"],\n\t[\"aquamarine\", \"7fffd4\"],\n\t[\"azure\", \"f0ffff\"],\n\t[\"beige\", \"f5f5dc\"],\n\t[\"bisque\", \"ffe4c4\"],\n\t[\"black\", \"000000\"],\n\t[\"blanchedalmond\", \"ffebcd\"],\n\t[\"blue\", \"0000ff\"],\n\t[\"blueviolet\", \"8a2be2\"],\n\t[\"brown\", \"a52a2a\"],\n\t[\"burlywood\", \"deb887\"],\n\t[\"cadetblue\", \"5f9ea0\"],\n\t[\"chartreuse\", \"7fff00\"],\n\t[\"chocolate\", \"d2691e\"],\n\t[\"coral\", \"ff7f50\"],\n\t[\"cornflowerblue\", \"6495ed\"],\n\t[\"cornsilk\", \"fff8dc\"],\n\t[\"crimson\", \"dc143c\"],\n\t[\"cyan\", \"00ffff\"],\n\t[\"darkblue\", \"00008b\"],\n\t[\"darkcyan\", \"008b8b\"],\n\t[\"darkgoldenrod\", \"b8860b\"],\n\t[\"darkgray\", \"a9a9a9\"],\n\t[\"darkgrey\", \"a9a9a9\"],\n\t[\"darkgreen\", \"006400\"],\n\t[\"darkkhaki\", \"bdb76b\"],\n\t[\"darkmagenta\", \"8b008b\"],\n\t[\"darkolivegreen\", \"556b2f\"],\n\t[\"darkorange\", \"ff8c00\"],\n\t[\"darkorchid\", \"9932cc\"],\n\t[\"darkred\", \"8b0000\"],\n\t[\"darksalmon\", \"e9967a\"],\n\t[\"darkseagreen\", \"8fbc8f\"],\n\t[\"darkslateblue\", \"483d8b\"],\n\t[\"darkslategray\", \"2f4f4f\"],\n\t[\"darkslategrey\", \"2f4f4f\"],\n\t[\"darkturquoise\", \"00ced1\"],\n\t[\"darkviolet\", \"9400d3\"],\n\t[\"deeppink\", \"ff1493\"],\n\t[\"deepskyblue\", \"00bfff\"],\n\t[\"dimgray\", \"696969\"],\n\t[\"dimgrey\", \"696969\"],\n\t[\"dodgerblue\", \"1e90ff\"],\n\t[\"firebrick\", \"b22222\"],\n\t[\"floralwhite\", \"fffaf0\"],\n\t[\"forestgreen\", \"228b22\"],\n\t[\"fuchsia\", \"ff00ff\"],\n\t[\"gainsboro\", \"dcdcdc\"],\n\t[\"ghostwhite\", \"f8f8ff\"],\n\t[\"gold\", \"ffd700\"],\n\t[\"goldenrod\", \"daa520\"],\n\t[\"gray\", \"808080\"],\n\t[\"grey\", \"808080\"],\n\t[\"green\", \"008000\"],\n\t[\"greenyellow\", \"adff2f\"],\n\t[\"honeydew\", \"f0fff0\"],\n\t[\"hotpink\", \"ff69b4\"],\n\t[\"indianred\", \"cd5c5c\"],\n\t[\"indigo\", \"4b0082\"],\n\t[\"ivory\", \"fffff0\"],\n\t[\"khaki\", \"f0e68c\"],\n\t[\"lavender\", \"e6e6fa\"],\n\t[\"lavenderblush\", \"fff0f5\"],\n\t[\"lawngreen\", \"7cfc00\"],\n\t[\"lemonchiffon\", \"fffacd\"],\n\t[\"lightblue\", \"add8e6\"],\n\t[\"lightcoral\", \"f08080\"],\n\t[\"lightcyan\", \"e0ffff\"],\n\t[\"lightgoldenrodyellow\", \"fafad2\"],\n\t[\"lightgray\", \"d3d3d3\"],\n\t[\"lightgrey\", \"d3d3d3\"],\n\t[\"lightgreen\", \"90ee90\"],\n\t[\"lightpink\", \"ffb6c1\"],\n\t[\"lightsalmon\", \"ffa07a\"],\n\t[\"lightseagreen\", \"20b2aa\"],\n\t[\"lightskyblue\", \"87cefa\"],\n\t[\"lightslategray\", \"778899\"],\n\t[\"lightslategrey\", \"778899\"],\n\t[\"lightsteelblue\", \"b0c4de\"],\n\t[\"lightyellow\", \"ffffe0\"],\n\t[\"lime\", \"00ff00\"],\n\t[\"limegreen\", \"32cd32\"],\n\t[\"linen\", \"faf0e6\"],\n\t[\"magenta\", \"ff00ff\"],\n\t[\"maroon\", \"800000\"],\n\t[\"mediumaquamarine\", \"66cdaa\"],\n\t[\"mediumblue\", \"0000cd\"],\n\t[\"mediumorchid\", \"ba55d3\"],\n\t[\"mediumpurple\", \"9370db\"],\n\t[\"mediumseagreen\", \"3cb371\"],\n\t[\"mediumslateblue\", \"7b68ee\"],\n\t[\"mediumspringgreen\", \"00fa9a\"],\n\t[\"mediumturquoise\", \"48d1cc\"],\n\t[\"mediumvioletred\", \"c71585\"],\n\t[\"midnightblue\", \"191970\"],\n\t[\"mintcream\", \"f5fffa\"],\n\t[\"mistyrose\", \"ffe4e1\"],\n\t[\"moccasin\", \"ffe4b5\"],\n\t[\"navajowhite\", \"ffdead\"],\n\t[\"navy\", \"000080\"],\n\t[\"oldlace\", \"fdf5e6\"],\n\t[\"olive\", \"808000\"],\n\t[\"olivedrab\", \"6b8e23\"],\n\t[\"orange\", \"ffa500\"],\n\t[\"orangered\", \"ff4500\"],\n\t[\"orchid\", \"da70d6\"],\n\t[\"palegoldenrod\", \"eee8aa\"],\n\t[\"palegreen\", \"98fb98\"],\n\t[\"paleturquoise\", \"afeeee\"],\n\t[\"palevioletred\", \"db7093\"],\n\t[\"papayawhip\", \"ffefd5\"],\n\t[\"peachpuff\", \"ffdab9\"],\n\t[\"peru\", \"cd853f\"],\n\t[\"pink\", \"ffc0cb\"],\n\t[\"plum\", \"dda0dd\"],\n\t[\"powderblue\", \"b0e0e6\"],\n\t[\"purple\", \"800080\"],\n\t[\"red\", \"ff0000\"],\n\t[\"rosybrown\", \"bc8f8f\"],\n\t[\"royalblue\", \"4169e1\"],\n\t[\"saddlebrown\", \"8b4513\"],\n\t[\"salmon\", \"fa8072\"],\n\t[\"sandybrown\", \"f4a460\"],\n\t[\"seagreen\", \"2e8b57\"],\n\t[\"seashell\", \"fff5ee\"],\n\t[\"sienna\", \"a0522d\"],\n\t[\"silver\", \"c0c0c0\"],\n\t[\"skyblue\", \"87ceeb\"],\n\t[\"slateblue\", \"6a5acd\"],\n\t[\"slategray\", \"708090\"],\n\t[\"slategrey\", \"708090\"],\n\t[\"snow\", \"fffafa\"],\n\t[\"springgreen\", \"00ff7f\"],\n\t[\"steelblue\", \"4682b4\"],\n\t[\"tan\", \"d2b48c\"],\n\t[\"teal\", \"008080\"],\n\t[\"thistle\", \"d8bfd8\"],\n\t[\"tomato\", \"ff6347\"],\n\t[\"turquoise\", \"40e0d0\"],\n\t[\"violet\", \"ee82ee\"],\n\t[\"wheat\", \"f5deb3\"],\n\t[\"white\", \"ffffff\"],\n\t[\"whitesmoke\", \"f5f5f5\"],\n\t[\"yellow\", \"ffff00\"],\n\t[\"yellowgreen\", \"9acd32\"],\n\t[\"transparent\", \"00000000\"],\n]);\n\nconst getRGBColor = (color: string): ColorRGB => {\n\tif (color.startsWith(\"rgba\")) {\n\t\treturn RGBAToRGB(color);\n\t}\n\n\tif (color.startsWith(\"rgb\")) {\n\t\treturn RGBStringToRGBObject(color);\n\t}\n\n\t// HEX\n\tif (color.indexOf(\"#\") === 0) {\n\t\t// Shorthand Syntax\n\t\tif (color.length === 4) {\n\t\t\tcolor = `${color[1]}${color[1]}${color[2]}${color[2]}${color[3]}${color[3]}`;\n\t\t} else {\n\t\t\tcolor = color.slice(1, color.length);\n\t\t}\n\t}\n\n\t// Css Color\n\tif (CSSColors.has(color)) {\n\t\tcolor = CSSColors.get(color)!;\n\t}\n\n\treturn HEXToRGB(color);\n};\n\n/**\n * Return an object with the properties for each of the main colors(red, green, blue)\n * @param {String} color Receives a color in the following format: \"rgba(0, 0, 0, 1)\n */\nconst RGBAToRGB = (color: string): ColorRGB => {\n\tconst openingBracketIndex = color.indexOf(\"(\"),\n\t\tcommasIndexes = [];\n\n\tfor (let i = 0; i < color.length; i++) {\n\t\tif (color[i] === \",\") {\n\t\t\tcommasIndexes.push(i);\n\t\t}\n\t}\n\n\treturn {\n\t\tr: parseInt(color.slice(openingBracketIndex + 1, commasIndexes[0]).trim()),\n\t\tg: parseInt(color.slice(commasIndexes[0] + 1, commasIndexes[1]).trim()),\n\t\tb: parseInt(color.slice(commasIndexes[1] + 1, commasIndexes[2]).trim()),\n\t};\n};\n\n/**\n * Return an object with the properties for each of the main colors(red, green, blue)\n * @param {String} color Receives a color in the following format: \"rgb(0, 0, 0)\n */\nconst RGBStringToRGBObject = (color: string): ColorRGB => {\n\tconst openingBracketIndex = color.indexOf(\"(\"),\n\t\tclosingBraketIndex = color.indexOf(\")\"),\n\t\tcommasIndexes = [];\n\n\tfor (let i = 0; i < color.length; i++) {\n\t\tif (color[i] === \",\") {\n\t\t\tcommasIndexes.push(i);\n\t\t}\n\t}\n\n\treturn {\n\t\tr: parseInt(color.slice(openingBracketIndex + 1, commasIndexes[0]).trim()),\n\t\tg: parseInt(color.slice(commasIndexes[0] + 1, commasIndexes[1]).trim()),\n\t\tb: parseInt(color.slice(commasIndexes[1] + 1, closingBraketIndex).trim()),\n\t};\n};\n\nconst HSLToRGB = (color: ColorHSL): ColorRGB => {\n\t// Formula taken from https://www.rapidtables.com/convert/color/hsl-to-rgb.html\n\tlet saturation = color.s * 100,\n\t\tlightness = color.l * 100,\n\t\tred,\n\t\tgreen,\n\t\tblue;\n\n\tif (saturation > 100) {\n\t\tsaturation = 1;\n\t} else if (saturation < 0) {\n\t\tsaturation = 0;\n\t} else {\n\t\tsaturation /= 100;\n\t}\n\n\tif (lightness > 100) {\n\t\tlightness = 1;\n\t} else if (lightness < 0) {\n\t\tlightness = 0;\n\t} else {\n\t\tlightness /= 100;\n\t}\n\n\tconst hue = color.h,\n\t\td = saturation * (1 - Math.abs(2 * lightness - 1)),\n\t\tm = 255 * (lightness - 0.5 * d),\n\t\tx = d * (1 - Math.abs(((hue / 60) % 2) - 1)),\n\t\ti = Math.floor(hue / 60),\n\t\tm255x = m + 255 * x,\n\t\tm255d = m + 255 * d;\n\n\tswitch (i) {\n\tcase 0:\n\t\tred = m255d;\n\t\tgreen = m255x;\n\t\tblue = m;\n\t\tbreak;\n\tcase 1:\n\t\tred = m255x;\n\t\tgreen = m255d;\n\t\tblue = m;\n\t\tbreak;\n\tcase 2:\n\t\tred = m;\n\t\tgreen = m255d;\n\t\tblue = m255x;\n\t\tbreak;\n\tcase 3:\n\t\tred = m;\n\t\tgreen = m255x;\n\t\tblue = m255d;\n\t\tbreak;\n\tcase 4:\n\t\tred = m255x;\n\t\tgreen = m;\n\t\tblue = m255d;\n\t\tbreak;\n\tcase 5:\n\t\tred = m255d;\n\t\tgreen = m;\n\t\tblue = m255x;\n\t\tbreak;\n\tdefault:\n\t\tred = 0;\n\t\tgreen = 0;\n\t\tblue = 0;\n\t\tbreak;\n\t}\n\n\treturn {\n\t\tr: Math.round(red),\n\t\tg: Math.round(green),\n\t\tb: Math.round(blue),\n\t};\n};\n\nconst HEXToRGB = (hex: string): ColorRGB => {\n\t// Please make sure you pass a valid 6 digit hex color\n\t// In the implementation of this method we assume that the hex argument is a 6 digit valid hex color\n\n\treturn {\n\t\tr: parseInt(hex.substr(0, 2), 16),\n\t\tg: parseInt(hex.substr(2, 2), 16),\n\t\tb: parseInt(hex.substr(4, 2), 16),\n\t};\n};\n\n/**\n * Returns the hex value of the color as string\n * @param {Object} color Receives an object with the properties for each of the main colors(r, g, b)\n */\nconst RGBtoHEX = (color: ColorRGB): string => {\n\tconst hexMap = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\"];\n\tlet hexValue = \"#\";\n\n\tlet divisionNumber = color.r / 16;\n\tlet remainder = color.r % 16;\n\thexValue += String(hexMap[Math.floor(divisionNumber)]);\n\thexValue += String(hexMap[remainder]);\n\n\tdivisionNumber = color.g / 16;\n\tremainder = color.g % 16;\n\thexValue += String(hexMap[Math.floor(divisionNumber)]);\n\thexValue += String(hexMap[remainder]);\n\n\tdivisionNumber = color.b / 16;\n\tremainder = color.b % 16;\n\thexValue += String(hexMap[Math.floor(divisionNumber)]);\n\thexValue += String(hexMap[remainder]);\n\n\treturn hexValue;\n};\n\nconst RGBToHSL = (color: ColorRGB): ColorHSL => {\n\tconst R = color.r / 255,\n\t\tG = color.g / 255,\n\t\tB = color.b / 255,\n\t\tmax = Math.max(R, G, B),\n\t\tmin = Math.min(R, G, B),\n\t\tdelta = max - min;\n\n\tlet h = 0,\n\t\ts;\n\n\t// Hue calculation\n\tif (delta === 0) {\n\t\th = 0;\n\t} else if (max === R) {\n\t\th = 60 * (((G - B) / delta) % 6);\n\t} else if (max === G) {\n\t\th = 60 * (((B - R) / delta) + 2);\n\t} else if (max === B) {\n\t\th = 60 * (((R - G) / delta) + 4);\n\t}\n\n\t// Lightness calculation\n\tconst l = (max + min) / 2;\n\n\t// Saturation calculation\n\tif (delta === 0) {\n\t\ts = 0;\n\t} else {\n\t\ts = delta / (1 - Math.abs(2 * l - 1));\n\t}\n\n\treturn {\n\t\th,\n\t\ts,\n\t\tl,\n\t};\n};\n\nexport {\n\tgetRGBColor,\n\tHSLToRGB,\n\tHEXToRGB,\n\tRGBToHSL,\n\tRGBStringToRGBObject,\n\tRGBtoHEX,\n};\n\nexport type {\n\tColorHSL,\n\tColorRGB,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}