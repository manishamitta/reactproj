{"ast":null,"code":"/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n// Provides class sap.ui.base.Metadata\nimport ObjectPath from \"../../base/util/ObjectPath.js\";\nimport assert from \"../../base/assert.js\";\nimport Log from \"../../base/Log.js\";\nimport uniqueSort from \"../../base/util/array/uniqueSort.js\";\nfunction isFunction(obj) {\n  return typeof obj === \"function\";\n}\n\n/**\n * Creates a new metadata object from the given static infos.\n *\n * <b>Note:</b> Throughout this class documentation, the described subclass of Object\n * is referenced as <i>the described class</i>.\n *\n * @param {string} sClassName Fully qualified name of the described class\n * @param {object} oClassInfo Info to construct the class and its metadata from\n * @param {sap.ui.base.Object.MetadataOptions} [oClassInfo.metadata]\n *  The metadata object describing the class\n *\n * @class Metadata for a class.\n * @author Frank Weigel\n * @version 1.120.17\n * @since 0.8.6\n * @public\n * @alias sap.ui.base.Metadata\n */\nvar Metadata = function (sClassName, oClassInfo) {\n  assert(typeof sClassName === \"string\" && sClassName, \"Metadata: sClassName must be a non-empty string\");\n  assert(typeof oClassInfo === \"object\", \"Metadata: oClassInfo must be empty or an object\");\n\n  // support for old usage of Metadata\n  if (!oClassInfo || typeof oClassInfo.metadata !== \"object\") {\n    oClassInfo = {\n      metadata: oClassInfo || {},\n      // retrieve class by its name. Using a lookup costs time but avoids the need for redundant arguments to this function\n      constructor: ObjectPath.get(sClassName) // legacy-relevant, code path not used by extend call\n    };\n    oClassInfo.metadata.__version = 1.0;\n  }\n  oClassInfo.metadata.__version = oClassInfo.metadata.__version || 2.0;\n  if (!isFunction(oClassInfo.constructor)) {\n    throw Error(\"constructor for class \" + sClassName + \" must have been declared before creating metadata for it\");\n  }\n\n  // invariant: oClassInfo exists, oClassInfo.metadata exists, oClassInfo.constructor exists\n  this._sClassName = sClassName;\n  this._oClass = oClassInfo.constructor;\n  this.extend(oClassInfo);\n};\n\n/**\n * @private\n * @final\n */\nMetadata.prototype.extend = function (oClassInfo) {\n  this.applySettings(oClassInfo);\n  this.afterApplySettings();\n};\n\n/**\n * @private\n * @since 1.3.1\n */\nMetadata.prototype.applySettings = function (oClassInfo) {\n  var that = this,\n    oStaticInfo = oClassInfo.metadata,\n    oPrototype;\n  if (oStaticInfo.baseType) {\n    var oParentClass;\n    if (isFunction(oStaticInfo.baseType)) {\n      oParentClass = oStaticInfo.baseType;\n      if (!isFunction(oParentClass.getMetadata)) {\n        throw new TypeError(\"baseType must be a UI5 class with a static getMetadata function\");\n      }\n    } else {\n      // lookup base class by its name - same reasoning as above\n      oParentClass = ObjectPath.get(oStaticInfo.baseType); // legacy-relevant, code path not used by extend call\n      if (!isFunction(oParentClass)) {\n        Log.fatal(\"base class '\" + oStaticInfo.baseType + \"' does not exist\");\n      }\n    }\n    // link metadata with base metadata\n    if (oParentClass.getMetadata) {\n      this._oParent = oParentClass.getMetadata();\n      assert(oParentClass === oParentClass.getMetadata().getClass(), \"Metadata: oParentClass must match the class in the parent metadata\");\n    } else {\n      // fallback, if base class has no metadata - can only happen if baseType is a string\n      this._oParent = new Metadata(oStaticInfo.baseType, {});\n    }\n  } else {\n    this._oParent = undefined;\n  }\n  this._bAbstract = !!oStaticInfo[\"abstract\"];\n  this._bFinal = !!oStaticInfo[\"final\"];\n  this._sStereotype = oStaticInfo.stereotype || (this._oParent ? this._oParent._sStereotype : \"object\");\n  this._bDeprecated = !!oStaticInfo[\"deprecated\"];\n\n  // handle interfaces\n  this._aInterfaces = oStaticInfo.interfaces || [];\n\n  // take over metadata from static info\n  this._aPublicMethods = oStaticInfo.publicMethods || [];\n\n  // interfaces info possibly not unique\n  this._bInterfacesUnique = false;\n\n  // enrich prototype\n  oPrototype = this._oClass.prototype;\n  for (var n in oClassInfo) {\n    if (n !== \"metadata\" && n !== \"constructor\") {\n      oPrototype[n] = oClassInfo[n];\n      if (!n.match(/^_|^on|^init$|^exit$/)) {\n        // TODO hard coded knowledge about event handlers (\"on\") and about init/exit hooks is not nice....\n        that._aPublicMethods.push(n);\n      }\n    }\n  }\n};\n\n/**\n * Called after new settings have been applied.\n *\n * Typically, this method is used to do some cleanup (e.g. uniqueness)\n * or to calculate an optimized version of some data.\n * @private\n * @since 1.3.1\n */\nMetadata.prototype.afterApplySettings = function () {\n  // create the flattened \"all\" view\n  if (this._oParent) {\n    this._aAllPublicMethods = this._oParent._aAllPublicMethods.concat(this._aPublicMethods);\n    this._bInterfacesUnique = false;\n  } else {\n    this._aAllPublicMethods = this._aPublicMethods;\n  }\n};\n\n/**\n * Stereotype of the described class.\n *\n * @experimental might be enhanced to a set of stereotypes\n * @private\n * @ui5-restricted\n */\nMetadata.prototype.getStereotype = function () {\n  return this._sStereotype;\n};\n\n/**\n * Returns the fully qualified name of the described class\n * @return {string} name of the described class\n * @public\n */\nMetadata.prototype.getName = function () {\n  return this._sClassName;\n};\n\n/**\n * Returns the (constructor of the) described class\n * @return {function(new:sap.ui.base.Object)} class described by this metadata\n * @public\n */\nMetadata.prototype.getClass = function () {\n  return this._oClass;\n};\n\n/**\n * Returns the metadata object of the base class of the described class\n * or undefined if the class has no (documented) base class.\n *\n * @return {sap.ui.base.Metadata | undefined} metadata of the base class\n * @public\n */\nMetadata.prototype.getParent = function () {\n  return this._oParent;\n};\n\n/**\n * Removes duplicate names in place from the interfaces and public methods members of this metadata object.\n *\n * @private\n */\nMetadata.prototype._dedupInterfaces = function () {\n  if (!this._bInterfacesUnique) {\n    uniqueSort(this._aInterfaces);\n    uniqueSort(this._aPublicMethods);\n    uniqueSort(this._aAllPublicMethods);\n    this._bInterfacesUnique = true;\n  }\n};\n\n/**\n * Returns an array with the names of the public methods declared by the described class, methods of\n * ancestors are not listed.\n *\n * @return {string[]} array with names of public methods declared by the described class\n * @deprecated As of 1.58, this method should not be used for productive code. The accuracy of the returned\n *       information highly depends on the concrete class and is not actively monitored. There might be\n *       more public methods or some of the returned methods might not really be intended for public use.\n *       In general, pure visibility information should not be exposed in runtime metadata but be part of the\n *       documentation.\n *       Subclasses of <code>sap.ui.base.Object</code> might decide to provide runtime metadata describing\n *       their public API, but this then should not be backed by this method.\n *       See {@link sap.ui.core.mvc.ControllerMetadata#getAllMethods} for an example.\n * @public\n */\nMetadata.prototype.getPublicMethods = function () {\n  this._dedupInterfaces();\n  return this._aPublicMethods;\n};\n\n/**\n * Returns an array with the names of all public methods declared by the described class\n * and all its ancestors classes.\n *\n * @return {string[]} array with names of all public methods provided by the described class and its ancestors\n * @deprecated As of 1.58, this method should not be used for productive code. The accuracy of the returned\n *       information highly depends on the concrete class and is not actively monitored. There might be\n *       more public methods or some of the returned methods might not really be intended for public use.\n *       In general, pure visibility information should not be exposed in runtime metadata but be part of the\n *       documentation.\n *       Subclasses of <code>sap.ui.base.Object</code> might decide to provide runtime metadata describing\n *       their public API, but this then should not be backed by this method.\n *       See {@link sap.ui.core.mvc.ControllerMetadata#getAllMethods} for an example.\n * @public\n */\nMetadata.prototype.getAllPublicMethods = function () {\n  this._dedupInterfaces();\n  return this._aAllPublicMethods;\n};\n\n/**\n * Returns the names of interfaces implemented by the described class.\n * As the representation of interfaces is not clear yet, this method is still private.\n *\n * @return {string} array of names of implemented interfaces\n * @private\n */\nMetadata.prototype.getInterfaces = function () {\n  this._dedupInterfaces();\n  return this._aInterfaces;\n};\n\n/**\n * Checks whether the described class or one of its ancestor classes implements the given interface.\n *\n * @param {string} sInterface name of the interface to test for (in dot notation)\n * @return {boolean} whether this class implements the interface\n * @public\n */\nMetadata.prototype.isInstanceOf = function (sInterface) {\n  if (this._oParent) {\n    if (this._oParent.isInstanceOf(sInterface)) {\n      return true;\n    }\n  }\n  var a = this._aInterfaces;\n  for (var i = 0, l = a.length; i < l; i++) {\n    // FIXME doesn't handle interface inheritance (requires object representation for interfaces)\n    if (a[i] === sInterface) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n * Lazy calculation of the set of implemented types.\n *\n * A calculation function is configured as getter for the <code>_mImplementedTypes</code>\n * on the prototype object. On first call for a metadata instance, it collects\n * the implemented types (classes, interfaces) from the described class and\n * any base classes and writes it to the property <code>_mImplementedTypes</code> of the\n * current instance of metadata. Future read access to the property will immediately\n * return the instance property and not call the calculation function again.\n */\nObject.defineProperty(Metadata.prototype, \"_mImplementedTypes\", {\n  get: function () {\n    if (this === Metadata.prototype) {\n      throw new Error(\"sap.ui.base.Metadata: The '_mImplementedTypes' property must not be accessed on the prototype\");\n    }\n\n    // create map of types, including inherited types\n    // Note: to save processing time and memory, the inherited types are merged via the prototype chain of 'result'\n    var result = Object.create(this._oParent ? this._oParent._mImplementedTypes : null);\n    /*\n     * Flat alternative:\n     * var result = Object.create(null);\n     * if ( this._oParent ) {\n     *   Object.assign(result, this._oParent._mImplementedTypes);\n     * }\n     */\n\n    // add own class\n    result[this._sClassName] = true;\n\n    // additionally collect interfaces\n    var aInterfaces = this._aInterfaces,\n      i = aInterfaces.length;\n    while (i-- > 0) {\n      if (!result[aInterfaces[i]]) {\n        // take care to write property only if it hasn't been set already\n        result[aInterfaces[i]] = true;\n      }\n    }\n\n    // write instance property, hiding the getter on the prototype\n    Object.defineProperty(this, \"_mImplementedTypes\", {\n      value: Object.freeze(result),\n      writable: false,\n      configurable: false\n    });\n    return result;\n  },\n  configurable: true\n});\n\n/**\n * Checks whether the class described by this metadata object is of the named type.\n *\n * This check is solely based on the type names as declared in the class metadata.\n * It compares the given <code>vTypeName</code> with the name of this class, with the\n * names of any base class of this class and with the names of all interfaces\n * implemented by any of the aforementioned classes.\n *\n * Instead of a single type name, an array of type names can be given and the method\n * will check if this class is of any of the listed types (logical or).\n *\n * Should the UI5 class system in future implement additional means of associating classes\n * with type names (e.g. by introducing mixins), then this method might detect matches\n * for those names as well.\n *\n * @param {string|string[]} vTypeName Type or types to check for\n * @returns {boolean} Whether this class is of the given type or of any of the given types\n * @public\n * @since 1.56\n */\nMetadata.prototype.isA = function (vTypeName) {\n  var mTypes = this._mImplementedTypes;\n  if (Array.isArray(vTypeName)) {\n    for (var i = 0; i < vTypeName.length; i++) {\n      if (vTypeName[i] in mTypes) {\n        return true;\n      }\n    }\n    return false;\n  }\n  // Note: the check with 'in' also finds inherited types via the prototype chain of mTypes\n  return vTypeName in mTypes;\n};\n\n/**\n * Returns whether the described class is abstract\n * @return {boolean} whether the class is abstract\n * @public\n */\nMetadata.prototype.isAbstract = function () {\n  return this._bAbstract;\n};\n\n/**\n * Returns whether the described class is final\n * @return {boolean} whether the class is final\n * @public\n */\nMetadata.prototype.isFinal = function () {\n  return this._bFinal;\n};\n\n/**\n * Whether the described class is deprecated and should not be used any more\n *\n * @return {boolean} whether the class is considered deprecated\n * @public\n * @since 1.26.4\n */\nMetadata.prototype.isDeprecated = function () {\n  return this._bDeprecated;\n};\n\n/**\n * Adds one or more new methods to the list of API methods.\n *\n * Can be used by contributer classes (like the EnabledPropagator) to enrich the declared set of methods.\n * The method can either be called with multiple names (strings) or with one array of strings.\n *\n * <b>Note</b>: the newly added method(s) will only be visible in {@link sap.ui.base.Interface interface}\n * objects that are created <i>after</i> this method has been called.\n *\n * @param {string|string[]} sMethod name(s) of the new method(s)\n */\nMetadata.prototype.addPublicMethods = function (sMethod /* ... */) {\n  var aNames = sMethod instanceof Array ? sMethod : arguments;\n  Array.prototype.push.apply(this._aPublicMethods, aNames);\n  Array.prototype.push.apply(this._aAllPublicMethods, aNames);\n  this._bInterfacesUnique = false;\n};\n\n/**\n * @since 1.3.1\n * @private\n */\nMetadata.createClass = function (fnBaseClass, sClassName, oClassInfo, FNMetaImpl) {\n  if (typeof fnBaseClass === \"string\") {\n    FNMetaImpl = oClassInfo;\n    oClassInfo = sClassName;\n    sClassName = fnBaseClass;\n    fnBaseClass = null;\n  }\n  assert(!fnBaseClass || isFunction(fnBaseClass));\n  assert(typeof sClassName === \"string\" && !!sClassName);\n  assert(!oClassInfo || typeof oClassInfo === \"object\");\n  assert(!FNMetaImpl || isFunction(FNMetaImpl));\n\n  // allow metadata class to preprocess\n  FNMetaImpl = FNMetaImpl || Metadata;\n  if (isFunction(FNMetaImpl.preprocessClassInfo)) {\n    oClassInfo = FNMetaImpl.preprocessClassInfo(oClassInfo);\n  }\n\n  // normalize oClassInfo\n  oClassInfo = oClassInfo || {};\n  oClassInfo.metadata = oClassInfo.metadata || {};\n  if (!oClassInfo.hasOwnProperty('constructor')) {\n    oClassInfo.constructor = undefined;\n  }\n  var fnClass = oClassInfo.constructor;\n  assert(!fnClass || isFunction(fnClass));\n\n  // ensure defaults\n  if (fnBaseClass) {\n    // default constructor just delegates to base class\n    if (!fnClass) {\n      if (oClassInfo.metadata.deprecated) {\n        // create default factory with deprecation warning\n        fnClass = function () {\n          Log.warning(\"Usage of deprecated class: \" + sClassName);\n          fnBaseClass.apply(this, arguments);\n        };\n      } else {\n        // create default factory\n        fnClass = function () {\n          fnBaseClass.apply(this, arguments);\n        };\n      }\n    }\n    // create prototype chain\n    fnClass.prototype = Object.create(fnBaseClass.prototype);\n    fnClass.prototype.constructor = fnClass;\n    // enforce correct baseType\n    oClassInfo.metadata.baseType = fnBaseClass;\n  } else {\n    // default constructor does nothing\n    fnClass = fnClass || function () {};\n    // enforce correct baseType\n    delete oClassInfo.metadata.baseType;\n  }\n  oClassInfo.constructor = fnClass;\n\n  // make the class visible as JS Object\n  ObjectPath.set(sClassName, fnClass);\n\n  // add metadata\n  var oMetadata = new FNMetaImpl(sClassName, oClassInfo);\n  fnClass.getMetadata = fnClass.prototype.getMetadata = function () {\n    return oMetadata;\n  };\n\n  // enrich function\n  if (!fnClass.getMetadata().isFinal()) {\n    fnClass.extend = function (sSCName, oSCClassInfo, fnSCMetaImpl) {\n      return Metadata.createClass(fnClass, sSCName, oSCClassInfo, fnSCMetaImpl || FNMetaImpl);\n    };\n  }\n  return fnClass;\n};\nexport default Metadata;","map":{"version":3,"names":["ObjectPath","assert","Log","uniqueSort","isFunction","obj","Metadata","sClassName","oClassInfo","metadata","constructor","get","__version","Error","_sClassName","_oClass","extend","prototype","applySettings","afterApplySettings","that","oStaticInfo","oPrototype","baseType","oParentClass","getMetadata","TypeError","fatal","_oParent","getClass","undefined","_bAbstract","_bFinal","_sStereotype","stereotype","_bDeprecated","_aInterfaces","interfaces","_aPublicMethods","publicMethods","_bInterfacesUnique","n","match","push","_aAllPublicMethods","concat","getStereotype","getName","getParent","_dedupInterfaces","getPublicMethods","getAllPublicMethods","getInterfaces","isInstanceOf","sInterface","a","i","l","length","Object","defineProperty","result","create","_mImplementedTypes","aInterfaces","value","freeze","writable","configurable","isA","vTypeName","mTypes","Array","isArray","isAbstract","isFinal","isDeprecated","addPublicMethods","sMethod","aNames","arguments","apply","createClass","fnBaseClass","FNMetaImpl","preprocessClassInfo","hasOwnProperty","fnClass","deprecated","warning","set","oMetadata","sSCName","oSCClassInfo","fnSCMetaImpl"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-localization/dist/sap/ui/base/Metadata.js"],"sourcesContent":["/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n// Provides class sap.ui.base.Metadata\nimport ObjectPath from \"../../base/util/ObjectPath.js\";\nimport assert from \"../../base/assert.js\";\nimport Log from \"../../base/Log.js\";\nimport uniqueSort from \"../../base/util/array/uniqueSort.js\";\nfunction isFunction(obj) {\n  return typeof obj === \"function\";\n}\n\n/**\n * Creates a new metadata object from the given static infos.\n *\n * <b>Note:</b> Throughout this class documentation, the described subclass of Object\n * is referenced as <i>the described class</i>.\n *\n * @param {string} sClassName Fully qualified name of the described class\n * @param {object} oClassInfo Info to construct the class and its metadata from\n * @param {sap.ui.base.Object.MetadataOptions} [oClassInfo.metadata]\n *  The metadata object describing the class\n *\n * @class Metadata for a class.\n * @author Frank Weigel\n * @version 1.120.17\n * @since 0.8.6\n * @public\n * @alias sap.ui.base.Metadata\n */\nvar Metadata = function (sClassName, oClassInfo) {\n  assert(typeof sClassName === \"string\" && sClassName, \"Metadata: sClassName must be a non-empty string\");\n  assert(typeof oClassInfo === \"object\", \"Metadata: oClassInfo must be empty or an object\");\n\n  // support for old usage of Metadata\n  if (!oClassInfo || typeof oClassInfo.metadata !== \"object\") {\n    oClassInfo = {\n      metadata: oClassInfo || {},\n      // retrieve class by its name. Using a lookup costs time but avoids the need for redundant arguments to this function\n      constructor: ObjectPath.get(sClassName) // legacy-relevant, code path not used by extend call\n    };\n    oClassInfo.metadata.__version = 1.0;\n  }\n  oClassInfo.metadata.__version = oClassInfo.metadata.__version || 2.0;\n  if (!isFunction(oClassInfo.constructor)) {\n    throw Error(\"constructor for class \" + sClassName + \" must have been declared before creating metadata for it\");\n  }\n\n  // invariant: oClassInfo exists, oClassInfo.metadata exists, oClassInfo.constructor exists\n  this._sClassName = sClassName;\n  this._oClass = oClassInfo.constructor;\n  this.extend(oClassInfo);\n};\n\n/**\n * @private\n * @final\n */\nMetadata.prototype.extend = function (oClassInfo) {\n  this.applySettings(oClassInfo);\n  this.afterApplySettings();\n};\n\n/**\n * @private\n * @since 1.3.1\n */\nMetadata.prototype.applySettings = function (oClassInfo) {\n  var that = this,\n    oStaticInfo = oClassInfo.metadata,\n    oPrototype;\n  if (oStaticInfo.baseType) {\n    var oParentClass;\n    if (isFunction(oStaticInfo.baseType)) {\n      oParentClass = oStaticInfo.baseType;\n      if (!isFunction(oParentClass.getMetadata)) {\n        throw new TypeError(\"baseType must be a UI5 class with a static getMetadata function\");\n      }\n    } else {\n      // lookup base class by its name - same reasoning as above\n      oParentClass = ObjectPath.get(oStaticInfo.baseType); // legacy-relevant, code path not used by extend call\n      if (!isFunction(oParentClass)) {\n        Log.fatal(\"base class '\" + oStaticInfo.baseType + \"' does not exist\");\n      }\n    }\n    // link metadata with base metadata\n    if (oParentClass.getMetadata) {\n      this._oParent = oParentClass.getMetadata();\n      assert(oParentClass === oParentClass.getMetadata().getClass(), \"Metadata: oParentClass must match the class in the parent metadata\");\n    } else {\n      // fallback, if base class has no metadata - can only happen if baseType is a string\n      this._oParent = new Metadata(oStaticInfo.baseType, {});\n    }\n  } else {\n    this._oParent = undefined;\n  }\n  this._bAbstract = !!oStaticInfo[\"abstract\"];\n  this._bFinal = !!oStaticInfo[\"final\"];\n  this._sStereotype = oStaticInfo.stereotype || (this._oParent ? this._oParent._sStereotype : \"object\");\n  this._bDeprecated = !!oStaticInfo[\"deprecated\"];\n\n  // handle interfaces\n  this._aInterfaces = oStaticInfo.interfaces || [];\n\n  // take over metadata from static info\n  this._aPublicMethods = oStaticInfo.publicMethods || [];\n\n  // interfaces info possibly not unique\n  this._bInterfacesUnique = false;\n\n  // enrich prototype\n  oPrototype = this._oClass.prototype;\n  for (var n in oClassInfo) {\n    if (n !== \"metadata\" && n !== \"constructor\") {\n      oPrototype[n] = oClassInfo[n];\n      if (!n.match(/^_|^on|^init$|^exit$/)) {\n        // TODO hard coded knowledge about event handlers (\"on\") and about init/exit hooks is not nice....\n        that._aPublicMethods.push(n);\n      }\n    }\n  }\n};\n\n/**\n * Called after new settings have been applied.\n *\n * Typically, this method is used to do some cleanup (e.g. uniqueness)\n * or to calculate an optimized version of some data.\n * @private\n * @since 1.3.1\n */\nMetadata.prototype.afterApplySettings = function () {\n  // create the flattened \"all\" view\n  if (this._oParent) {\n    this._aAllPublicMethods = this._oParent._aAllPublicMethods.concat(this._aPublicMethods);\n    this._bInterfacesUnique = false;\n  } else {\n    this._aAllPublicMethods = this._aPublicMethods;\n  }\n};\n\n/**\n * Stereotype of the described class.\n *\n * @experimental might be enhanced to a set of stereotypes\n * @private\n * @ui5-restricted\n */\nMetadata.prototype.getStereotype = function () {\n  return this._sStereotype;\n};\n\n/**\n * Returns the fully qualified name of the described class\n * @return {string} name of the described class\n * @public\n */\nMetadata.prototype.getName = function () {\n  return this._sClassName;\n};\n\n/**\n * Returns the (constructor of the) described class\n * @return {function(new:sap.ui.base.Object)} class described by this metadata\n * @public\n */\nMetadata.prototype.getClass = function () {\n  return this._oClass;\n};\n\n/**\n * Returns the metadata object of the base class of the described class\n * or undefined if the class has no (documented) base class.\n *\n * @return {sap.ui.base.Metadata | undefined} metadata of the base class\n * @public\n */\nMetadata.prototype.getParent = function () {\n  return this._oParent;\n};\n\n/**\n * Removes duplicate names in place from the interfaces and public methods members of this metadata object.\n *\n * @private\n */\nMetadata.prototype._dedupInterfaces = function () {\n  if (!this._bInterfacesUnique) {\n    uniqueSort(this._aInterfaces);\n    uniqueSort(this._aPublicMethods);\n    uniqueSort(this._aAllPublicMethods);\n    this._bInterfacesUnique = true;\n  }\n};\n\n/**\n * Returns an array with the names of the public methods declared by the described class, methods of\n * ancestors are not listed.\n *\n * @return {string[]} array with names of public methods declared by the described class\n * @deprecated As of 1.58, this method should not be used for productive code. The accuracy of the returned\n *       information highly depends on the concrete class and is not actively monitored. There might be\n *       more public methods or some of the returned methods might not really be intended for public use.\n *       In general, pure visibility information should not be exposed in runtime metadata but be part of the\n *       documentation.\n *       Subclasses of <code>sap.ui.base.Object</code> might decide to provide runtime metadata describing\n *       their public API, but this then should not be backed by this method.\n *       See {@link sap.ui.core.mvc.ControllerMetadata#getAllMethods} for an example.\n * @public\n */\nMetadata.prototype.getPublicMethods = function () {\n  this._dedupInterfaces();\n  return this._aPublicMethods;\n};\n\n/**\n * Returns an array with the names of all public methods declared by the described class\n * and all its ancestors classes.\n *\n * @return {string[]} array with names of all public methods provided by the described class and its ancestors\n * @deprecated As of 1.58, this method should not be used for productive code. The accuracy of the returned\n *       information highly depends on the concrete class and is not actively monitored. There might be\n *       more public methods or some of the returned methods might not really be intended for public use.\n *       In general, pure visibility information should not be exposed in runtime metadata but be part of the\n *       documentation.\n *       Subclasses of <code>sap.ui.base.Object</code> might decide to provide runtime metadata describing\n *       their public API, but this then should not be backed by this method.\n *       See {@link sap.ui.core.mvc.ControllerMetadata#getAllMethods} for an example.\n * @public\n */\nMetadata.prototype.getAllPublicMethods = function () {\n  this._dedupInterfaces();\n  return this._aAllPublicMethods;\n};\n\n/**\n * Returns the names of interfaces implemented by the described class.\n * As the representation of interfaces is not clear yet, this method is still private.\n *\n * @return {string} array of names of implemented interfaces\n * @private\n */\nMetadata.prototype.getInterfaces = function () {\n  this._dedupInterfaces();\n  return this._aInterfaces;\n};\n\n/**\n * Checks whether the described class or one of its ancestor classes implements the given interface.\n *\n * @param {string} sInterface name of the interface to test for (in dot notation)\n * @return {boolean} whether this class implements the interface\n * @public\n */\nMetadata.prototype.isInstanceOf = function (sInterface) {\n  if (this._oParent) {\n    if (this._oParent.isInstanceOf(sInterface)) {\n      return true;\n    }\n  }\n  var a = this._aInterfaces;\n  for (var i = 0, l = a.length; i < l; i++) {\n    // FIXME doesn't handle interface inheritance (requires object representation for interfaces)\n    if (a[i] === sInterface) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n * Lazy calculation of the set of implemented types.\n *\n * A calculation function is configured as getter for the <code>_mImplementedTypes</code>\n * on the prototype object. On first call for a metadata instance, it collects\n * the implemented types (classes, interfaces) from the described class and\n * any base classes and writes it to the property <code>_mImplementedTypes</code> of the\n * current instance of metadata. Future read access to the property will immediately\n * return the instance property and not call the calculation function again.\n */\nObject.defineProperty(Metadata.prototype, \"_mImplementedTypes\", {\n  get: function () {\n    if (this === Metadata.prototype) {\n      throw new Error(\"sap.ui.base.Metadata: The '_mImplementedTypes' property must not be accessed on the prototype\");\n    }\n\n    // create map of types, including inherited types\n    // Note: to save processing time and memory, the inherited types are merged via the prototype chain of 'result'\n    var result = Object.create(this._oParent ? this._oParent._mImplementedTypes : null);\n    /*\n     * Flat alternative:\n     * var result = Object.create(null);\n     * if ( this._oParent ) {\n     *   Object.assign(result, this._oParent._mImplementedTypes);\n     * }\n     */\n\n    // add own class\n    result[this._sClassName] = true;\n\n    // additionally collect interfaces\n    var aInterfaces = this._aInterfaces,\n      i = aInterfaces.length;\n    while (i-- > 0) {\n      if (!result[aInterfaces[i]]) {\n        // take care to write property only if it hasn't been set already\n        result[aInterfaces[i]] = true;\n      }\n    }\n\n    // write instance property, hiding the getter on the prototype\n    Object.defineProperty(this, \"_mImplementedTypes\", {\n      value: Object.freeze(result),\n      writable: false,\n      configurable: false\n    });\n    return result;\n  },\n  configurable: true\n});\n\n/**\n * Checks whether the class described by this metadata object is of the named type.\n *\n * This check is solely based on the type names as declared in the class metadata.\n * It compares the given <code>vTypeName</code> with the name of this class, with the\n * names of any base class of this class and with the names of all interfaces\n * implemented by any of the aforementioned classes.\n *\n * Instead of a single type name, an array of type names can be given and the method\n * will check if this class is of any of the listed types (logical or).\n *\n * Should the UI5 class system in future implement additional means of associating classes\n * with type names (e.g. by introducing mixins), then this method might detect matches\n * for those names as well.\n *\n * @param {string|string[]} vTypeName Type or types to check for\n * @returns {boolean} Whether this class is of the given type or of any of the given types\n * @public\n * @since 1.56\n */\nMetadata.prototype.isA = function (vTypeName) {\n  var mTypes = this._mImplementedTypes;\n  if (Array.isArray(vTypeName)) {\n    for (var i = 0; i < vTypeName.length; i++) {\n      if (vTypeName[i] in mTypes) {\n        return true;\n      }\n    }\n    return false;\n  }\n  // Note: the check with 'in' also finds inherited types via the prototype chain of mTypes\n  return vTypeName in mTypes;\n};\n\n/**\n * Returns whether the described class is abstract\n * @return {boolean} whether the class is abstract\n * @public\n */\nMetadata.prototype.isAbstract = function () {\n  return this._bAbstract;\n};\n\n/**\n * Returns whether the described class is final\n * @return {boolean} whether the class is final\n * @public\n */\nMetadata.prototype.isFinal = function () {\n  return this._bFinal;\n};\n\n/**\n * Whether the described class is deprecated and should not be used any more\n *\n * @return {boolean} whether the class is considered deprecated\n * @public\n * @since 1.26.4\n */\nMetadata.prototype.isDeprecated = function () {\n  return this._bDeprecated;\n};\n\n/**\n * Adds one or more new methods to the list of API methods.\n *\n * Can be used by contributer classes (like the EnabledPropagator) to enrich the declared set of methods.\n * The method can either be called with multiple names (strings) or with one array of strings.\n *\n * <b>Note</b>: the newly added method(s) will only be visible in {@link sap.ui.base.Interface interface}\n * objects that are created <i>after</i> this method has been called.\n *\n * @param {string|string[]} sMethod name(s) of the new method(s)\n */\nMetadata.prototype.addPublicMethods = function (sMethod /* ... */) {\n  var aNames = sMethod instanceof Array ? sMethod : arguments;\n  Array.prototype.push.apply(this._aPublicMethods, aNames);\n  Array.prototype.push.apply(this._aAllPublicMethods, aNames);\n  this._bInterfacesUnique = false;\n};\n\n/**\n * @since 1.3.1\n * @private\n */\nMetadata.createClass = function (fnBaseClass, sClassName, oClassInfo, FNMetaImpl) {\n  if (typeof fnBaseClass === \"string\") {\n    FNMetaImpl = oClassInfo;\n    oClassInfo = sClassName;\n    sClassName = fnBaseClass;\n    fnBaseClass = null;\n  }\n  assert(!fnBaseClass || isFunction(fnBaseClass));\n  assert(typeof sClassName === \"string\" && !!sClassName);\n  assert(!oClassInfo || typeof oClassInfo === \"object\");\n  assert(!FNMetaImpl || isFunction(FNMetaImpl));\n\n  // allow metadata class to preprocess\n  FNMetaImpl = FNMetaImpl || Metadata;\n  if (isFunction(FNMetaImpl.preprocessClassInfo)) {\n    oClassInfo = FNMetaImpl.preprocessClassInfo(oClassInfo);\n  }\n\n  // normalize oClassInfo\n  oClassInfo = oClassInfo || {};\n  oClassInfo.metadata = oClassInfo.metadata || {};\n  if (!oClassInfo.hasOwnProperty('constructor')) {\n    oClassInfo.constructor = undefined;\n  }\n  var fnClass = oClassInfo.constructor;\n  assert(!fnClass || isFunction(fnClass));\n\n  // ensure defaults\n  if (fnBaseClass) {\n    // default constructor just delegates to base class\n    if (!fnClass) {\n      if (oClassInfo.metadata.deprecated) {\n        // create default factory with deprecation warning\n        fnClass = function () {\n          Log.warning(\"Usage of deprecated class: \" + sClassName);\n          fnBaseClass.apply(this, arguments);\n        };\n      } else {\n        // create default factory\n        fnClass = function () {\n          fnBaseClass.apply(this, arguments);\n        };\n      }\n    }\n    // create prototype chain\n    fnClass.prototype = Object.create(fnBaseClass.prototype);\n    fnClass.prototype.constructor = fnClass;\n    // enforce correct baseType\n    oClassInfo.metadata.baseType = fnBaseClass;\n  } else {\n    // default constructor does nothing\n    fnClass = fnClass || function () {};\n    // enforce correct baseType\n    delete oClassInfo.metadata.baseType;\n  }\n  oClassInfo.constructor = fnClass;\n\n  // make the class visible as JS Object\n  ObjectPath.set(sClassName, fnClass);\n\n  // add metadata\n  var oMetadata = new FNMetaImpl(sClassName, oClassInfo);\n  fnClass.getMetadata = fnClass.prototype.getMetadata = function () {\n    return oMetadata;\n  };\n\n  // enrich function\n  if (!fnClass.getMetadata().isFinal()) {\n    fnClass.extend = function (sSCName, oSCClassInfo, fnSCMetaImpl) {\n      return Metadata.createClass(fnClass, sSCName, oSCClassInfo, fnSCMetaImpl || FNMetaImpl);\n    };\n  }\n  return fnClass;\n};\nexport default Metadata;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}