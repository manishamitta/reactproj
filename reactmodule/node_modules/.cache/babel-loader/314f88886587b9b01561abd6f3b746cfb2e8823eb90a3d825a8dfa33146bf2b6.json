{"ast":null,"code":"\"use strict\";\n\nclass i {\n  constructor() {\n    this._eventRegistry = new Map();\n  }\n  attachEvent(t, r) {\n    const n = this._eventRegistry,\n      e = n.get(t);\n    if (!Array.isArray(e)) {\n      n.set(t, [r]);\n      return;\n    }\n    e.includes(r) || e.push(r);\n  }\n  detachEvent(t, r) {\n    const n = this._eventRegistry,\n      e = n.get(t);\n    if (!e) return;\n    const s = e.indexOf(r);\n    s !== -1 && e.splice(s, 1), e.length === 0 && n.delete(t);\n  }\n  fireEvent(t, r) {\n    const e = this._eventRegistry.get(t);\n    return e ? e.map(s => s.call(this, r)) : [];\n  }\n  fireEventAsync(t, r) {\n    return Promise.all(this.fireEvent(t, r));\n  }\n  isHandlerAttached(t, r) {\n    const e = this._eventRegistry.get(t);\n    return e ? e.includes(r) : !1;\n  }\n  hasListeners(t) {\n    return !!this._eventRegistry.get(t);\n  }\n}\nexport default i;","map":{"version":3,"names":["i","constructor","_eventRegistry","Map","attachEvent","t","r","n","e","get","Array","isArray","set","includes","push","detachEvent","s","indexOf","splice","length","delete","fireEvent","map","call","fireEventAsync","Promise","all","isHandlerAttached","hasListeners"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-base/src/EventProvider.ts"],"sourcesContent":["class EventProvider<EventListenerParam, EventListenerReturn> {\n\t_eventRegistry: Map<string, Array<(param: EventListenerParam) => EventListenerReturn>>;\n\n\tconstructor() {\n\t\tthis._eventRegistry = new Map();\n\t}\n\n\tattachEvent(eventName: string, fnFunction: (param: EventListenerParam) => EventListenerReturn) {\n\t\tconst eventRegistry = this._eventRegistry;\n\t\tconst eventListeners = eventRegistry.get(eventName);\n\n\t\tif (!Array.isArray(eventListeners)) {\n\t\t\teventRegistry.set(eventName, [fnFunction]);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!eventListeners.includes(fnFunction)) {\n\t\t\teventListeners.push(fnFunction);\n\t\t}\n\t}\n\n\tdetachEvent(eventName: string, fnFunction: (param: EventListenerParam) => EventListenerReturn) {\n\t\tconst eventRegistry = this._eventRegistry;\n\t\tconst eventListeners = eventRegistry.get(eventName);\n\n\t\tif (!eventListeners) {\n\t\t\treturn;\n\t\t}\n\t\tconst indexOfFnToDetach = eventListeners.indexOf(fnFunction);\n\n\t\tif (indexOfFnToDetach !== -1) {\n\t\t\teventListeners.splice(indexOfFnToDetach, 1);\n\t\t}\n\n\t\tif (eventListeners.length === 0) {\n\t\t\teventRegistry.delete(eventName);\n\t\t}\n\t}\n\n\t/**\n\t * Fires an event and returns the results of all event listeners as an array.\n\t *\n\t * @param eventName the event to fire\n\t * @param data optional data to pass to each event listener\n\t * @returns {Array} an array with the results of all event listeners\n\t */\n\tfireEvent(eventName: string, data: EventListenerParam) {\n\t\tconst eventRegistry = this._eventRegistry;\n\t\tconst eventListeners = eventRegistry.get(eventName);\n\n\t\tif (!eventListeners) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn eventListeners.map(fn => {\n\t\t\treturn fn.call(this, data);\n\t\t});\n\t}\n\n\t/**\n\t * Fires an event and returns a promise that will resolve once all listeners have resolved.\n\t *\n\t * @param eventName the event to fire\n\t * @param data optional data to pass to each event listener\n\t * @returns {Promise} a promise that will resolve when all listeners have resolved\n\t */\n\tfireEventAsync(eventName: string, data: EventListenerParam) {\n\t\treturn Promise.all(this.fireEvent(eventName, data));\n\t}\n\n\tisHandlerAttached(eventName: string, fnFunction: (param: EventListenerParam) => EventListenerReturn) {\n\t\tconst eventRegistry = this._eventRegistry;\n\t\tconst eventListeners = eventRegistry.get(eventName);\n\n\t\tif (!eventListeners) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn eventListeners.includes(fnFunction);\n\t}\n\n\thasListeners(eventName: string) {\n\t\treturn !!this._eventRegistry.get(eventName);\n\t}\n}\n\nexport default EventProvider;\n"],"mappings":";;AAAA,MAAMA,CAAuD;EAG5DC,YAAA,EAAc;IACb,KAAKC,cAAA,GAAiB,IAAIC,GAC3B,CAD2B,CAC3B;EAAA;EAEAC,YAAYC,CAAA,EAAmBC,CAAA,EAAgE;IAC9F,MAAMC,CAAA,GAAgB,KAAKL,cAAA;MACrBM,CAAA,GAAiBD,CAAA,CAAcE,GAAA,CAAIJ,CAAS;IAElD,IAAI,CAACK,KAAA,CAAMC,OAAA,CAAQH,CAAc,GAAG;MACnCD,CAAA,CAAcK,GAAA,CAAIP,CAAA,EAAW,CAACC,CAAU,CAAC;MACzC;IACD;IAEKE,CAAA,CAAeK,QAAA,CAASP,CAAU,KACtCE,CAAA,CAAeM,IAAA,CAAKR,CAAU,CAEhC;EAAA;EAEAS,YAAYV,CAAA,EAAmBC,CAAA,EAAgE;IAC9F,MAAMC,CAAA,GAAgB,KAAKL,cAAA;MACrBM,CAAA,GAAiBD,CAAA,CAAcE,GAAA,CAAIJ,CAAS;IAElD,IAAI,CAACG,CAAA,EACJ;IAED,MAAMQ,CAAA,GAAoBR,CAAA,CAAeS,OAAA,CAAQX,CAAU;IAEvDU,CAAA,KAAsB,MACzBR,CAAA,CAAeU,MAAA,CAAOF,CAAA,EAAmB,CAAC,GAGvCR,CAAA,CAAeW,MAAA,KAAW,KAC7BZ,CAAA,CAAca,MAAA,CAAOf,CAAS,CAEhC;EAAA;EASAgB,UAAUhB,CAAA,EAAmBC,CAAA,EAA0B;IAEtD,MAAME,CAAA,GADgB,KAAKN,cAAA,CACUO,GAAA,CAAIJ,CAAS;IAElD,OAAKG,CAAA,GAIEA,CAAA,CAAec,GAAA,CAAIN,CAAA,IAClBA,CAAA,CAAGO,IAAA,CAAK,MAAMjB,CAAI,CACzB,IALO,EAMT;EAAA;EASAkB,eAAenB,CAAA,EAAmBC,CAAA,EAA0B;IAC3D,OAAOmB,OAAA,CAAQC,GAAA,CAAI,KAAKL,SAAA,CAAUhB,CAAA,EAAWC,CAAI,CAAC,CACnD;EAAA;EAEAqB,kBAAkBtB,CAAA,EAAmBC,CAAA,EAAgE;IAEpG,MAAME,CAAA,GADgB,KAAKN,cAAA,CACUO,GAAA,CAAIJ,CAAS;IAElD,OAAKG,CAAA,GAIEA,CAAA,CAAeK,QAAA,CAASP,CAAU,IAHjC,EAIT;EAAA;EAEAsB,aAAavB,CAAA,EAAmB;IAC/B,OAAO,CAAC,CAAC,KAAKH,cAAA,CAAeO,GAAA,CAAIJ,CAAS,CAC3C;EAAA;AACD;AAEA,eAAeL,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}