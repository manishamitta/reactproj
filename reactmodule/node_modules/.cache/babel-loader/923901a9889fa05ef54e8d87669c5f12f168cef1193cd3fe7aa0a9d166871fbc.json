{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridRowCountSelector, gridRowsLookupSelector, gridRowTreeSelector, gridRowGroupingNameSelector, gridRowTreeDepthsSelector, gridDataRowIdsSelector, gridRowsDataRowIdToIdLookupSelector, gridRowMaximumTreeDepthSelector, gridRowGroupsToFetchSelector } from \"./gridRowsSelector.js\";\nimport { useTimeout } from \"../../utils/useTimeout.js\";\nimport { GridSignature, useGridApiEventHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { useGridVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { gridSortedRowIdsSelector } from \"../sorting/gridSortingSelector.js\";\nimport { gridFilteredRowsLookupSelector } from \"../filter/gridFilterSelector.js\";\nimport { getTreeNodeDescendants, createRowsInternalCache, getRowsStateFromCache, isAutogeneratedRowNode, GRID_ROOT_GROUP_ID, GRID_ID_AUTOGENERATED, updateCacheWithNewRows, getTopLevelRowCount, getRowIdFromRowModel, computeRowsUpdates } from \"./gridRowsUtils.js\";\nimport { useGridRegisterPipeApplier } from \"../../core/pipeProcessing/index.js\";\nexport const rowsStateInitializer = (state, props, apiRef) => {\n  const isDataSourceAvailable = !!props.unstable_dataSource;\n  apiRef.current.caches.rows = createRowsInternalCache({\n    rows: isDataSourceAvailable ? [] : props.rows,\n    getRowId: props.getRowId,\n    loading: props.loading,\n    rowCount: props.rowCount\n  });\n  return _extends({}, state, {\n    rows: getRowsStateFromCache({\n      apiRef,\n      rowCountProp: props.rowCount,\n      loadingProp: isDataSourceAvailable ? true : props.loading,\n      previousTree: null,\n      previousTreeDepths: null\n    })\n  });\n};\nexport const useGridRows = (apiRef, props) => {\n  if (process.env.NODE_ENV !== 'production') {\n    try {\n      // Freeze the `rows` prop so developers have a fast failure if they try to use Array.prototype.push().\n      Object.freeze(props.rows);\n    } catch (error) {\n      // Sometimes, it's impossible to freeze, so we give up on it.\n    }\n  }\n  const logger = useGridLogger(apiRef, 'useGridRows');\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const lastUpdateMs = React.useRef(Date.now());\n  const lastRowCount = React.useRef(props.rowCount);\n  const timeout = useTimeout();\n  const getRow = React.useCallback(id => {\n    const model = gridRowsLookupSelector(apiRef)[id];\n    if (model) {\n      return model;\n    }\n    const node = apiRef.current.getRowNode(id);\n    if (node && isAutogeneratedRowNode(node)) {\n      return {\n        [GRID_ID_AUTOGENERATED]: id\n      };\n    }\n    return null;\n  }, [apiRef]);\n  const getRowIdProp = props.getRowId;\n  const getRowId = React.useCallback(row => {\n    if (GRID_ID_AUTOGENERATED in row) {\n      return row[GRID_ID_AUTOGENERATED];\n    }\n    if (getRowIdProp) {\n      return getRowIdProp(row);\n    }\n    return row.id;\n  }, [getRowIdProp]);\n  const lookup = React.useMemo(() => currentPage.rows.reduce((acc, _ref, index) => {\n    let {\n      id\n    } = _ref;\n    acc[id] = index;\n    return acc;\n  }, {}), [currentPage.rows]);\n  const throttledRowsChange = React.useCallback(_ref2 => {\n    let {\n      cache,\n      throttle\n    } = _ref2;\n    const run = () => {\n      lastUpdateMs.current = Date.now();\n      apiRef.current.setState(state => _extends({}, state, {\n        rows: getRowsStateFromCache({\n          apiRef,\n          rowCountProp: props.rowCount,\n          loadingProp: props.loading,\n          previousTree: gridRowTreeSelector(apiRef),\n          previousTreeDepths: gridRowTreeDepthsSelector(apiRef),\n          previousGroupsToFetch: gridRowGroupsToFetchSelector(apiRef)\n        })\n      }));\n      apiRef.current.publishEvent('rowsSet');\n      apiRef.current.forceUpdate();\n    };\n    timeout.clear();\n    apiRef.current.caches.rows = cache;\n    if (!throttle) {\n      run();\n      return;\n    }\n    const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);\n    if (throttleRemainingTimeMs > 0) {\n      timeout.start(throttleRemainingTimeMs, run);\n      return;\n    }\n    run();\n  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef, timeout]);\n\n  /**\n   * API METHODS\n   */\n  const setRows = React.useCallback(rows => {\n    logger.debug(`Updating all rows, new length ${rows.length}`);\n    const cache = createRowsInternalCache({\n      rows,\n      getRowId: props.getRowId,\n      loading: props.loading,\n      rowCount: props.rowCount\n    });\n    const prevCache = apiRef.current.caches.rows;\n    cache.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [logger, props.getRowId, props.loading, props.rowCount, throttledRowsChange, apiRef]);\n  const updateRows = React.useCallback(updates => {\n    if (props.signature === GridSignature.DataGrid && updates.length > 1) {\n      throw new Error(['MUI X: You cannot update several rows at once in `apiRef.current.updateRows` on the DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    const nonPinnedRowsUpdates = computeRowsUpdates(apiRef, updates, props.getRowId);\n    const cache = updateCacheWithNewRows({\n      updates: nonPinnedRowsUpdates,\n      getRowId: props.getRowId,\n      previousCache: apiRef.current.caches.rows\n    });\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);\n  const updateServerRows = React.useCallback((updates, groupKeys) => {\n    const nonPinnedRowsUpdates = computeRowsUpdates(apiRef, updates, props.getRowId);\n    const cache = updateCacheWithNewRows({\n      updates: nonPinnedRowsUpdates,\n      getRowId: props.getRowId,\n      previousCache: apiRef.current.caches.rows,\n      groupKeys: groupKeys ?? []\n    });\n    throttledRowsChange({\n      cache,\n      throttle: false\n    });\n  }, [props.getRowId, throttledRowsChange, apiRef]);\n  const setLoading = React.useCallback(loading => {\n    if (loading === props.loading) {\n      return;\n    }\n    logger.debug(`Setting loading to ${loading}`);\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, {\n        loading\n      })\n    }));\n    apiRef.current.caches.rows.loadingPropBeforePartialUpdates = loading;\n  }, [props.loading, apiRef, logger]);\n  const getRowModels = React.useCallback(() => {\n    const dataRows = gridDataRowIdsSelector(apiRef);\n    const idRowsLookup = gridRowsLookupSelector(apiRef);\n    return new Map(dataRows.map(id => [id, idRowsLookup[id] ?? {}]));\n  }, [apiRef]);\n  const getRowsCount = React.useCallback(() => gridRowCountSelector(apiRef), [apiRef]);\n  const getAllRowIds = React.useCallback(() => gridDataRowIdsSelector(apiRef), [apiRef]);\n  const getRowIndexRelativeToVisibleRows = React.useCallback(id => lookup[id], [lookup]);\n  const setRowChildrenExpansion = React.useCallback((id, isExpanded) => {\n    const currentNode = apiRef.current.getRowNode(id);\n    if (!currentNode) {\n      throw new Error(`MUI X: No row with id #${id} found.`);\n    }\n    if (currentNode.type !== 'group') {\n      throw new Error('MUI X: Only group nodes can be expanded or collapsed.');\n    }\n    const newNode = _extends({}, currentNode, {\n      childrenExpanded: isExpanded\n    });\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [id]: newNode\n          })\n        })\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('rowExpansionChange', newNode);\n  }, [apiRef]);\n  const getRowNode = React.useCallback(id => gridRowTreeSelector(apiRef)[id] ?? null, [apiRef]);\n  const getRowGroupChildren = React.useCallback(_ref3 => {\n    let {\n      skipAutoGeneratedRows = true,\n      groupId,\n      applySorting,\n      applyFiltering\n    } = _ref3;\n    const tree = gridRowTreeSelector(apiRef);\n    let children;\n    if (applySorting) {\n      const groupNode = tree[groupId];\n      if (!groupNode) {\n        return [];\n      }\n      const sortedRowIds = gridSortedRowIdsSelector(apiRef);\n      children = [];\n      const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\n      for (let index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {\n        const id = sortedRowIds[index];\n        if (!skipAutoGeneratedRows || !isAutogeneratedRowNode(tree[id])) {\n          children.push(id);\n        }\n      }\n    } else {\n      children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows);\n    }\n    if (applyFiltering) {\n      const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n      children = children.filter(childId => filteredRowsLookup[childId] !== false);\n    }\n    return children;\n  }, [apiRef]);\n  const setRowIndex = React.useCallback((rowId, targetIndex) => {\n    const node = apiRef.current.getRowNode(rowId);\n    if (!node) {\n      throw new Error(`MUI X: No row with id #${rowId} found.`);\n    }\n    if (node.parent !== GRID_ROOT_GROUP_ID) {\n      throw new Error(`MUI X: The row reordering do not support reordering of grouped rows yet.`);\n    }\n    if (node.type !== 'leaf') {\n      throw new Error(`MUI X: The row reordering do not support reordering of footer or grouping rows.`);\n    }\n    apiRef.current.setState(state => {\n      const group = gridRowTreeSelector(state, apiRef.current.instanceId)[GRID_ROOT_GROUP_ID];\n      const allRows = group.children;\n      const oldIndex = allRows.findIndex(row => row === rowId);\n      if (oldIndex === -1 || oldIndex === targetIndex) {\n        return state;\n      }\n      logger.debug(`Moving row ${rowId} to index ${targetIndex}`);\n      const updatedRows = [...allRows];\n      updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [GRID_ROOT_GROUP_ID]: _extends({}, group, {\n              children: updatedRows\n            })\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, logger]);\n  const replaceRows = React.useCallback((firstRowToRender, newRows) => {\n    if (props.signature === GridSignature.DataGrid && newRows.length > 1) {\n      throw new Error(['MUI X: You cannot replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    if (newRows.length === 0) {\n      return;\n    }\n    const treeDepth = gridRowMaximumTreeDepthSelector(apiRef);\n    if (treeDepth > 1) {\n      throw new Error('`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping');\n    }\n    const tree = _extends({}, gridRowTreeSelector(apiRef));\n    const dataRowIdToModelLookup = _extends({}, gridRowsLookupSelector(apiRef));\n    const dataRowIdToIdLookup = _extends({}, gridRowsDataRowIdToIdLookupSelector(apiRef));\n    const rootGroup = tree[GRID_ROOT_GROUP_ID];\n    const rootGroupChildren = [...rootGroup.children];\n    const seenIds = new Set();\n    for (let i = 0; i < newRows.length; i += 1) {\n      const rowModel = newRows[i];\n      const rowId = getRowIdFromRowModel(rowModel, props.getRowId, 'A row was provided without id when calling replaceRows().');\n      const [removedRowId] = rootGroupChildren.splice(firstRowToRender + i, 1, rowId);\n      if (!seenIds.has(removedRowId)) {\n        delete dataRowIdToModelLookup[removedRowId];\n        delete dataRowIdToIdLookup[removedRowId];\n        delete tree[removedRowId];\n      }\n      const rowTreeNodeConfig = {\n        id: rowId,\n        depth: 0,\n        parent: GRID_ROOT_GROUP_ID,\n        type: 'leaf',\n        groupingKey: null\n      };\n      dataRowIdToModelLookup[rowId] = rowModel;\n      dataRowIdToIdLookup[rowId] = rowId;\n      tree[rowId] = rowTreeNodeConfig;\n      seenIds.add(rowId);\n    }\n    tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {\n      children: rootGroupChildren\n    });\n\n    // Removes potential remaining skeleton rows from the dataRowIds.\n    const dataRowIds = rootGroupChildren.filter(childId => tree[childId]?.type === 'leaf');\n    apiRef.current.caches.rows.dataRowIdToModelLookup = dataRowIdToModelLookup;\n    apiRef.current.caches.rows.dataRowIdToIdLookup = dataRowIdToIdLookup;\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, {\n        dataRowIdToModelLookup,\n        dataRowIdToIdLookup,\n        dataRowIds,\n        tree\n      })\n    }));\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, props.signature, props.getRowId]);\n  const rowApi = {\n    getRow,\n    setLoading,\n    getRowId,\n    getRowModels,\n    getRowsCount,\n    getAllRowIds,\n    setRows,\n    updateRows,\n    getRowNode,\n    getRowIndexRelativeToVisibleRows,\n    unstable_replaceRows: replaceRows\n  };\n  const rowProApi = {\n    setRowIndex,\n    setRowChildrenExpansion,\n    getRowGroupChildren\n  };\n  const rowProPrivateApi = {\n    updateServerRows\n  };\n\n  /**\n   * EVENTS\n   */\n  const groupRows = React.useCallback(() => {\n    logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);\n    let cache;\n    if (apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows) {\n      // The `props.rows` did not change since the last row grouping\n      // We can use the current rows cache which contains the partial updates done recently.\n      cache = _extends({}, apiRef.current.caches.rows, {\n        updates: {\n          type: 'full',\n          rows: gridDataRowIdsSelector(apiRef)\n        }\n      });\n    } else {\n      // The `props.rows` has changed since the last row grouping\n      // We must use the new `props.rows` on the new grouping\n      // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render\n      cache = createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      });\n    }\n    throttledRowsChange({\n      cache,\n      throttle: false\n    });\n  }, [logger, apiRef, props.rows, props.getRowId, props.loading, props.rowCount, throttledRowsChange]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'rowTreeCreation') {\n      groupRows();\n    }\n  }, [groupRows]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.\n    // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.\n    if (apiRef.current.getActiveStrategy('rowTree') !== gridRowGroupingNameSelector(apiRef)) {\n      groupRows();\n    }\n  }, [apiRef, groupRows]);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridApiEventHandler(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);\n\n  /**\n   * APPLIERS\n   */\n  const applyHydrateRowsProcessor = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const response = apiRef.current.unstable_applyPipeProcessors('hydrateRows', {\n        tree: gridRowTreeSelector(state, apiRef.current.instanceId),\n        treeDepths: gridRowTreeDepthsSelector(state, apiRef.current.instanceId),\n        dataRowIds: gridDataRowIdsSelector(state, apiRef.current.instanceId),\n        dataRowIdToModelLookup: gridRowsLookupSelector(state, apiRef.current.instanceId),\n        dataRowIdToIdLookup: gridRowsDataRowIdToIdLookupSelector(state, apiRef.current.instanceId)\n      });\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, response, {\n          totalTopLevelRowCount: getTopLevelRowCount({\n            tree: response.tree,\n            rowCountProp: props.rowCount\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.rowCount]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateRows', applyHydrateRowsProcessor);\n  useGridApiMethod(apiRef, rowApi, 'public');\n  useGridApiMethod(apiRef, rowProApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n  useGridApiMethod(apiRef, rowProPrivateApi, 'private');\n\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    let isRowCountPropUpdated = false;\n    if (props.rowCount !== lastRowCount.current) {\n      isRowCountPropUpdated = true;\n      lastRowCount.current = props.rowCount;\n    }\n    const areNewRowsAlreadyInState = apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows;\n    const isNewLoadingAlreadyInState = apiRef.current.caches.rows.loadingPropBeforePartialUpdates === props.loading;\n    const isNewRowCountAlreadyInState = apiRef.current.caches.rows.rowCountPropBeforePartialUpdates === props.rowCount;\n\n    // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)\n    if (areNewRowsAlreadyInState) {\n      // If the loading prop has changed, we need to update its value in the state because it won't be done by `throttledRowsChange`\n      if (!isNewLoadingAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            loading: props.loading\n          })\n        }));\n        apiRef.current.caches.rows.loadingPropBeforePartialUpdates = props.loading;\n        apiRef.current.forceUpdate();\n      }\n      if (!isNewRowCountAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),\n            totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)\n          })\n        }));\n        apiRef.current.caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;\n        apiRef.current.forceUpdate();\n      }\n      if (!isRowCountPropUpdated) {\n        return;\n      }\n    }\n    logger.debug(`Updating all rows, new length ${props.rows?.length}`);\n    throttledRowsChange({\n      cache: createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      }),\n      throttle: false\n    });\n  }, [props.rows, props.rowCount, props.getRowId, props.loading, logger, throttledRowsChange, apiRef]);\n};","map":{"version":3,"names":["_extends","React","useGridApiMethod","useGridLogger","gridRowCountSelector","gridRowsLookupSelector","gridRowTreeSelector","gridRowGroupingNameSelector","gridRowTreeDepthsSelector","gridDataRowIdsSelector","gridRowsDataRowIdToIdLookupSelector","gridRowMaximumTreeDepthSelector","gridRowGroupsToFetchSelector","useTimeout","GridSignature","useGridApiEventHandler","useGridVisibleRows","gridSortedRowIdsSelector","gridFilteredRowsLookupSelector","getTreeNodeDescendants","createRowsInternalCache","getRowsStateFromCache","isAutogeneratedRowNode","GRID_ROOT_GROUP_ID","GRID_ID_AUTOGENERATED","updateCacheWithNewRows","getTopLevelRowCount","getRowIdFromRowModel","computeRowsUpdates","useGridRegisterPipeApplier","rowsStateInitializer","state","props","apiRef","isDataSourceAvailable","unstable_dataSource","current","caches","rows","getRowId","loading","rowCount","rowCountProp","loadingProp","previousTree","previousTreeDepths","useGridRows","process","env","NODE_ENV","Object","freeze","error","logger","currentPage","lastUpdateMs","useRef","Date","now","lastRowCount","timeout","getRow","useCallback","id","model","node","getRowNode","getRowIdProp","row","lookup","useMemo","reduce","acc","_ref","index","throttledRowsChange","_ref2","cache","throttle","run","setState","previousGroupsToFetch","publishEvent","forceUpdate","clear","throttleRemainingTimeMs","throttleRowsMs","start","setRows","debug","length","prevCache","rowsBeforePartialUpdates","updateRows","updates","signature","DataGrid","Error","join","nonPinnedRowsUpdates","previousCache","updateServerRows","groupKeys","setLoading","loadingPropBeforePartialUpdates","getRowModels","dataRows","idRowsLookup","Map","map","getRowsCount","getAllRowIds","getRowIndexRelativeToVisibleRows","setRowChildrenExpansion","isExpanded","currentNode","type","newNode","childrenExpanded","tree","getRowGroupChildren","_ref3","skipAutoGeneratedRows","groupId","applySorting","applyFiltering","children","groupNode","sortedRowIds","startIndex","findIndex","depth","push","filteredRowsLookup","filter","childId","setRowIndex","rowId","targetIndex","parent","group","instanceId","allRows","oldIndex","updatedRows","splice","replaceRows","firstRowToRender","newRows","treeDepth","dataRowIdToModelLookup","dataRowIdToIdLookup","rootGroup","rootGroupChildren","seenIds","Set","i","rowModel","removedRowId","has","rowTreeNodeConfig","groupingKey","add","dataRowIds","rowApi","unstable_replaceRows","rowProApi","rowProPrivateApi","groupRows","info","handleStrategyProcessorChange","methodName","handleStrategyActivityChange","getActiveStrategy","applyHydrateRowsProcessor","response","unstable_applyPipeProcessors","treeDepths","totalTopLevelRowCount","isFirstRender","useEffect","isRowCountPropUpdated","areNewRowsAlreadyInState","isNewLoadingAlreadyInState","isNewRowCountAlreadyInState","rowCountPropBeforePartialUpdates","totalRowCount","Math","max"],"sources":["/home/user/projects/reactproj/reactmodule/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRows.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridRowCountSelector, gridRowsLookupSelector, gridRowTreeSelector, gridRowGroupingNameSelector, gridRowTreeDepthsSelector, gridDataRowIdsSelector, gridRowsDataRowIdToIdLookupSelector, gridRowMaximumTreeDepthSelector, gridRowGroupsToFetchSelector } from \"./gridRowsSelector.js\";\nimport { useTimeout } from \"../../utils/useTimeout.js\";\nimport { GridSignature, useGridApiEventHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { useGridVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { gridSortedRowIdsSelector } from \"../sorting/gridSortingSelector.js\";\nimport { gridFilteredRowsLookupSelector } from \"../filter/gridFilterSelector.js\";\nimport { getTreeNodeDescendants, createRowsInternalCache, getRowsStateFromCache, isAutogeneratedRowNode, GRID_ROOT_GROUP_ID, GRID_ID_AUTOGENERATED, updateCacheWithNewRows, getTopLevelRowCount, getRowIdFromRowModel, computeRowsUpdates } from \"./gridRowsUtils.js\";\nimport { useGridRegisterPipeApplier } from \"../../core/pipeProcessing/index.js\";\nexport const rowsStateInitializer = (state, props, apiRef) => {\n  const isDataSourceAvailable = !!props.unstable_dataSource;\n  apiRef.current.caches.rows = createRowsInternalCache({\n    rows: isDataSourceAvailable ? [] : props.rows,\n    getRowId: props.getRowId,\n    loading: props.loading,\n    rowCount: props.rowCount\n  });\n  return _extends({}, state, {\n    rows: getRowsStateFromCache({\n      apiRef,\n      rowCountProp: props.rowCount,\n      loadingProp: isDataSourceAvailable ? true : props.loading,\n      previousTree: null,\n      previousTreeDepths: null\n    })\n  });\n};\nexport const useGridRows = (apiRef, props) => {\n  if (process.env.NODE_ENV !== 'production') {\n    try {\n      // Freeze the `rows` prop so developers have a fast failure if they try to use Array.prototype.push().\n      Object.freeze(props.rows);\n    } catch (error) {\n      // Sometimes, it's impossible to freeze, so we give up on it.\n    }\n  }\n  const logger = useGridLogger(apiRef, 'useGridRows');\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const lastUpdateMs = React.useRef(Date.now());\n  const lastRowCount = React.useRef(props.rowCount);\n  const timeout = useTimeout();\n  const getRow = React.useCallback(id => {\n    const model = gridRowsLookupSelector(apiRef)[id];\n    if (model) {\n      return model;\n    }\n    const node = apiRef.current.getRowNode(id);\n    if (node && isAutogeneratedRowNode(node)) {\n      return {\n        [GRID_ID_AUTOGENERATED]: id\n      };\n    }\n    return null;\n  }, [apiRef]);\n  const getRowIdProp = props.getRowId;\n  const getRowId = React.useCallback(row => {\n    if (GRID_ID_AUTOGENERATED in row) {\n      return row[GRID_ID_AUTOGENERATED];\n    }\n    if (getRowIdProp) {\n      return getRowIdProp(row);\n    }\n    return row.id;\n  }, [getRowIdProp]);\n  const lookup = React.useMemo(() => currentPage.rows.reduce((acc, {\n    id\n  }, index) => {\n    acc[id] = index;\n    return acc;\n  }, {}), [currentPage.rows]);\n  const throttledRowsChange = React.useCallback(({\n    cache,\n    throttle\n  }) => {\n    const run = () => {\n      lastUpdateMs.current = Date.now();\n      apiRef.current.setState(state => _extends({}, state, {\n        rows: getRowsStateFromCache({\n          apiRef,\n          rowCountProp: props.rowCount,\n          loadingProp: props.loading,\n          previousTree: gridRowTreeSelector(apiRef),\n          previousTreeDepths: gridRowTreeDepthsSelector(apiRef),\n          previousGroupsToFetch: gridRowGroupsToFetchSelector(apiRef)\n        })\n      }));\n      apiRef.current.publishEvent('rowsSet');\n      apiRef.current.forceUpdate();\n    };\n    timeout.clear();\n    apiRef.current.caches.rows = cache;\n    if (!throttle) {\n      run();\n      return;\n    }\n    const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);\n    if (throttleRemainingTimeMs > 0) {\n      timeout.start(throttleRemainingTimeMs, run);\n      return;\n    }\n    run();\n  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef, timeout]);\n\n  /**\n   * API METHODS\n   */\n  const setRows = React.useCallback(rows => {\n    logger.debug(`Updating all rows, new length ${rows.length}`);\n    const cache = createRowsInternalCache({\n      rows,\n      getRowId: props.getRowId,\n      loading: props.loading,\n      rowCount: props.rowCount\n    });\n    const prevCache = apiRef.current.caches.rows;\n    cache.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [logger, props.getRowId, props.loading, props.rowCount, throttledRowsChange, apiRef]);\n  const updateRows = React.useCallback(updates => {\n    if (props.signature === GridSignature.DataGrid && updates.length > 1) {\n      throw new Error(['MUI X: You cannot update several rows at once in `apiRef.current.updateRows` on the DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    const nonPinnedRowsUpdates = computeRowsUpdates(apiRef, updates, props.getRowId);\n    const cache = updateCacheWithNewRows({\n      updates: nonPinnedRowsUpdates,\n      getRowId: props.getRowId,\n      previousCache: apiRef.current.caches.rows\n    });\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);\n  const updateServerRows = React.useCallback((updates, groupKeys) => {\n    const nonPinnedRowsUpdates = computeRowsUpdates(apiRef, updates, props.getRowId);\n    const cache = updateCacheWithNewRows({\n      updates: nonPinnedRowsUpdates,\n      getRowId: props.getRowId,\n      previousCache: apiRef.current.caches.rows,\n      groupKeys: groupKeys ?? []\n    });\n    throttledRowsChange({\n      cache,\n      throttle: false\n    });\n  }, [props.getRowId, throttledRowsChange, apiRef]);\n  const setLoading = React.useCallback(loading => {\n    if (loading === props.loading) {\n      return;\n    }\n    logger.debug(`Setting loading to ${loading}`);\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, {\n        loading\n      })\n    }));\n    apiRef.current.caches.rows.loadingPropBeforePartialUpdates = loading;\n  }, [props.loading, apiRef, logger]);\n  const getRowModels = React.useCallback(() => {\n    const dataRows = gridDataRowIdsSelector(apiRef);\n    const idRowsLookup = gridRowsLookupSelector(apiRef);\n    return new Map(dataRows.map(id => [id, idRowsLookup[id] ?? {}]));\n  }, [apiRef]);\n  const getRowsCount = React.useCallback(() => gridRowCountSelector(apiRef), [apiRef]);\n  const getAllRowIds = React.useCallback(() => gridDataRowIdsSelector(apiRef), [apiRef]);\n  const getRowIndexRelativeToVisibleRows = React.useCallback(id => lookup[id], [lookup]);\n  const setRowChildrenExpansion = React.useCallback((id, isExpanded) => {\n    const currentNode = apiRef.current.getRowNode(id);\n    if (!currentNode) {\n      throw new Error(`MUI X: No row with id #${id} found.`);\n    }\n    if (currentNode.type !== 'group') {\n      throw new Error('MUI X: Only group nodes can be expanded or collapsed.');\n    }\n    const newNode = _extends({}, currentNode, {\n      childrenExpanded: isExpanded\n    });\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [id]: newNode\n          })\n        })\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('rowExpansionChange', newNode);\n  }, [apiRef]);\n  const getRowNode = React.useCallback(id => gridRowTreeSelector(apiRef)[id] ?? null, [apiRef]);\n  const getRowGroupChildren = React.useCallback(({\n    skipAutoGeneratedRows = true,\n    groupId,\n    applySorting,\n    applyFiltering\n  }) => {\n    const tree = gridRowTreeSelector(apiRef);\n    let children;\n    if (applySorting) {\n      const groupNode = tree[groupId];\n      if (!groupNode) {\n        return [];\n      }\n      const sortedRowIds = gridSortedRowIdsSelector(apiRef);\n      children = [];\n      const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\n      for (let index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {\n        const id = sortedRowIds[index];\n        if (!skipAutoGeneratedRows || !isAutogeneratedRowNode(tree[id])) {\n          children.push(id);\n        }\n      }\n    } else {\n      children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows);\n    }\n    if (applyFiltering) {\n      const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n      children = children.filter(childId => filteredRowsLookup[childId] !== false);\n    }\n    return children;\n  }, [apiRef]);\n  const setRowIndex = React.useCallback((rowId, targetIndex) => {\n    const node = apiRef.current.getRowNode(rowId);\n    if (!node) {\n      throw new Error(`MUI X: No row with id #${rowId} found.`);\n    }\n    if (node.parent !== GRID_ROOT_GROUP_ID) {\n      throw new Error(`MUI X: The row reordering do not support reordering of grouped rows yet.`);\n    }\n    if (node.type !== 'leaf') {\n      throw new Error(`MUI X: The row reordering do not support reordering of footer or grouping rows.`);\n    }\n    apiRef.current.setState(state => {\n      const group = gridRowTreeSelector(state, apiRef.current.instanceId)[GRID_ROOT_GROUP_ID];\n      const allRows = group.children;\n      const oldIndex = allRows.findIndex(row => row === rowId);\n      if (oldIndex === -1 || oldIndex === targetIndex) {\n        return state;\n      }\n      logger.debug(`Moving row ${rowId} to index ${targetIndex}`);\n      const updatedRows = [...allRows];\n      updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [GRID_ROOT_GROUP_ID]: _extends({}, group, {\n              children: updatedRows\n            })\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, logger]);\n  const replaceRows = React.useCallback((firstRowToRender, newRows) => {\n    if (props.signature === GridSignature.DataGrid && newRows.length > 1) {\n      throw new Error(['MUI X: You cannot replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    if (newRows.length === 0) {\n      return;\n    }\n    const treeDepth = gridRowMaximumTreeDepthSelector(apiRef);\n    if (treeDepth > 1) {\n      throw new Error('`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping');\n    }\n    const tree = _extends({}, gridRowTreeSelector(apiRef));\n    const dataRowIdToModelLookup = _extends({}, gridRowsLookupSelector(apiRef));\n    const dataRowIdToIdLookup = _extends({}, gridRowsDataRowIdToIdLookupSelector(apiRef));\n    const rootGroup = tree[GRID_ROOT_GROUP_ID];\n    const rootGroupChildren = [...rootGroup.children];\n    const seenIds = new Set();\n    for (let i = 0; i < newRows.length; i += 1) {\n      const rowModel = newRows[i];\n      const rowId = getRowIdFromRowModel(rowModel, props.getRowId, 'A row was provided without id when calling replaceRows().');\n      const [removedRowId] = rootGroupChildren.splice(firstRowToRender + i, 1, rowId);\n      if (!seenIds.has(removedRowId)) {\n        delete dataRowIdToModelLookup[removedRowId];\n        delete dataRowIdToIdLookup[removedRowId];\n        delete tree[removedRowId];\n      }\n      const rowTreeNodeConfig = {\n        id: rowId,\n        depth: 0,\n        parent: GRID_ROOT_GROUP_ID,\n        type: 'leaf',\n        groupingKey: null\n      };\n      dataRowIdToModelLookup[rowId] = rowModel;\n      dataRowIdToIdLookup[rowId] = rowId;\n      tree[rowId] = rowTreeNodeConfig;\n      seenIds.add(rowId);\n    }\n    tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {\n      children: rootGroupChildren\n    });\n\n    // Removes potential remaining skeleton rows from the dataRowIds.\n    const dataRowIds = rootGroupChildren.filter(childId => tree[childId]?.type === 'leaf');\n    apiRef.current.caches.rows.dataRowIdToModelLookup = dataRowIdToModelLookup;\n    apiRef.current.caches.rows.dataRowIdToIdLookup = dataRowIdToIdLookup;\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, {\n        dataRowIdToModelLookup,\n        dataRowIdToIdLookup,\n        dataRowIds,\n        tree\n      })\n    }));\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, props.signature, props.getRowId]);\n  const rowApi = {\n    getRow,\n    setLoading,\n    getRowId,\n    getRowModels,\n    getRowsCount,\n    getAllRowIds,\n    setRows,\n    updateRows,\n    getRowNode,\n    getRowIndexRelativeToVisibleRows,\n    unstable_replaceRows: replaceRows\n  };\n  const rowProApi = {\n    setRowIndex,\n    setRowChildrenExpansion,\n    getRowGroupChildren\n  };\n  const rowProPrivateApi = {\n    updateServerRows\n  };\n\n  /**\n   * EVENTS\n   */\n  const groupRows = React.useCallback(() => {\n    logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);\n    let cache;\n    if (apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows) {\n      // The `props.rows` did not change since the last row grouping\n      // We can use the current rows cache which contains the partial updates done recently.\n      cache = _extends({}, apiRef.current.caches.rows, {\n        updates: {\n          type: 'full',\n          rows: gridDataRowIdsSelector(apiRef)\n        }\n      });\n    } else {\n      // The `props.rows` has changed since the last row grouping\n      // We must use the new `props.rows` on the new grouping\n      // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render\n      cache = createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      });\n    }\n    throttledRowsChange({\n      cache,\n      throttle: false\n    });\n  }, [logger, apiRef, props.rows, props.getRowId, props.loading, props.rowCount, throttledRowsChange]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'rowTreeCreation') {\n      groupRows();\n    }\n  }, [groupRows]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.\n    // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.\n    if (apiRef.current.getActiveStrategy('rowTree') !== gridRowGroupingNameSelector(apiRef)) {\n      groupRows();\n    }\n  }, [apiRef, groupRows]);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridApiEventHandler(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);\n\n  /**\n   * APPLIERS\n   */\n  const applyHydrateRowsProcessor = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const response = apiRef.current.unstable_applyPipeProcessors('hydrateRows', {\n        tree: gridRowTreeSelector(state, apiRef.current.instanceId),\n        treeDepths: gridRowTreeDepthsSelector(state, apiRef.current.instanceId),\n        dataRowIds: gridDataRowIdsSelector(state, apiRef.current.instanceId),\n        dataRowIdToModelLookup: gridRowsLookupSelector(state, apiRef.current.instanceId),\n        dataRowIdToIdLookup: gridRowsDataRowIdToIdLookupSelector(state, apiRef.current.instanceId)\n      });\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, response, {\n          totalTopLevelRowCount: getTopLevelRowCount({\n            tree: response.tree,\n            rowCountProp: props.rowCount\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.rowCount]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateRows', applyHydrateRowsProcessor);\n  useGridApiMethod(apiRef, rowApi, 'public');\n  useGridApiMethod(apiRef, rowProApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n  useGridApiMethod(apiRef, rowProPrivateApi, 'private');\n\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    let isRowCountPropUpdated = false;\n    if (props.rowCount !== lastRowCount.current) {\n      isRowCountPropUpdated = true;\n      lastRowCount.current = props.rowCount;\n    }\n    const areNewRowsAlreadyInState = apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows;\n    const isNewLoadingAlreadyInState = apiRef.current.caches.rows.loadingPropBeforePartialUpdates === props.loading;\n    const isNewRowCountAlreadyInState = apiRef.current.caches.rows.rowCountPropBeforePartialUpdates === props.rowCount;\n\n    // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)\n    if (areNewRowsAlreadyInState) {\n      // If the loading prop has changed, we need to update its value in the state because it won't be done by `throttledRowsChange`\n      if (!isNewLoadingAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            loading: props.loading\n          })\n        }));\n        apiRef.current.caches.rows.loadingPropBeforePartialUpdates = props.loading;\n        apiRef.current.forceUpdate();\n      }\n      if (!isNewRowCountAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),\n            totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)\n          })\n        }));\n        apiRef.current.caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;\n        apiRef.current.forceUpdate();\n      }\n      if (!isRowCountPropUpdated) {\n        return;\n      }\n    }\n    logger.debug(`Updating all rows, new length ${props.rows?.length}`);\n    throttledRowsChange({\n      cache: createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      }),\n      throttle: false\n    });\n  }, [props.rows, props.rowCount, props.getRowId, props.loading, logger, throttledRowsChange, apiRef]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}