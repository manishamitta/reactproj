{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\n/**\n * @class\n *\n * ### Overview\n *\n * A component that represents a logical step as part of the `ui5-wizard`.\n * It is meant to aggregate arbitrary HTML elements that form the content of a single step.\n *\n * ### Structure\n *\n * - Each wizard step has arbitrary content.\n * - Each wizard step might have texts - defined by the `titleText` and `subtitleText` properties.\n * - Each wizard step might have an icon - defined by the `icon` property.\n * - Each wizard step might display a number in place of the `icon`, when it's missing.\n *\n * ### Usage\n * The `ui5-wizard-step` component should be used only as slot of the `ui5-wizard` component\n * and should not be used standalone.\n * @constructor\n * @extends UI5Element\n * @abstract\n * @since 1.0.0-rc.10\n * @public\n * @slot {Node[]} default - Defines the step content.\n */\nlet WizardStep = class WizardStep extends UI5Element {\n  constructor() {\n    super(...arguments);\n    /**\n     * Defines if the step is `disabled`. When disabled the step is displayed,\n     * but the user can't select the step by clicking or navigate to it with scrolling.\n     *\n     * **Note:** Step can't be `selected` and `disabled` at the same time.\n     * In this case the `selected` property would take precedence.\n     * @default false\n     * @public\n     */\n    this.disabled = false;\n    /**\n     * Defines the step's `selected` state - the step that is currently active.\n     *\n     * **Note:** Step can't be `selected` and `disabled` at the same time.\n     * In this case the `selected` property would take precedence.\n     * @default false\n     * @public\n     */\n    this.selected = false;\n    /**\n     * When `branching` is enabled a dashed line would be displayed after the step,\n     * meant to indicate that the next step is not yet known and depends on user choice in the current step.\n     *\n     * **Note:** It is recommended to use `branching` on the last known step\n     * and later add new steps when it becomes clear how the wizard flow should continue.\n     * @default false\n     * @public\n     */\n    this.branching = false;\n  }\n};\n__decorate([property()], WizardStep.prototype, \"titleText\", void 0);\n__decorate([property()], WizardStep.prototype, \"subtitleText\", void 0);\n__decorate([property()], WizardStep.prototype, \"icon\", void 0);\n__decorate([property({\n  type: Boolean\n})], WizardStep.prototype, \"disabled\", void 0);\n__decorate([property({\n  type: Boolean\n})], WizardStep.prototype, \"selected\", void 0);\n__decorate([property({\n  type: Boolean\n})], WizardStep.prototype, \"branching\", void 0);\nWizardStep = __decorate([customElement(\"ui5-wizard-step\")], WizardStep);\nWizardStep.define();\nexport default WizardStep;","map":{"version":3,"names":["UI5Element","customElement","property","WizardStep","constructor","disabled","selected","branching","__decorate","type","Boolean","define"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-fiori/src/WizardStep.ts"],"sourcesContent":["import UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\n\n/**\n * @class\n *\n * ### Overview\n *\n * A component that represents a logical step as part of the `ui5-wizard`.\n * It is meant to aggregate arbitrary HTML elements that form the content of a single step.\n *\n * ### Structure\n *\n * - Each wizard step has arbitrary content.\n * - Each wizard step might have texts - defined by the `titleText` and `subtitleText` properties.\n * - Each wizard step might have an icon - defined by the `icon` property.\n * - Each wizard step might display a number in place of the `icon`, when it's missing.\n *\n * ### Usage\n * The `ui5-wizard-step` component should be used only as slot of the `ui5-wizard` component\n * and should not be used standalone.\n * @constructor\n * @extends UI5Element\n * @abstract\n * @since 1.0.0-rc.10\n * @public\n * @slot {Node[]} default - Defines the step content.\n */\n\n@customElement(\"ui5-wizard-step\")\nclass WizardStep extends UI5Element {\n\t/**\n\t * Defines the `titleText` of the step.\n\t *\n\t * **Note:** The text is displayed in the `ui5-wizard` navigation header.\n\t * @default undefined\n\t * @public\n\t * @since 1.0.0-rc.15\n\t */\n\t@property()\n\ttitleText?: string\n\n\t/**\n\t * Defines the `subtitleText` of the step.\n\t *\n\t * **Note:** the text is displayed in the `ui5-wizard` navigation header.\n\t * @default undefined\n\t * @public\n\t * @since 1.0.0-rc.15\n\t */\n\t@property()\n\tsubtitleText?: string\n\n\t/**\n\t * Defines the `icon` of the step.\n\t *\n\t * **Note:** The icon is displayed in the `ui5-wizard` navigation header.\n\t *\n\t * The SAP-icons font provides numerous options.\n\t * See all the available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).\n\t * @default undefined\n\t * @public\n\t */\n\t@property()\n\ticon?: string\n\n\t/**\n\t * Defines if the step is `disabled`. When disabled the step is displayed,\n\t * but the user can't select the step by clicking or navigate to it with scrolling.\n\t *\n\t * **Note:** Step can't be `selected` and `disabled` at the same time.\n\t * In this case the `selected` property would take precedence.\n\t * @default false\n\t * @public\n\t */\n\t@property({ type: Boolean })\n\tdisabled = false;\n\n\t/**\n\t * Defines the step's `selected` state - the step that is currently active.\n\t *\n\t * **Note:** Step can't be `selected` and `disabled` at the same time.\n\t * In this case the `selected` property would take precedence.\n\t * @default false\n\t * @public\n\t */\n\t@property({ type: Boolean })\n\tselected = false;\n\n\t/**\n\t * When `branching` is enabled a dashed line would be displayed after the step,\n\t * meant to indicate that the next step is not yet known and depends on user choice in the current step.\n\t *\n\t * **Note:** It is recommended to use `branching` on the last known step\n\t * and later add new steps when it becomes clear how the wizard flow should continue.\n\t * @default false\n\t * @public\n\t */\n\t@property({ type: Boolean })\n\tbranching = false;\n\n\tstretch?: boolean;\n\tstepContentAriaLabel?: string;\n}\n\nWizardStep.define();\n\nexport default WizardStep;\n"],"mappings":";;;;;;;AAAA,OAAOA,UAAU,MAAM,4CAA4C;AACnE,OAAOC,aAAa,MAAM,0DAA0D;AACpF,OAAOC,QAAQ,MAAM,qDAAqD;AAE1E;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAMC,UAAU,GAAhB,MAAMA,UAAW,SAAQH,UAAU;EAAnCI,YAAA;;IAoCC;;;;;;;;;IAUA,KAAAC,QAAQ,GAAG,KAAK;IAEhB;;;;;;;;IASA,KAAAC,QAAQ,GAAG,KAAK;IAEhB;;;;;;;;;IAUA,KAAAC,SAAS,GAAG,KAAK;EAIlB;CAAC;AA/DAC,UAAA,EADCN,QAAQ,EAAE,C,4CACO;AAWlBM,UAAA,EADCN,QAAQ,EAAE,C,+CACU;AAarBM,UAAA,EADCN,QAAQ,EAAE,C,uCACE;AAYbM,UAAA,EADCN,QAAQ,CAAC;EAAEO,IAAI,EAAEC;AAAO,CAAE,CAAC,C,2CACX;AAWjBF,UAAA,EADCN,QAAQ,CAAC;EAAEO,IAAI,EAAEC;AAAO,CAAE,CAAC,C,2CACX;AAYjBF,UAAA,EADCN,QAAQ,CAAC;EAAEO,IAAI,EAAEC;AAAO,CAAE,CAAC,C,4CACV;AArEbP,UAAU,GAAAK,UAAA,EADfP,aAAa,CAAC,iBAAiB,CAAC,C,EAC3BE,UAAU,CAyEf;AAEDA,UAAU,CAACQ,MAAM,EAAE;AAEnB,eAAeR,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}