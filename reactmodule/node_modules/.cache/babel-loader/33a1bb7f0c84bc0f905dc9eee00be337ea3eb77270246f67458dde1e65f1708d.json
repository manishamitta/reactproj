{"ast":null,"code":"'use client';\n\nimport { useEffect } from 'react';\n/**\n * A plugin hook for manual row selection.\n *\n * @param {string} manualRowSelectedKey - If this key is found on the original data row, and it is true, this row will be manually selected. __Defaults to `\"isSelected\"`__.\n */\nexport const useManualRowSelect = function () {\n  let manualRowSelectedKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'isSelected';\n  const instanceAfterData = _ref => {\n    let {\n      flatRows,\n      toggleRowSelected\n    } = _ref;\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      flatRows.forEach(_ref2 => {\n        let {\n          id,\n          original\n        } = _ref2;\n        if (manualRowSelectedKey in original) {\n          toggleRowSelected(id, original.isSelected);\n        }\n      });\n    }, [flatRows, manualRowSelectedKey]);\n  };\n  const manualRowSelect = hooks => {\n    hooks.useInstanceAfterData.push(instanceAfterData);\n  };\n  manualRowSelect.pluginName = 'useManualRowSelect';\n  return manualRowSelect;\n};","map":{"version":3,"names":["useEffect","useManualRowSelect","manualRowSelectedKey","arguments","length","undefined","instanceAfterData","_ref","flatRows","toggleRowSelected","forEach","_ref2","id","original","isSelected","manualRowSelect","hooks","useInstanceAfterData","push","pluginName"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-react/dist/components/AnalyticalTable/pluginHooks/useManualRowSelect.js"],"sourcesContent":["'use client';\n\nimport { useEffect } from 'react';\n/**\n * A plugin hook for manual row selection.\n *\n * @param {string} manualRowSelectedKey - If this key is found on the original data row, and it is true, this row will be manually selected. __Defaults to `\"isSelected\"`__.\n */\nexport const useManualRowSelect = (manualRowSelectedKey = 'isSelected') => {\n  const instanceAfterData = ({\n    flatRows,\n    toggleRowSelected\n  }) => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      flatRows.forEach(({\n        id,\n        original\n      }) => {\n        if (manualRowSelectedKey in original) {\n          toggleRowSelected(id, original.isSelected);\n        }\n      });\n    }, [flatRows, manualRowSelectedKey]);\n  };\n  const manualRowSelect = hooks => {\n    hooks.useInstanceAfterData.push(instanceAfterData);\n  };\n  manualRowSelect.pluginName = 'useManualRowSelect';\n  return manualRowSelect;\n};"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,SAAS,QAAQ,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAG,SAAAA,CAAA,EAAyC;EAAA,IAAxCC,oBAAoB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,YAAY;EACpE,MAAMG,iBAAiB,GAAGC,IAAA,IAGpB;IAAA,IAHqB;MACzBC,QAAQ;MACRC;IACF,CAAC,GAAAF,IAAA;IACC;IACAP,SAAS,CAAC,MAAM;MACdQ,QAAQ,CAACE,OAAO,CAACC,KAAA,IAGX;QAAA,IAHY;UAChBC,EAAE;UACFC;QACF,CAAC,GAAAF,KAAA;QACC,IAAIT,oBAAoB,IAAIW,QAAQ,EAAE;UACpCJ,iBAAiB,CAACG,EAAE,EAAEC,QAAQ,CAACC,UAAU,CAAC;QAC5C;MACF,CAAC,CAAC;IACJ,CAAC,EAAE,CAACN,QAAQ,EAAEN,oBAAoB,CAAC,CAAC;EACtC,CAAC;EACD,MAAMa,eAAe,GAAGC,KAAK,IAAI;IAC/BA,KAAK,CAACC,oBAAoB,CAACC,IAAI,CAACZ,iBAAiB,CAAC;EACpD,CAAC;EACDS,eAAe,CAACI,UAAU,GAAG,oBAAoB;EACjD,OAAOJ,eAAe;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}