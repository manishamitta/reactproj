{"ast":null,"code":"\"use strict\";\n\nimport l from \"./generated/VersionInfo.js\";\nlet o,\n  t = {\n    include: [/^ui5-/],\n    exclude: []\n  };\nconst s = new Map(),\n  u = e => {\n    if (!e.match(/^[a-zA-Z0-9_-]+$/)) throw new Error(\"Only alphanumeric characters and dashes allowed for the scoping suffix\");\n    o = e;\n  },\n  c = () => o,\n  a = e => {\n    if (!e || !e.include) throw new Error('\"rules\" must be an object with at least an \"include\" property');\n    if (!Array.isArray(e.include) || e.include.some(r => !(r instanceof RegExp))) throw new Error('\"rules.include\" must be an array of regular expressions');\n    if (e.exclude && (!Array.isArray(e.exclude) || e.exclude.some(r => !(r instanceof RegExp)))) throw new Error('\"rules.exclude\" must be an array of regular expressions');\n    e.exclude = e.exclude || [], t = e, s.clear();\n  },\n  m = () => t,\n  i = e => {\n    if (!s.has(e)) {\n      const r = t.include.some(n => e.match(n)) && !t.exclude.some(n => e.match(n));\n      s.set(e, r);\n    }\n    return s.get(e);\n  },\n  p = e => {\n    if (i(e)) return c();\n  },\n  d = e => {\n    const r = `v${l.version.replaceAll(\".\", \"-\")}`,\n      n = /(--_?ui5)([^,:)\\s]+)/g;\n    return e.replaceAll(n, `$1-${r}$2`);\n  };\nexport { u as setCustomElementsScopingSuffix, c as getCustomElementsScopingSuffix, a as setCustomElementsScopingRules, m as getCustomElementsScopingRules, i as shouldScopeCustomElement, p as getEffectiveScopingSuffixForTag, d as getScopedVarName };","map":{"version":3,"names":["l","o","t","include","exclude","s","Map","u","e","match","Error","c","getCustomElementsScopingSuffix","a","Array","isArray","some","r","RegExp","clear","m","getCustomElementsScopingRules","i","has","n","set","get","p","d","version","replaceAll","setCustomElementsScopingSuffix","setCustomElementsScopingRules","shouldScopeCustomElement","getEffectiveScopingSuffixForTag","getScopedVarName"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-base/src/CustomElementsScopeUtils.ts"],"sourcesContent":["import VersionInfo from \"./generated/VersionInfo.js\";\n\nlet suf: string;\n\ntype Rules = {\n\tinclude: Array<RegExp>,\n\texclude: Array<RegExp>,\n};\n\nlet rulesObj: Rules = {\n\tinclude: [/^ui5-/],\n\texclude: [],\n};\n\nconst tagsCache = new Map<string, boolean>(); // true/false means the tag should/should not be cached, undefined means not known yet.\n\n/**\n * Sets the suffix to be used for custom elements scoping, f.e. pass \"demo\" to get tags such as \"ui5-button-demo\".\n * Note: by default all tags starting with \"ui5-\" will be scoped, unless you change this by calling \"setCustomElementsScopingRules\"\n *\n * @public\n * @param suffix The scoping suffix\n */\nconst setCustomElementsScopingSuffix = (suffix: string) => {\n\tif (!suffix.match(/^[a-zA-Z0-9_-]+$/)) {\n\t\tthrow new Error(\"Only alphanumeric characters and dashes allowed for the scoping suffix\");\n\t}\n\n\tsuf = suffix;\n};\n\n/**\n * Returns the currently set scoping suffix, or undefined if not set.\n *\n * @public\n * @returns {String|undefined}\n */\nconst getCustomElementsScopingSuffix = () => {\n\treturn suf;\n};\n\n/**\n * Sets the rules, governing which custom element tags to scope and which not, f.e.\n * setCustomElementsScopingRules({include: [/^ui5-/]}, exclude: [/^ui5-mylib-/, /^ui5-carousel$/]);\n * will scope all elements starting with \"ui5-\" but not the ones starting with \"ui5-mylib-\" and not \"ui5-carousel\".\n *\n * @public\n * @param rules Object with \"include\" and \"exclude\" properties, both arrays of regular expressions. Note that \"include\"\n * rules are applied first and \"exclude\" rules second.\n */\nconst setCustomElementsScopingRules = (rules: Rules) => {\n\tif (!rules || !rules.include) {\n\t\tthrow new Error(`\"rules\" must be an object with at least an \"include\" property`);\n\t}\n\n\tif (!Array.isArray(rules.include) || rules.include.some(rule => !(rule instanceof RegExp))) {\n\t\tthrow new Error(`\"rules.include\" must be an array of regular expressions`);\n\t}\n\n\tif (rules.exclude && (!Array.isArray(rules.exclude) || rules.exclude.some(rule => !(rule instanceof RegExp)))) {\n\t\tthrow new Error(`\"rules.exclude\" must be an array of regular expressions`);\n\t}\n\n\trules.exclude = rules.exclude || [];\n\trulesObj = rules;\n\ttagsCache.clear(); // reset the cache upon setting new rules\n};\n\n/**\n * Returns the rules, governing which custom element tags to scope and which not. By default, all elements\n * starting with \"ui5-\" are scoped. The default rules are: {include: [/^ui5-/]}.\n *\n * @public\n * @returns {Object}\n */\nconst getCustomElementsScopingRules = () => {\n\treturn rulesObj;\n};\n\n/**\n * Determines whether custom elements with the given tag should be scoped or not.\n * The tag is first matched against the \"include\" rules and then against the \"exclude\" rules and the\n * result is cached until new rules are set.\n *\n * @public\n * @param tag\n */\nconst shouldScopeCustomElement = (tag: string) => {\n\tif (!tagsCache.has(tag)) {\n\t\tconst result = rulesObj.include.some(rule => tag.match(rule)) && !rulesObj.exclude.some(rule => tag.match(rule));\n\t\ttagsCache.set(tag, result);\n\t}\n\n\treturn tagsCache.get(tag);\n};\n\n/**\n * Returns the currently set scoping suffix, if any and if the tag should be scoped, or undefined otherwise.\n *\n * @public\n * @param tag\n * @returns {String}\n */\nconst getEffectiveScopingSuffixForTag = (tag: string) => {\n\tif (shouldScopeCustomElement(tag)) {\n\t\treturn getCustomElementsScopingSuffix();\n\t}\n};\n\n/**\n * @public\n * Used for getting a scoped name for a CSS variable using the same transformation used in the build\n * @name the name of the css variable as written in the code\n * @returns a variable name with the current version inserted as available at runtime\n */\nconst getScopedVarName = (name: string) => {\n\tconst versionStr = `v${VersionInfo.version.replaceAll(\".\", \"-\")}`;\n\tconst expr = /(--_?ui5)([^,:)\\s]+)/g;\n\treturn name.replaceAll(expr, `$1-${versionStr}$2`);\n};\n\nexport {\n\tsetCustomElementsScopingSuffix,\n\tgetCustomElementsScopingSuffix,\n\tsetCustomElementsScopingRules,\n\tgetCustomElementsScopingRules,\n\tshouldScopeCustomElement,\n\tgetEffectiveScopingSuffixForTag,\n\tgetScopedVarName,\n};\n"],"mappings":";;AAAA,OAAOA,CAAA,MAAiB;AAExB,IAAIC,CAAA;EAOAC,CAAA,GAAkB;IACrBC,OAAA,EAAS,CAAC,OAAO;IACjBC,OAAA,EAAS;EACV;AAEA,MAAMC,CAAA,GAAY,IAAIC,GAAA;EAShBC,CAAA,GAAkCC,CAAA,IAAmB;IAC1D,IAAI,CAACA,CAAA,CAAOC,KAAA,CAAM,kBAAkB,GACnC,MAAM,IAAIC,KAAA,CAAM,wEAAwE;IAGzFT,CAAA,GAAMO,CACP;EAAA;EAQMG,CAAA,GAAiCC,CAAA,KAC/BX,CAAA;EAYFY,CAAA,GAAiCL,CAAA,IAAiB;IACvD,IAAI,CAACA,CAAA,IAAS,CAACA,CAAA,CAAML,OAAA,EACpB,MAAM,IAAIO,KAAA,CAAM,+DAA+D;IAGhF,IAAI,CAACI,KAAA,CAAMC,OAAA,CAAQP,CAAA,CAAML,OAAO,KAAKK,CAAA,CAAML,OAAA,CAAQa,IAAA,CAAKC,CAAA,IAAQ,EAAEA,CAAA,YAAgBC,MAAA,CAAO,GACxF,MAAM,IAAIR,KAAA,CAAM,yDAAyD;IAG1E,IAAIF,CAAA,CAAMJ,OAAA,KAAY,CAACU,KAAA,CAAMC,OAAA,CAAQP,CAAA,CAAMJ,OAAO,KAAKI,CAAA,CAAMJ,OAAA,CAAQY,IAAA,CAAKC,CAAA,IAAQ,EAAEA,CAAA,YAAgBC,MAAA,CAAO,IAC1G,MAAM,IAAIR,KAAA,CAAM,yDAAyD;IAG1EF,CAAA,CAAMJ,OAAA,GAAUI,CAAA,CAAMJ,OAAA,IAAW,EAAC,EAClCF,CAAA,GAAWM,CAAA,EACXH,CAAA,CAAUc,KAAA,CAAM,CACjB;EAAA;EASMC,CAAA,GAAgCC,CAAA,KAC9BnB,CAAA;EAWFoB,CAAA,GAA4Bd,CAAA,IAAgB;IACjD,IAAI,CAACH,CAAA,CAAUkB,GAAA,CAAIf,CAAG,GAAG;MACxB,MAAMS,CAAA,GAASf,CAAA,CAASC,OAAA,CAAQa,IAAA,CAAKQ,CAAA,IAAQhB,CAAA,CAAIC,KAAA,CAAMe,CAAI,CAAC,KAAK,CAACtB,CAAA,CAASE,OAAA,CAAQY,IAAA,CAAKQ,CAAA,IAAQhB,CAAA,CAAIC,KAAA,CAAMe,CAAI,CAAC;MAC/GnB,CAAA,CAAUoB,GAAA,CAAIjB,CAAA,EAAKS,CAAM,CAC1B;IAAA;IAEA,OAAOZ,CAAA,CAAUqB,GAAA,CAAIlB,CAAG,CACzB;EAAA;EASMmB,CAAA,GAAmCnB,CAAA,IAAgB;IACxD,IAAIc,CAAA,CAAyBd,CAAG,GAC/B,OAAOG,CAAA,CAA+B,CAExC;EAAA;EAQMiB,CAAA,GAAoBpB,CAAA,IAAiB;IAC1C,MAAMS,CAAA,GAAa,IAAIjB,CAAA,CAAY6B,OAAA,CAAQC,UAAA,CAAW,KAAK,GAAG,CAAC;MACzDN,CAAA,GAAO;IACb,OAAOhB,CAAA,CAAKsB,UAAA,CAAWN,CAAA,EAAM,MAAMP,CAAU,IAAI,CAClD;EAAA;AAEA,SACCV,CAAA,IAAAwB,8BAAA,EACApB,CAAA,IAAAC,8BAAA,EACAC,CAAA,IAAAmB,6BAAA,EACAZ,CAAA,IAAAC,6BAAA,EACAC,CAAA,IAAAW,wBAAA,EACAN,CAAA,IAAAO,+BAAA,EACAN,CAAA,IAAAO,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}