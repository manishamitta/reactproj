{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar Label_1;\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport { LABEL_COLON } from \"./generated/i18n/i18n-defaults.js\";\n// Template\nimport LabelTemplate from \"./generated/templates/LabelTemplate.lit.js\";\n// Styles\nimport labelCss from \"./generated/themes/Label.css.js\";\n/**\n * @class\n *\n * ### Overview\n *\n * The `ui5-label` is a component used to represent a label for elements like input, textarea, select.\n * The `for` property of the `ui5-label` must be the same as the id attribute of the related input element.\n * Screen readers read out the label, when the user focuses the labelled control.\n *\n * The `ui5-label` appearance can be influenced by properties,\n * such as `required` and `wrappingType`.\n * The appearance of the Label can be configured in a limited way by using the design property.\n * For a broader choice of designs, you can use custom styles.\n *\n * ### ES6 Module Import\n *\n * `import \"@ui5/webcomponents/dist/Label\";`\n * @constructor\n * @extends UI5Element\n * @public\n * @slot {Array<Node>} default - Defines the text of the component.\n *\n * **Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.\n */\nlet Label = Label_1 = class Label extends UI5Element {\n  constructor() {\n    super(...arguments);\n    /**\n     * Defines whether colon is added to the component text.\n     *\n     * **Note:** Usually used in forms.\n     * @default false\n     * @public\n     */\n    this.showColon = false;\n    /**\n     * Defines whether an asterisk character is added to the component text.\n     *\n     * **Note:** Usually indicates that user input (bound with the `for` property) is required.\n     * In that case the `required` property of\n     * the corresponding input should also be set.\n     * @default false\n     * @public\n     */\n    this.required = false;\n    /**\n     * Defines how the text of a component will be displayed when there is not enough space.\n     *\n     * **Note:** for option \"Normal\" the text will wrap and the words will not be broken based on hyphenation.\n     * @default \"Normal\"\n     * @public\n     */\n    this.wrappingType = \"Normal\";\n  }\n  static async onDefine() {\n    Label_1.i18nBundle = await getI18nBundle(\"@ui5/webcomponents\");\n  }\n  _onclick() {\n    if (!this.for) {\n      return;\n    }\n    const elementToFocus = this.getRootNode().querySelector(`[id=\"${this.for}\"]`);\n    if (elementToFocus) {\n      elementToFocus.focus();\n    }\n  }\n  get _colonSymbol() {\n    return Label_1.i18nBundle.getText(LABEL_COLON);\n  }\n};\n__decorate([property()], Label.prototype, \"for\", void 0);\n__decorate([property({\n  type: Boolean\n})], Label.prototype, \"showColon\", void 0);\n__decorate([property({\n  type: Boolean\n})], Label.prototype, \"required\", void 0);\n__decorate([property()], Label.prototype, \"wrappingType\", void 0);\nLabel = Label_1 = __decorate([customElement({\n  tag: \"ui5-label\",\n  renderer: litRender,\n  template: LabelTemplate,\n  styles: labelCss,\n  languageAware: true\n})], Label);\nLabel.define();\nexport default Label;","map":{"version":3,"names":["UI5Element","litRender","property","customElement","getI18nBundle","LABEL_COLON","LabelTemplate","labelCss","Label","Label_1","constructor","showColon","required","wrappingType","onDefine","i18nBundle","_onclick","for","elementToFocus","getRootNode","querySelector","focus","_colonSymbol","getText","__decorate","type","Boolean","tag","renderer","template","styles","languageAware","define"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents/src/Label.ts"],"sourcesContent":["import UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport type I18nBundle from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport type WrappingType from \"./types/WrappingType.js\";\nimport { LABEL_COLON } from \"./generated/i18n/i18n-defaults.js\";\n\n// Template\nimport LabelTemplate from \"./generated/templates/LabelTemplate.lit.js\";\n\n// Styles\nimport labelCss from \"./generated/themes/Label.css.js\";\n\n/**\n * @class\n *\n * ### Overview\n *\n * The `ui5-label` is a component used to represent a label for elements like input, textarea, select.\n * The `for` property of the `ui5-label` must be the same as the id attribute of the related input element.\n * Screen readers read out the label, when the user focuses the labelled control.\n *\n * The `ui5-label` appearance can be influenced by properties,\n * such as `required` and `wrappingType`.\n * The appearance of the Label can be configured in a limited way by using the design property.\n * For a broader choice of designs, you can use custom styles.\n *\n * ### ES6 Module Import\n *\n * `import \"@ui5/webcomponents/dist/Label\";`\n * @constructor\n * @extends UI5Element\n * @public\n * @slot {Array<Node>} default - Defines the text of the component.\n *\n * **Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.\n */\n@customElement({\n\ttag: \"ui5-label\",\n\trenderer: litRender,\n\ttemplate: LabelTemplate,\n\tstyles: labelCss,\n\tlanguageAware: true,\n})\nclass Label extends UI5Element {\n\t/**\n\t * Defines the labeled input by providing its ID.\n\t *\n\t * **Note:** Can be used with both `ui5-input` and native input.\n\t * @default undefined\n\t * @public\n\t */\n\t@property()\n\tfor?: string;\n\n\t/**\n\t * Defines whether colon is added to the component text.\n\t *\n\t * **Note:** Usually used in forms.\n\t * @default false\n\t * @public\n\t */\n\t@property({ type: Boolean })\n\tshowColon = false;\n\n\t/**\n\t * Defines whether an asterisk character is added to the component text.\n\t *\n\t * **Note:** Usually indicates that user input (bound with the `for` property) is required.\n\t * In that case the `required` property of\n\t * the corresponding input should also be set.\n\t * @default false\n\t * @public\n\t */\n\t@property({ type: Boolean })\n\trequired = false;\n\n\t/**\n\t * Defines how the text of a component will be displayed when there is not enough space.\n\t *\n\t * **Note:** for option \"Normal\" the text will wrap and the words will not be broken based on hyphenation.\n\t * @default \"Normal\"\n\t * @public\n\t */\n\t@property()\n\twrappingType: `${WrappingType}` = \"Normal\";\n\n\tstatic i18nBundle: I18nBundle;\n\n\tstatic async onDefine() {\n\t\tLabel.i18nBundle = await getI18nBundle(\"@ui5/webcomponents\");\n\t}\n\n\t_onclick() {\n\t\tif (!this.for) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst elementToFocus = (this.getRootNode() as HTMLElement).querySelector(`[id=\"${this.for}\"]`) as HTMLElement;\n\t\tif (elementToFocus) {\n\t\t\telementToFocus.focus();\n\t\t}\n\t}\n\n\tget _colonSymbol() {\n\t\treturn Label.i18nBundle.getText(LABEL_COLON);\n\t}\n}\n\nLabel.define();\n\nexport default Label;\n"],"mappings":";;;;;;;;AAAA,OAAOA,UAAU,MAAM,4CAA4C;AACnE,OAAOC,SAAS,MAAM,sDAAsD;AAC5E,OAAOC,QAAQ,MAAM,qDAAqD;AAC1E,OAAOC,aAAa,MAAM,0DAA0D;AACpF,SAASC,aAAa,QAAQ,4CAA4C;AAG1E,SAASC,WAAW,QAAQ,mCAAmC;AAE/D;AACA,OAAOC,aAAa,MAAM,4CAA4C;AAEtE;AACA,OAAOC,QAAQ,MAAM,iCAAiC;AAEtD;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,IAAMC,KAAK,GAAAC,OAAA,GAAX,MAAMD,KAAM,SAAQR,UAAU;EAA9BU,YAAA;;IAWC;;;;;;;IAQA,KAAAC,SAAS,GAAG,KAAK;IAEjB;;;;;;;;;IAUA,KAAAC,QAAQ,GAAG,KAAK;IAEhB;;;;;;;IAQA,KAAAC,YAAY,GAAsB,QAAQ;EAsB3C;EAlBC,aAAaC,QAAQA,CAAA;IACpBL,OAAK,CAACM,UAAU,GAAG,MAAMX,aAAa,CAAC,oBAAoB,CAAC;EAC7D;EAEAY,QAAQA,CAAA;IACP,IAAI,CAAC,IAAI,CAACC,GAAG,EAAE;MACd;;IAGD,MAAMC,cAAc,GAAI,IAAI,CAACC,WAAW,EAAkB,CAACC,aAAa,CAAC,QAAQ,IAAI,CAACH,GAAG,IAAI,CAAgB;IAC7G,IAAIC,cAAc,EAAE;MACnBA,cAAc,CAACG,KAAK,EAAE;;EAExB;EAEA,IAAIC,YAAYA,CAAA;IACf,OAAOb,OAAK,CAACM,UAAU,CAACQ,OAAO,CAAClB,WAAW,CAAC;EAC7C;CACA;AAtDAmB,UAAA,EADCtB,QAAQ,EAAE,C,iCACE;AAUbsB,UAAA,EADCtB,QAAQ,CAAC;EAAEuB,IAAI,EAAEC;AAAO,CAAE,CAAC,C,uCACV;AAYlBF,UAAA,EADCtB,QAAQ,CAAC;EAAEuB,IAAI,EAAEC;AAAO,CAAE,CAAC,C,sCACX;AAUjBF,UAAA,EADCtB,QAAQ,EAAE,C,0CACgC;AAzCtCM,KAAK,GAAAC,OAAA,GAAAe,UAAA,EAPVrB,aAAa,CAAC;EACdwB,GAAG,EAAE,WAAW;EAChBC,QAAQ,EAAE3B,SAAS;EACnB4B,QAAQ,EAAEvB,aAAa;EACvBwB,MAAM,EAAEvB,QAAQ;EAChBwB,aAAa,EAAE;CACf,CAAC,C,EACIvB,KAAK,CA+DV;AAEDA,KAAK,CAACwB,MAAM,EAAE;AAEd,eAAexB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}