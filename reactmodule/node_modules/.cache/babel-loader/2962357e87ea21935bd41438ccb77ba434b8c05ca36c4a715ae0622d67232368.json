{"ast":null,"code":"const generateTimeItemsArray = function (x) {\n  let step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  const array = [];\n  for (let i = 0; i < x; i++) {\n    if (i % step === 0) {\n      let tempString = i.toString();\n      if (tempString.length === 1) {\n        tempString = `0${tempString}`;\n      }\n      array.push(tempString);\n    }\n  }\n  return array;\n};\nconst getHours = (config, max) => {\n  let hoursValueArray = [];\n  if (config.isTwelveHoursFormat) {\n    hoursValueArray = generateTimeItemsArray(max || 12, 1);\n  } else {\n    hoursValueArray = generateTimeItemsArray(max || 24, 1);\n  }\n  if (config.minHour === 1) {\n    for (let i = 0; i < hoursValueArray.length; i++) {\n      const tempValue = parseInt(hoursValueArray[i]) + 1;\n      if (tempValue.toString().length === 1) {\n        hoursValueArray[i] = `0${tempValue.toString()}`;\n      } else {\n        hoursValueArray[i] = tempValue.toString();\n      }\n    }\n  }\n  return hoursValueArray;\n};\nconst getMinutes = (max, step) => {\n  return generateTimeItemsArray(max || 60, step);\n};\nconst getSeconds = (max, step) => {\n  return generateTimeItemsArray(max || 60, step);\n};\nconst getHoursConfigByFormat = type => {\n  const config = {\n    minHour: 0,\n    maxHour: 0,\n    isTwelveHoursFormat: false\n  };\n  if (type === \"hour0_23\") {\n    config.minHour = 0;\n    config.maxHour = 23;\n    config.isTwelveHoursFormat = false;\n  } else if (type === \"hour1_24\") {\n    config.minHour = 1;\n    config.maxHour = 24;\n    config.isTwelveHoursFormat = false;\n  } else if (type === \"hour0_11\") {\n    config.minHour = 0;\n    config.maxHour = 11;\n    config.isTwelveHoursFormat = true;\n  } else if (type === \"hour1_12\") {\n    config.minHour = 1;\n    config.maxHour = 12;\n    config.isTwelveHoursFormat = true;\n  }\n  return config;\n};\nconst getTimeControlsByFormat = (formatArray, hoursConfig) => {\n  const timeControls = [false, false, false, false]; // hours, minutes, seconds and am/pm\n  for (let i = 0; i < formatArray.length; i++) {\n    if (hoursConfig.maxHour !== 0) {\n      timeControls[0] = true;\n    }\n    if (hoursConfig.maxHour !== 0 && hoursConfig.isTwelveHoursFormat) {\n      timeControls[0] = true;\n    }\n    if (formatArray[i].type === \"minute\") {\n      timeControls[1] = true;\n    }\n    if (formatArray[i].type === \"second\") {\n      timeControls[2] = true;\n    }\n    if (formatArray[i].type === \"amPmMarker\") {\n      timeControls[3] = true;\n    }\n  }\n  return timeControls;\n};\nexport { getHours, getMinutes, getSeconds, getHoursConfigByFormat, getTimeControlsByFormat };","map":{"version":3,"names":["generateTimeItemsArray","x","step","arguments","length","undefined","array","i","tempString","toString","push","getHours","config","max","hoursValueArray","isTwelveHoursFormat","minHour","tempValue","parseInt","getMinutes","getSeconds","getHoursConfigByFormat","type","maxHour","getTimeControlsByFormat","formatArray","hoursConfig","timeControls"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents/src/timepicker-utils/TimeSlider.ts"],"sourcesContent":["type HoursConfiguration = {\n\tminHour: number,\n\tmaxHour: number\n\tisTwelveHoursFormat: boolean,\n}\n\ntype HourType = \"hour0_23\" | \"hour1_24\" | \"hour0_11\" | \"hour1_12\";\n\nconst generateTimeItemsArray = (x: number, step = 1) => {\n\tconst array: Array<string> = [];\n\tfor (let i = 0; i < x; i++) {\n\t\tif (i % step === 0) {\n\t\t\tlet tempString = i.toString();\n\t\t\tif (tempString.length === 1) {\n\t\t\t\ttempString = `0${tempString}`;\n\t\t\t}\n\n\t\t\tarray.push(tempString);\n\t\t}\n\t}\n\n\treturn array;\n};\n\nconst getHours = (config: HoursConfiguration, max: number | undefined) => {\n\tlet hoursValueArray = [];\n\n\tif (config.isTwelveHoursFormat) {\n\t\thoursValueArray = generateTimeItemsArray(max || 12, 1);\n\t} else {\n\t\thoursValueArray = generateTimeItemsArray(max || 24, 1);\n\t}\n\n\tif (config.minHour === 1) {\n\t\tfor (let i = 0; i < hoursValueArray.length; i++) {\n\t\t\tconst tempValue = parseInt(hoursValueArray[i]) + 1;\n\n\t\t\tif (tempValue.toString().length === 1) {\n\t\t\t\thoursValueArray[i] = `0${tempValue.toString()}`;\n\t\t\t} else {\n\t\t\t\thoursValueArray[i] = tempValue.toString();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn hoursValueArray;\n};\n\nconst getMinutes = (max: number | undefined, step: number) => {\n\treturn generateTimeItemsArray(max || 60, step);\n};\n\nconst getSeconds = (max: number | undefined, step: number) => {\n\treturn generateTimeItemsArray(max || 60, step);\n};\n\nconst getHoursConfigByFormat = (type: HourType) => {\n\tconst config: HoursConfiguration = {\n\t\tminHour: 0,\n\t\tmaxHour: 0,\n\t\tisTwelveHoursFormat: false,\n\t};\n\n\tif (type === \"hour0_23\") {\n\t\tconfig.minHour = 0;\n\t\tconfig.maxHour = 23;\n\t\tconfig.isTwelveHoursFormat = false;\n\t} else if (type === \"hour1_24\") {\n\t\tconfig.minHour = 1;\n\t\tconfig.maxHour = 24;\n\t\tconfig.isTwelveHoursFormat = false;\n\t} else if (type === \"hour0_11\") {\n\t\tconfig.minHour = 0;\n\t\tconfig.maxHour = 11;\n\t\tconfig.isTwelveHoursFormat = true;\n\t} else if (type === \"hour1_12\") {\n\t\tconfig.minHour = 1;\n\t\tconfig.maxHour = 12;\n\t\tconfig.isTwelveHoursFormat = true;\n\t}\n\n\treturn config;\n};\n\nconst getTimeControlsByFormat = (formatArray: Array<{ type: string }>, hoursConfig: HoursConfiguration) => {\n\tconst timeControls = [false, false, false, false]; // hours, minutes, seconds and am/pm\n\n\tfor (let i = 0; i < formatArray.length; i++) {\n\t\tif (hoursConfig.maxHour !== 0) {\n\t\t\ttimeControls[0] = true;\n\t\t}\n\t\tif (hoursConfig.maxHour !== 0 && hoursConfig.isTwelveHoursFormat) {\n\t\t\ttimeControls[0] = true;\n\t\t}\n\t\tif (formatArray[i].type === \"minute\") {\n\t\t\ttimeControls[1] = true;\n\t\t}\n\t\tif (formatArray[i].type === \"second\") {\n\t\t\ttimeControls[2] = true;\n\t\t}\n\t\tif (formatArray[i].type === \"amPmMarker\") {\n\t\t\ttimeControls[3] = true;\n\t\t}\n\t}\n\n\treturn timeControls;\n};\n\nexport {\n\tgetHours,\n\tgetMinutes,\n\tgetSeconds,\n\tgetHoursConfigByFormat,\n\tgetTimeControlsByFormat,\n};\n\nexport type {\n\tHourType,\n\tHoursConfiguration,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}