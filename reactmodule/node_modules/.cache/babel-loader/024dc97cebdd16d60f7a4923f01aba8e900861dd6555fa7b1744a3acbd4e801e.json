{"ast":null,"code":"\"use strict\";\n\nimport i from \"../locale/getLocale.js\";\nimport { attachLanguageChange as b } from \"../locale/languageChange.js\";\nimport y from \"../locale/normalizeLocale.js\";\nimport D from \"../locale/nextFallbackLocale.js\";\nimport { DEFAULT_LANGUAGE as c } from \"../generated/AssetParameters.js\";\nimport { getFetchDefaultLanguage as p } from \"../config/Language.js\";\nconst d = new Set(),\n  m = new Set(),\n  g = new Map(),\n  l = new Map(),\n  u = new Map(),\n  $ = (n, t, e) => {\n    const r = `${n}/${t}`;\n    u.set(r, e);\n  },\n  f = (n, t) => {\n    g.set(n, t);\n  },\n  A = n => g.get(n),\n  h = (n, t) => {\n    const e = `${n}/${t}`;\n    return u.has(e);\n  },\n  B = (n, t) => {\n    const e = `${n}/${t}`,\n      r = u.get(e);\n    return r && !l.get(e) && l.set(e, r(t)), l.get(e);\n  },\n  M = n => {\n    d.has(n) || (console.warn(`[${n}]: Message bundle assets are not configured. Falling back to English texts.`, ` Add \\`import \"${n}/dist/Assets.js\"\\` in your bundle and make sure your build tool supports dynamic imports and JSON imports. See section \"Assets\" in the documentation for more information.`), d.add(n));\n  },\n  L = (n, t) => t !== c && !h(n, t),\n  w = async n => {\n    const t = i().getLanguage(),\n      e = i().getRegion(),\n      r = i().getVariant();\n    let s = t + (e ? `-${e}` : \"\") + (r ? `-${r}` : \"\");\n    if (L(n, s)) for (s = y(s); L(n, s);) s = D(s);\n    const I = p();\n    if (s === c && !I) {\n      f(n, null);\n      return;\n    }\n    if (!h(n, s)) {\n      M(n);\n      return;\n    }\n    try {\n      const o = await B(n, s);\n      f(n, o);\n    } catch (o) {\n      const a = o;\n      m.has(a.message) || (m.add(a.message), console.error(a.message));\n    }\n  };\nb(n => {\n  const t = [...g.keys()];\n  return Promise.all(t.map(w));\n});\nexport { $ as registerI18nLoader, w as fetchI18nBundle, A as getI18nBundleData };","map":{"version":3,"names":["i","attachLanguageChange","b","y","D","DEFAULT_LANGUAGE","c","getFetchDefaultLanguage","p","d","Set","m","g","Map","l","u","$","registerI18nLoader","n","t","e","r","set","f","_setI18nBundleData","A","get","h","_hasLoader","has","B","_loadMessageBundleOnce","M","console","warn","add","L","useFallbackBundle","w","getLanguage","getRegion","getVariant","s","I","o","a","message","error","keys","Promise","all","map","fetchI18nBundle","getI18nBundleData"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-base/src/asset-registries/i18n.ts"],"sourcesContent":["import getLocale from \"../locale/getLocale.js\";\nimport { attachLanguageChange } from \"../locale/languageChange.js\";\nimport normalizeLocale from \"../locale/normalizeLocale.js\";\nimport nextFallbackLocale from \"../locale/nextFallbackLocale.js\";\nimport { DEFAULT_LANGUAGE } from \"../generated/AssetParameters.js\";\nimport { getFetchDefaultLanguage } from \"../config/Language.js\";\n\ntype I18nLoader = (localeId: string) => Promise<I18nData>;\ntype I18nData = Record<string, string>;\n\n// contains package names for which the warning has been shown\nconst warningShown = new Set();\nconst reportedErrors = new Set();\n\nconst bundleData = new Map<string, I18nData | null>();\nconst bundlePromises = new Map<string, Promise<I18nData>>();\nconst loaders = new Map<string, I18nLoader>();\n\n/**\n * Registers i18n loader function for given package and locale.\n *\n * @public\n * @param {string} packageName for which package this loader can fetch data\n * @param {string} localeId locale that this loader can handle\n * @param {function} loader async function that will be passed a localeId and should return a JSON object\n */\nconst registerI18nLoader = (packageName: string, localeId: string, loader: I18nLoader) => {\n\t// register loader by key\n\tconst bundleKey = `${packageName}/${localeId}`;\n\tloaders.set(bundleKey, loader);\n};\n\nconst _setI18nBundleData = (packageName: string, data: I18nData | null) => {\n\tbundleData.set(packageName, data);\n};\n\nconst getI18nBundleData = (packageName: string) => {\n\treturn bundleData.get(packageName);\n};\n\nconst _hasLoader = (packageName: string, localeId: string) => {\n\tconst bundleKey = `${packageName}/${localeId}`;\n\treturn loaders.has(bundleKey);\n};\n\n// load bundle over the network once\nconst _loadMessageBundleOnce = (packageName: string, localeId: string) => {\n\tconst bundleKey = `${packageName}/${localeId}`;\n\tconst loadMessageBundle = loaders.get(bundleKey);\n\n\tif (loadMessageBundle && !bundlePromises.get(bundleKey)) {\n\t\tbundlePromises.set(bundleKey, loadMessageBundle(localeId));\n\t}\n\n\treturn bundlePromises.get(bundleKey)!; // Investigate if i18n loader exists and this won't return undefined.\n};\n\nconst _showAssetsWarningOnce = (packageName: string) => {\n\tif (!warningShown.has(packageName)) {\n\t\tconsole.warn(`[${packageName}]: Message bundle assets are not configured. Falling back to English texts.`, /* eslint-disable-line */\n\t\t\t` Add \\`import \"${packageName}/dist/Assets.js\"\\` in your bundle and make sure your build tool supports dynamic imports and JSON imports. See section \"Assets\" in the documentation for more information.`); /* eslint-disable-line */\n\t\twarningShown.add(packageName);\n\t}\n};\n\nconst useFallbackBundle = (packageName: string, localeId: string) => {\n\treturn localeId !== DEFAULT_LANGUAGE && !_hasLoader(packageName, localeId);\n};\n\n/**\n * This method preforms the asynchronous task of fetching the actual text resources. It will fetch\n * each text resource over the network once (even for multiple calls to the same method).\n * It should be fully finished before the i18nBundle class is created in the webcomponents.\n * This method uses the bundle URLs that are populated by the `registerI18nBundle` method.\n * To simplify the usage, the synchronization of both methods happens internally for the same `bundleId`\n * @param {packageName} packageName the NPM package name\n * @public\n */\nconst fetchI18nBundle = async (packageName: string) => {\n\tconst language = getLocale().getLanguage();\n\tconst region = getLocale().getRegion();\n\tconst variant = getLocale().getVariant();\n\tlet localeId = language + (region ? `-${region}` : ``) + (variant ? `-${variant}` : ``);\n\n\tif (useFallbackBundle(packageName, localeId)) {\n\t\tlocaleId = normalizeLocale(localeId);\n\n\t\twhile (useFallbackBundle(packageName, localeId)) {\n\t\t\tlocaleId = nextFallbackLocale(localeId);\n\t\t}\n\t}\n\n\t// use default language unless configured to always fetch it from the network\n\tconst fetchDefaultLanguage = getFetchDefaultLanguage();\n\tif (localeId === DEFAULT_LANGUAGE && !fetchDefaultLanguage) {\n\t\t_setI18nBundleData(packageName, null); // reset for the default language (if data was set for a previous language)\n\t\treturn;\n\t}\n\n\tif (!_hasLoader(packageName, localeId)) {\n\t\t_showAssetsWarningOnce(packageName);\n\t\treturn;\n\t}\n\n\ttry {\n\t\tconst data = await _loadMessageBundleOnce(packageName, localeId);\n\t\t_setI18nBundleData(packageName, data);\n\t} catch (error: unknown) {\n\t\tconst e = error as Error;\n\t\tif (!reportedErrors.has(e.message)) {\n\t\t\treportedErrors.add(e.message);\n\t\t\tconsole.error(e.message); /* eslint-disable-line */\n\t\t}\n\t}\n};\n\n// When the language changes dynamically (the user calls setLanguage), re-fetch all previously fetched bundles\nattachLanguageChange((lang: string /* eslint-disable-line */) => {\n\tconst allPackages = [...bundleData.keys()];\n\treturn Promise.all(allPackages.map(fetchI18nBundle));\n});\n\nexport {\n\tregisterI18nLoader,\n\tfetchI18nBundle,\n\tgetI18nBundleData,\n};\n"],"mappings":";;AAAA,OAAOA,CAAA,MAAe;AACtB,SAASC,oBAAA,IAAAC,CAAA,QAA4B;AACrC,OAAOC,CAAA,MAAqB;AAC5B,OAAOC,CAAA,MAAwB;AAC/B,SAASC,gBAAA,IAAAC,CAAA,QAAwB;AACjC,SAASC,uBAAA,IAAAC,CAAA,QAA+B;AAMxC,MAAMC,CAAA,GAAe,IAAIC,GAAA;EACnBC,CAAA,GAAiB,IAAID,GAAA;EAErBE,CAAA,GAAa,IAAIC,GAAA;EACjBC,CAAA,GAAiB,IAAID,GAAA;EACrBE,CAAA,GAAU,IAAIF,GAAA;EAUdG,CAAA,GAAqBC,CAACC,CAAA,EAAqBC,CAAA,EAAkBC,CAAA,KAAuB;IAEzF,MAAMC,CAAA,GAAY,GAAGH,CAAW,IAAIC,CAAQ;IAC5CJ,CAAA,CAAQO,GAAA,CAAID,CAAA,EAAWD,CAAM,CAC9B;EAAA;EAEMG,CAAA,GAAqBC,CAACN,CAAA,EAAqBC,CAAA,KAA0B;IAC1EP,CAAA,CAAWU,GAAA,CAAIJ,CAAA,EAAaC,CAAI,CACjC;EAAA;EAEMM,CAAA,GAAqBP,CAAA,IACnBN,CAAA,CAAWc,GAAA,CAAIR,CAAW;EAG5BS,CAAA,GAAaC,CAACV,CAAA,EAAqBC,CAAA,KAAqB;IAC7D,MAAMC,CAAA,GAAY,GAAGF,CAAW,IAAIC,CAAQ;IAC5C,OAAOJ,CAAA,CAAQc,GAAA,CAAIT,CAAS,CAC7B;EAAA;EAGMU,CAAA,GAAyBC,CAACb,CAAA,EAAqBC,CAAA,KAAqB;IACzE,MAAMC,CAAA,GAAY,GAAGF,CAAW,IAAIC,CAAQ;MACtCE,CAAA,GAAoBN,CAAA,CAAQW,GAAA,CAAIN,CAAS;IAE/C,OAAIC,CAAA,IAAqB,CAACP,CAAA,CAAeY,GAAA,CAAIN,CAAS,KACrDN,CAAA,CAAeQ,GAAA,CAAIF,CAAA,EAAWC,CAAA,CAAkBF,CAAQ,CAAC,GAGnDL,CAAA,CAAeY,GAAA,CAAIN,CAAS,CACpC;EAAA;EAEMY,CAAA,GAA0Bd,CAAA,IAAwB;IAClDT,CAAA,CAAaoB,GAAA,CAAIX,CAAW,MAChCe,OAAA,CAAQC,IAAA,CAAK,IAAIhB,CAAW,+EAC3B,kBAAkBA,CAAW,4KAA4K,GAC1MT,CAAA,CAAa0B,GAAA,CAAIjB,CAAW,EAE9B;EAAA;EAEMkB,CAAA,GAAoBC,CAACnB,CAAA,EAAqBC,CAAA,KACxCA,CAAA,KAAab,CAAA,IAAoB,CAACqB,CAAA,CAAWT,CAAA,EAAaC,CAAQ;EAYpEmB,CAAA,GAAkB,MAAOpB,CAAA,IAAwB;IACtD,MAAMC,CAAA,GAAWnB,CAAA,CAAU,EAAEuC,WAAA,CAAY;MACnCnB,CAAA,GAASpB,CAAA,CAAU,EAAEwC,SAAA,CAAU;MAC/BnB,CAAA,GAAUrB,CAAA,CAAU,EAAEyC,UAAA,CAAW;IACvC,IAAIC,CAAA,GAAWvB,CAAA,IAAYC,CAAA,GAAS,IAAIA,CAAM,KAAK,OAAOC,CAAA,GAAU,IAAIA,CAAO,KAAK;IAEpF,IAAIe,CAAA,CAAkBlB,CAAA,EAAawB,CAAQ,GAG1C,KAFAA,CAAA,GAAWvC,CAAA,CAAgBuC,CAAQ,GAE5BN,CAAA,CAAkBlB,CAAA,EAAawB,CAAQ,IAC7CA,CAAA,GAAWtC,CAAA,CAAmBsC,CAAQ;IAKxC,MAAMC,CAAA,GAAuBnC,CAAA,CAAwB;IACrD,IAAIkC,CAAA,KAAapC,CAAA,IAAoB,CAACqC,CAAA,EAAsB;MAC3DpB,CAAA,CAAmBL,CAAA,EAAa,IAAI;MACpC;IACD;IAEA,IAAI,CAACS,CAAA,CAAWT,CAAA,EAAawB,CAAQ,GAAG;MACvCV,CAAA,CAAuBd,CAAW;MAClC;IACD;IAEA,IAAI;MACH,MAAM0B,CAAA,GAAO,MAAMd,CAAA,CAAuBZ,CAAA,EAAawB,CAAQ;MAC/DnB,CAAA,CAAmBL,CAAA,EAAa0B,CAAI,CACrC;IAAA,SAASA,CAAA,EAAgB;MACxB,MAAMC,CAAA,GAAID,CAAA;MACLjC,CAAA,CAAekB,GAAA,CAAIgB,CAAA,CAAEC,OAAO,MAChCnC,CAAA,CAAewB,GAAA,CAAIU,CAAA,CAAEC,OAAO,GAC5Bb,OAAA,CAAQc,KAAA,CAAMF,CAAA,CAAEC,OAAO,EAEzB;IAAA;EACD;AAGA5C,CAAA,CAAsBgB,CAAA,IAA2C;EAChE,MAAMC,CAAA,GAAc,CAAC,GAAGP,CAAA,CAAWoC,IAAA,CAAK,CAAC;EACzC,OAAOC,OAAA,CAAQC,GAAA,CAAI/B,CAAA,CAAYgC,GAAA,CAAIb,CAAe,CAAC,CACpD;AAAA,CAAC;AAED,SACCtB,CAAA,IAAAC,kBAAA,EACAqB,CAAA,IAAAc,eAAA,EACA3B,CAAA,IAAA4B,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}