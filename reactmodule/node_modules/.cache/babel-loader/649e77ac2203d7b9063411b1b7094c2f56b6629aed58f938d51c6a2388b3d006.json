{"ast":null,"code":"\"use strict\";\n\nconst s = [\"disabled\", \"title\", \"hidden\", \"role\", \"draggable\"],\n  r = e => s.includes(e) || e.startsWith(\"aria\") ? !0 : ![HTMLElement, Element, Node].some(t => t.prototype.hasOwnProperty(e));\nexport default r;","map":{"version":3,"names":["s","r","e","includes","startsWith","HTMLElement","Element","Node","some","t","prototype","hasOwnProperty"],"sources":["/home/user/projects/reactproj/node_modules/@ui5/webcomponents-base/src/util/isValidPropertyName.ts"],"sourcesContent":["// Note: disabled is present in IE so we explicitly allow it here.\n// Others, such as title/hidden, we explicitly override, so valid too\nconst allowList = [\n\t\"disabled\",\n\t\"title\",\n\t\"hidden\",\n\t\"role\",\n\t\"draggable\",\n];\n\n/**\n * Checks whether a property name is valid (does not collide with existing DOM API properties)\n *\n * @param name\n * @returns {boolean}\n */\nconst isValidPropertyName = (name: string) => {\n\tif (allowList.includes(name) || name.startsWith(\"aria\")) {\n\t\treturn true;\n\t}\n\tconst classes = [\n\t\tHTMLElement,\n\t\tElement,\n\t\tNode,\n\t];\n\treturn !classes.some(klass => klass.prototype.hasOwnProperty(name)); // eslint-disable-line\n};\n\nexport default isValidPropertyName;\n"],"mappings":";;AAEA,MAAMA,CAAA,GAAY,CACjB,YACA,SACA,UACA,QACA,WACD;EAQMC,CAAA,GAAuBC,CAAA,IACxBF,CAAA,CAAUG,QAAA,CAASD,CAAI,KAAKA,CAAA,CAAKE,UAAA,CAAW,MAAM,IAC9C,KAOD,CALS,CACfC,WAAA,EACAC,OAAA,EACAC,IACD,EACgBC,IAAA,CAAKC,CAAA,IAASA,CAAA,CAAMC,SAAA,CAAUC,cAAA,CAAeT,CAAI,CAAC;AAGnE,eAAeD,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}